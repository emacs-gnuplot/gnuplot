\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename gnuplot.info
@settitle Gnuplot: An Interactive Plotting Program
@setchapternewpage odd
@c %**end of header

@c define the command and options indices
@defindex cm
@defindex op
@defindex tm

@dircategory Math
@direntry
* GNUPLOT: (gnuplot).             An Interactive Plotting Program
@end direntry

@ifnottex
@node Top, Gnuplot, (dir), (dir)
@top Master Menu
@end ifnottex

@example
                       GNUPLOT

            An Interactive Plotting Program
             Thomas Williams & Colin Kelley
                Version 5.0 organized by
       Ethan A Merritt with help from many others

   Copyright (C) 1986 - 1993, 1998, 2004   Thomas Williams, Colin Kelley
           Copyright (C) 2004 - 2012  various authors

       Mailing list for comments: gnuplot-info@@lists.sourceforge.net
     Mailing list for bug reports: gnuplot-bugs@@lists.sourceforge.net

         This manual was originally prepared by Dick Crawford
                   Version 5.0 - March 2014


Major contributors (alphabetic order):
@end example


@menu
* Gnuplot::
* Plotting_styles::
* Commands::
* Terminal_types::
* Concept_Index::
* Command_Index::
* Options_Index::
* Function_Index::
* Terminal_Index::
@end menu

@node Gnuplot, Plotting_styles, Top, Top
@chapter Gnuplot

@cindex gnuplot

@c ^<h2 align="center"> An Interactive Plotting Program </h2>
@c ^<p align="center">  Thomas Williams & Colin Kelley</p>
@c ^<p align="center">  Version 6 organized by Ethan A Merritt</p>
@c ^<p align="center">Major contributors (alphabetic order):<br>
@c ^<br>
@c ^  Hans-Bernhard Broeker, John Campbell,<br>
@c ^  Robert Cunningham,  David Denholm,<br>
@c ^  Gershon Elber, Roger Fearick,<br>
@c ^  Carsten Grammes, Lucas Hart, Lars Hecking,<br>
@c ^  Péter Juhász, Thomas Koenig, David Kotz,<br>
@c ^  Ed Kubaitis, Russell Lang, Timothée Lecomte,<br>
@c ^  Alexander Lehmann, Alexander Mai, Bastian Märkisch,<br>
@c ^  Tatsuro Matsuoka, Ethan A Merritt, Petr Mikulík,<br>
@c ^  Hiroki Motoyoshi, Carsten Steger, Shigeharu Takeno,<br>
@c ^  Tom Tkacik, Jos Van der Woude,<br>
@c ^  James R. Van Zandt, Alex Woo, Johannes Zellner<br>
@c ^</p>
@c ^<p align="center">  Copyright (C) 1986 - 1993, 1998 - 2004   Thomas Williams, Colin Kelley<br>
@c ^     Copyright (C) 2004 - 2024 various authors</p>
@c ^<p align="center">   Mailing list for comments: <tt>gnuplot-info@@lists.sourceforge.net</tt><br>
@c ^   Gnuplot <a href="http://gnuplot.info"> home page </a><br>
@c ^      Issue trackers: &nbsp;
@uref{https://sourceforge.net/p/gnuplot/bugs,bugs } &nbsp;&nbsp;
@uref{https://sourceforge.net/p/gnuplot/feature-requests,feature requests }
@c ^<p align="center"> This manual was originally prepared by Dick Crawford</p>
@c ^<!-- end of titlepage -->

@menu
* Copyright::
* Introduction::
* Seeking-assistance_/_Bugs::
* New_features_in_version_6::
* Differences_between_versions_5_and_6::
* Demos_and_Online_Examples::
* Batch/Interactive_Operation::
* Canvas_size::
* Command-line-editing::
* Comments::
* Coordinates::
* Datastrings::
* Enhanced_text_mode::
* Environment::
* Expressions::
* Fonts::
* Glossary::
* inline_data_and_datablocks::
* iteration::
* linetypes::
* layers::
* mouse_input::
* Persist::
* Plotting::
* Plugins::
* Scope_of_variables::
* Start-up_(initialization)::
* String_constants::
* Substitution_and_Command_line_macros::
* Syntax::
* Time/Date_data::
* Watchpoints_::
@end menu

@node Copyright, Introduction, Gnuplot, Gnuplot
@section Copyright

@cindex copyright

@cindex license

@example
    Copyright (C) 1986 - 1993, 1998, 2004, 2007  Thomas Williams, Colin Kelley
    Copyright (C) 2004-2024  various authors

@end example

Permission to use, copy, and distribute this software and its
documentation for any purpose with or without fee is hereby granted,
provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear
in supporting documentation.

Permission to modify the software is granted, but not the right to
distribute the complete modified source code.  Modifications are to
be distributed as patches to the released version.  Permission to
distribute binaries produced by compiling modified sources is granted,
provided you
@example
  1. distribute the corresponding source modifications from the
   released version in the form of a patch file along with the binaries,
  2. add special version identification to distinguish your version
   in addition to the base release version number,
  3. provide your name and address as the primary contact for the
   support of your modified version, and
  4. retain our contact information in regard to use of the base software.
@end example

Permission to distribute the released version of the source code along
with corresponding source modifications in the form of a patch file is
granted with same provisions 2 through 4 for binary distributions.

This software is provided "as is" without express or implied warranty
to the extent permitted by applicable law.

@example
      AUTHORS
              Original Software:
                 Thomas Williams,  Colin Kelley.
              Gnuplot 2.0 additions:
                 Russell Lang, Dave Kotz, John Campbell.
              Gnuplot 3.0 additions:
                 Gershon Elber and many others.
              Gnuplot 4.0 and subsequent releases:
                 See list of contributors at head of this document.

@end example

@node Introduction, Seeking-assistance_/_Bugs, Copyright, Gnuplot
@section Introduction

@cindex introduction

@c ?
`Gnuplot` is a portable command-line driven graphing utility for Linux, OS/2,
MS Windows, macOS, VMS, and many other platforms. The source code is copyrighted
but freely distributed (i.e., you don't have to pay for it). It was originally
created to allow scientists and students to visualize mathematical functions
and data interactively, but has grown to support many non-interactive uses
such as web scripting. It is also used as a plotting engine by third-party
applications like Octave. Gnuplot has been supported and under active
development since 1986.

Gnuplot can generate many types of plot in 2D and 3D. It can draw using lines,
points, boxes, contours, vector fields, images, surfaces, and associated text.
It also supports specialized graphs such as heat maps, spider plots, polar
projection, histograms, boxplots, bee swarm plots, and nonlinear coordinates.

Gnuplot supports many different types of output: interactive screen terminals
(with mouse and hotkey input), direct output to pen plotters or modern
printers, and output to many file formats (eps, emf, fig, jpeg, LaTeX, pdf, png,
postscript, ...). Gnuplot is easily extensible to include new output modes.
A recent example is support for webp animation.  Mouseable plots embedded in
web pages can be generated using the svg or HTML5 canvas terminal drivers.

The command language of `gnuplot` is case sensitive, i.e. commands and
function names written in lowercase are not the same as those written in
capitals. All command names may be abbreviated as long as the abbreviation is
not ambiguous. Any number of commands may appear on a line, separated by
semicolons (;). Strings may be set off by either single or double quotes,
although there are some subtle differences.  See `syntax` and `quotes` for
more details. Example:

@example
      set title "My First Plot";  plot 'data';  print "all done!"

@end example

Commands may extend over several input lines by ending each line but the last
with a backslash (\).  The backslash must be the _last_ character on each
line.  The effect is as if the backslash and newline were not there.  That
is, no white space is implied, nor is a comment terminated.  Therefore,
commenting out a continued line comments out the entire command
(see `comments`).  But note that if an error occurs somewhere on a multi-line
command, the parser may not be able to locate precisely where the error is
and in that case will not necessarily point to the correct line.

In this document, curly braces (@{@}) denote optional arguments and a vertical
bar (|) separates mutually exclusive choices.  `Gnuplot` keywords or @ref{help}
topics are indicated by backquotes or `boldface` (where available).  Angle
brackets (<>) are used to mark replaceable tokens.  In many cases, a default
value of the token will be taken for optional arguments if the token is
omitted, but these cases are not always denoted with braces around the angle
brackets.

For built-in help on any topic, type @ref{help} followed by the name of the topic
or `help ?` to get a menu of available topics.

A large set of demo plots is available on the web page
@uref{http://www.gnuplot.info/demo/,http://www.gnuplot.info/demo/
}
When run from command line, gnuplot is invoked using the syntax
@example
      gnuplot @{OPTIONS@} file1 file2 ...
@end example

where file1, file2, etc. are input files as in the `load` command.
Options interpreted by gnuplot may come anywhere on the line.  Files are
executed in the order specified, as are commands supplied by the -e option,
for example
@example
      gnuplot   file1.in   -e "reset"   file2.in

@end example

The special filename "-" is used to force reading from stdin.  `Gnuplot` exits
after the last file is processed.  If no load files are named, `Gnuplot` takes
interactive input from stdin.  See help `batch/interactive` for more details.
See `command-line-options` for more details, or type
@example
      gnuplot --help

@end example

In sessions with an interactive plot window you can hit 'h' anywhere on the
plot for help about `hotkeys` and `mousing` features.

@node Seeking-assistance_/_Bugs, New_features_in_version_6, Introduction, Gnuplot
@section Seeking-assistance / Bugs

@cindex help-desk

@cindex faq

@cindex FAQ

@cindex bugs

@cindex seeking-assistance

The canonical gnuplot home page can be found at
@uref{http://www.gnuplot.info,http://www.gnuplot.info
}

Before seeking help, please check file FAQ.pdf or the above website for a
@uref{http://www.gnuplot.info/faq/,FAQ (Frequently Asked Questions) list.
}

Another resource for help with specific plotting problems (not bugs) is
@example
          https://stackoverflow.com/questions/tagged/gnuplot

@end example

Bug reports and feature requests should be uploaded to the trackers at
@example
          https://sourceforge.net/p/gnuplot/_list/tickets
@end example

Please check previous reports to see if the bug you want to report has
already been fixed in a newer version.

When reporting a bug or posting a question, please include full details
of the gnuplot version, the terminal type, and the operating system.
A short self-contained script demonstrating the problem is very helpful.

Instructions for subscribing to gnuplot mailing lists may be
found via the gnuplot development website
@uref{http://sourceforge.net/projects/gnuplot,http://sourceforge.net/projects/gnuplot
}

Please note that before you write to any of the gnuplot mailing lists you
must first subscribe to the list.  This helps reduce the amount of spam.

The address for mailing to list members is:
@example
          gnuplot-info@@lists.sourceforge.net

@end example

A mailing list for those interested in the development version of gnuplot is:
@example
          gnuplot-beta@@lists.sourceforge.net

@end example


@node New_features_in_version_6, Differences_between_versions_5_and_6, Seeking-assistance_/_Bugs, Gnuplot
@section New features in version 6

@c ?new version_6
@cindex new

@cindex version
@opindex version


Version 6 is the latest major release in a history of gnuplot development
dating back to 1986.  It follows major version 5 (2015) and subsequent
minor version releases 5.2 (2017) and 5.4 (2020).  Development continues
in a separate unreleased branch in the project git repository on SourceForge.

Some features described in this document are present only if chosen and
configured at the time gnuplot is compiled from source.  To determine what
configuration options were used to build the particular copy of gnuplot you
are running, type `show version long`.


@menu
* Function_blocks_and_scoped_variables::
* Special_and_complex-valued_functions::
* New_plot_styles::
* Hulls::
* Named_palettes::
* New_data_formats::
* New_built-in_functions_and_array_operations::
* Program_control_flow::
* Multiplots::
* New_terminals_and_terminal_options::
* Watchpoints::
* Week-date_time_support::
* Other_new_features::
* Brief_summary_of_features_introduced_in_version_5::
@end menu

@node Function_blocks_and_scoped_variables, Special_and_complex-valued_functions, New_features_in_version_6, New_features_in_version_6
@subsection Function blocks and scoped variables

@c ?new function blocks
This version of gnuplot introduces a mechanism for invoking a block of
standard gnuplot commands as a callable function.  A function block can
accept from 0 to 9 parameters and returns a value.  Function blocks can be
used to calculate and assign a new value to a variable, to combine with other
functions and operators, or to perform a repetitive task preparing data.
There are three components to this mechanism.
See `local`, `scope`, `function blocks`, @ref{return}.
@itemize @bullet
@item
The `local` qualifier allows optional declaration of a variable or array
whose scope is limited to the duration of execution of the program unit in
which it is found. These units currently include execution of a
`load` or @ref{call} statement, function block evaluation, and the code block
in curly brackets following an @ref{if}, `else`, `do for`, or `while` statement.
If the name of a local variable duplicates the name of a global variable,
the global variable is shadowed until exit from the local scope.
@item
The `function` command declares a named function block (effectively an
array of strings) containing gnuplot commands.  When the function block
is invoked, commands are executed successively until the end of the block
or until a @ref{return} command is encountered.
@item
The `return <expression>` command terminates execution of a function block.
The result of evaluating <expression> is returned as the value of the
function.  Anywhere outside a function block @ref{return} acts like @ref{exit}.
@end itemize

For an example of using this mechanism to define and plot a non-trivial
function that is too complicated for a simple one-line definition `f(x) = ...`
please see
@uref{http://www.gnuplot.info/demo_6.0/function_block.html,`function_block.dem`
}


@node Special_and_complex-valued_functions, New_plot_styles, Function_blocks_and_scoped_variables, New_features_in_version_6
@subsection Special and complex-valued functions

@c ?new math
Gnuplot 6 provides an expanded set of complex-valued functions and updated
versions of some functions that were present in earlier versions.
@itemize @bullet
@item
New: Riemann zeta function with complex domain and range.  See @ref{zeta}.
@item
Updated lower incomplete gamma function with improved domain and precision.
Complex arguments accepted.
See `igamma`.
@item
New upper incomplete gamma function (real arguments only).
See @ref{uigamma}.
@item
Updated incomplete beta function with improved domain and precision.
See `ibeta`.
@item
New function for the inverse incomplete gamma function.
See `invigamma`.
@item
New function for the inverse incomplete beta function.
See `invibeta`.
@item
New complex function LambertW(z,k) returns the kth branch of multivalued
function W_k(z).
@c ^<br>
Note that the older function lambertw(x) = real(LambertW( real(z), 0 )).
See @ref{LambertW}.
@item
New complex function lnGamma(z).
Note that existing function lgamma(x) = real(lnGamma(real(z)).
See @ref{lnGamma}.
@item
Complex function conj(z) returns the complex conjugate of z.
@item
Synchrotron function F(x), see `SynchrotronF`.
@item
acosh(z) domain extended to cover negative real axis.
@item
asin(z) asinh(z) improved precision for complex arguments.
@item
Predefined variable I = sqrt(-1) = @{0,1@} for convenience.
@c ^<br>
This is useful because gnuplot does not accept @{a,b@} as a valid complex
constant but does accept (a + b*I) as a valid complex expression.
@end itemize

Additional special functions are supported if a suitable external
library is found at build time.  See `special_functions`.
@itemize @bullet
@item
Complex Bessel functions Iν(z), Jν(z), Kν(z), Yν(z) of order ν (real)
with complex argument z. See `BesselK`.
@item
Complex Hankel functions H1ν(z), H2ν(z) of order ν with complex z.
See `BesselH1`.
@item
Complex Airy functions Ai(z), Bi(z).
@item
Complex exponential integral of order n. See `expint`.
@item
Fresnel integrals C(x) and S(x). See `FresnelC`.
@item
Function `VP_fwhm(sigma,gamma)` returns the full width at half maximum
of the Voigt profile. See `VP`, `VP_fwhm`.
@end itemize


@node New_plot_styles, Hulls, Special_and_complex-valued_functions, New_features_in_version_6
@subsection New plot styles

@c ?new styles
@itemize @bullet
@item
The plot style `with surface` works in 2D polar coordinates to produce
a solid-fill gridded representation of the plane, colored by weighted
contributions from an arbitrary set of input points. This is analogous to
the use of @ref{dgrid3d} and style `with pm3d` to produce a 3D gridded surface.
See `set polar grid` and `polar heatmap`.
@item
New 2D plot style @ref{sectors} is an alternative to generating a full
polar gridded surface.  For each input data point it generates a single
annular wedge in a conceptual polar grid.  Unlike polar mode `with surface`
it can be used in either a polar or cartesian coordinate graph.
@item
New 2D plot style @ref{hsteps} allows construction of step-like plots with
a variety of representations in addition to those offered by existing styles
@ref{steps}, @ref{histeps}, @ref{fsteps}, and @ref{fillsteps}.  See @ref{hsteps}.
@item
Plot style `with lines` now has a filter option `sharpen`.  This filter
detects spikes in a function plot that appear truncated in the output
because the peak lies between two x-coordinates at which the function has
been sampled.  It adds a new sample point at the location of each such peak.
See @ref{filters}.
@item
Although it is not strictly speaking a new plot style, the combination
of the concave hull filter with along-path smoothing of filled areas
allows creation of 'blobby region' plots showing, for example,
the extents of overlapping data clusters. See `concavehull`.
@item
3D plot style `with pm3d` accepts an optional modifier `zclip [zmin:zmax]`
that selects only a slice of the full surface.  Successive plots with
incremental changes to the clipping limits can be used to animate a
cross-sectional cutaway view in 3D or to create a filled area contour map.
This is automated by a new plot style @ref{contourfill} that is
particularly useful in 2D projection. See @ref{contourfill}.

@end itemize
D polargrid 4
DB
D windrose 1
D sectors 4
DB
D sharpen 1
D iris 2
DB
D contourfill 4
DB
D logic_timing 1
D rank_sequence 1


@node Hulls, Named_palettes, New_plot_styles, New_features_in_version_6
@subsection Hulls, masks, and smoothing

@c ?new hulls
@itemize @bullet
@item
A cluster of 2D points can be replaced by its bounding polygon using the
new filter `convexhull`.  A path-smoothed bounding curve can be plotted
as a filled area using "convexhull smooth path with filledcurves".
See `convexhull`.
@item
An alternative filter `concavehull` generates a bounding polygon that
is not necessarily convex; instead it forms a χ-shape determined by a
characteristic length parameter that controls the degree of concavity.
This essentially draws a blob around the data points. See `concavehull`.
@item
A convex hull or other polygon can be used as a mask to display only
selected portions of a pm3d surface or an image plot.
See new plot style `with mask` (defines a mask) and keyword `mask`
(applies the mask to a subsequent plot component).
@item
curve smoothing using along-path cubic splines suitable for closed curves
or for 2D curves that are not monotonic on x. See `smooth path`.
This allows smoothing of hulls and masks.
@item
cubic spline smoothing of 3D lines. See `splot smooth csplines`
@item
Smoothing options apply to plotting @ref{filledcurves} @{above|below|between@}.
@item
New keyword `period` for smoothing periodic data. See `smooth kdensity`.
@end itemize
D convex_hull 2
D mask_pm3d 3
D smooth_path 2


@node Named_palettes, New_data_formats, Hulls, New_features_in_version_6
@subsection Named palettes

@c ?new colormaps
@itemize @bullet
@item
The current palette can be saved to a named colormap for future use.
See @ref{colormap}.
@item
pm3d and image plots can specify a previously saved palette by name.
This permits the use of multiple palettes in a single plot command.
See @ref{palette}.
@item
Named palette colormaps can be manipulated as arrays of 32-bit ARGB
color values. This permits addition of alpha-channel values or other
modifications not easily specified in a @ref{palette} command.
@item
There is a new predefined color scheme @ref{viridis}.
@item
Palettes read from a file or datablock (`set palette file`) may be specified
either using fractional color components or 24-bit packed RGB values.
@end itemize
D named_palettes 4
D viridis 1


@node New_data_formats, New_built-in_functions_and_array_operations, Named_palettes, New_features_in_version_6
@subsection New data formats

@c ?new data_formats
@itemize @bullet
@item
The `sparse matrix=(cols,rows)` option to `plot` and `splot` generates
a uniform pixel grid into which individual pixel values may be loaded in
any order.  This is useful for plotting heat maps from incomplete data.
See `sparse`.
@item
During input of non-uniform matrix data, column(0) now returns the linear
ordering of matrix elements.  I.e. for element A[i,j] in an MxN matrix A,
column(0)/M gives the row index i, and column(0)%M gives the column index j.
@end itemize


@node New_built-in_functions_and_array_operations, Program_control_flow, New_data_formats, New_features_in_version_6
@subsection New built-in functions and array operations

@c ?new built-in functions
@itemize @bullet
@item
`palette(z)` returns the current RGB palette color mapping z into cbrange.
@item
`rgbcolor("name")` returns the 32bit ARGB value for a named color.
@item
`index( Array, element )` returns the first index `i` for which
Array[i] is equal to element. See @ref{arrays}.
@item
User-defined functions allow an array as a parameter.
@c ^<br>
Example: dot(A,B) = sum [i=1:|A|] A[i]*B[i]
@item
Array slices are generated by appending a range to the array name.
Array[n] is single element. Array[n:n+5] is a six element slice of
the original array. See @ref{arrays}, `slice`.
@item
`split("string", "separator")` unpacks the fields in a string into
an array of strings. See @ref{split}.
@item
`join(array, "separator")` is the complement to @ref{split}. It concatenates
the elements of a string array into a single string with field separators.
See @ref{join}.
@item
`stats <non-existent file>` yields a testable value. See `stats test`.
@item
`stats $vgrid` finds min/max/mean/stddev of voxels in grid
@end itemize


@node Program_control_flow, Multiplots, New_built-in_functions_and_array_operations, New_features_in_version_6
@subsection Program control flow

@c ?control flow
@itemize @bullet
@item
New syntax  `if ... else if ... else ...`
@item
XDG base directory conventions for configuration preferences are supported.
The program reads initial commands from $XDG_CONFIG_HOME/gnuplot/gnuplotrc.
Session command history is saved to $XDG_STATE_HOME/gnuplot_history.
If these files are not found, $HOME/.gnuplot and $HOME/.gnuplot_history
are used as in previous gnuplot versions.
@item
@ref{warnings} suppresses output of warning messages to stderr.
@item
`warn "message"` prints filename, line number and message to stderr.
@item
Exception handling for the "fit" command.  Control always returns to the
next line of input, even in the case of fit errors.  On return, FIT_ERROR is
non-zero if an error occurred. This allows scripted recovery from a bad fit.
See `fit error_recovery`.
@end itemize


@node Multiplots, New_terminals_and_terminal_options, Program_control_flow, New_features_in_version_6
@subsection Multiplots

@c ?new multiplots
Commands executed during initial creation of a multiplot are now stored in a
datablock $GPVAL_LAST_MULTIPLOT.  They can be replayed by the new command
@ref{remultiplot}.  Certain saved commands that would be problematic during replay
are not reexecuted.  Note that the regenerated multiplot may not exactly
match the original if graphics settings (axis ranges, logscale, etc)
have changed in the interim.

The following sequence of commands will save both the original graphics state
and the multiplot commands to a script file that can be reloaded later.

@example
     save "my_multiplot.gp"
     set multiplot
     ... various commands to generate the component plots ...
     unset multiplot
     set print "my_multiplot.gp" append
     print $GPVAL_LAST_MULTIPLOT
     unset print

@end example

@itemize @bullet
@item
The @ref{replot} command will check to see if the most recent plot command
was part of a completed multiplot.  If so, it will execute @ref{remultiplot}
instead of reexecuting that single plot command.
@item
EXPERIMENTAL. Replot requests generated by window events, mouse events,
or hot keys in a displayed multiplot will call @ref{remultiplot} if appropriate.
This means, for example, that you can now resize a multiplot displayed on
the screen. However the mouse coordinate readout and thus zoom/pan operations
are still based solely on the axis settings for the final component plot,
as was the case in earlier gnuplot versions.  Because the commands stored
in $GPVAL_LAST_MULTIPLOT may not be sufficient to recreate the appropriate
graphics settings for each component plot, mousing in a multiplot may not
act as you would like.  This will be improved in the future.
@end itemize


@node New_terminals_and_terminal_options, Watchpoints, Multiplots, New_features_in_version_6
@subsection New terminals and terminal options

@c ?new terminals
@itemize @bullet
@item
New terminals `kittygd` and `kittycairo` provide in-window graphics for
terminal emulators that support the kitty protocol.  Kitty is an alternative
to sixel graphics that offers full 24-bit RGB color. See `kittycairo`.
@item
New terminal `block` for text-mode pseudo-graphics uses Unicode
block or Braille characters to offer improved resolution compared
to the `dumb` or `caca` terminals.
@item
New terminal `webp` generates a single frame or an animation sequence
using webp encoding.  Frames are generated using pngcairo, then
encoded through the WebPAnimEncoder API exported by libwebp and libwebpmux.
@item
Terminals that use the same window for text entry and graphical display,
including `dumb`, `sixel`, `kitty`, and `block` now respond to keyboard
input during a `pause mouse` command. While paused, they interpret keystrokes
in the same way that a mousing terminal would. See `pseudo-mousing`.
For example the left/right/up/down arrow keys change the view angle of 3D
plots and perform incremental pan/zoom steps for 2D plots.
@end itemize


@node Watchpoints, Week-date_time_support, New_terminals_and_terminal_options, New_features_in_version_6
@subsection Watchpoints

@c ?new watchpoints
Watchpoints are target values associated with individual plots in a graph.
As that plot is drawn, each component line segment is monitored to see if
its endpoints bracket the target value of a watchpoint coordinate (x, y, or z)
or function f(x,y).  If a match is found, the [x,y] coordinates of the
match point are saved for later use. See @ref{watchpoints}.
Possible uses include
@itemize @bullet
@item
Find the intersection points of two curves
@item
Find zeros of a function
@item
Find and notate where a dependent variable (y or z) or function f(x,y)
crosses a threshold value
@item
Use the mouse to track values along multiple plots simultaneously
@end itemize
D watchpoints 2


@node Week-date_time_support, Other_new_features, Watchpoints, New_features_in_version_6
@subsection Week-date time support

@c ?new week-date time
The Covid-19 pandemic that began in 2020 generated increased interest in
plotting epidemiological data, which is often tabulated using a "week date"
reporting convention.  Deficiencies with gnuplot support for this convention
were remedied and the support for week-date time was extended.
@itemize @bullet
@item
Time specifier format %W has been brought into accord with the
ISO 8601 week date standard.
@item
Time specifier format %U has been brought into accord with the
CDC/MMWR week date standard.
@item
New function `tm_week(time, std)` returns ISO or CDC standard week of year.
@item
New function `weekdate_iso(year, week, day)` converts ISO standard week date
to calendar time.
@item
New function `weekdate_cdc(year, week, day)` converts CDC standard week date
to calendar time.
@end itemize
D epi_data 1


@node Other_new_features, Brief_summary_of_features_introduced_in_version_5, Week-date_time_support, New_features_in_version_6
@subsection Other new features

@c ?new other_features
@itemize @bullet
@item
`Time units for setting major and minor tics.`
Both major and minor tics along a time axis now accept tic intervals given
in units of minutes/hours/days/weeks/months/years.
See `set xtics`, `set mxtics time`.
@item
The character sequence $# in a `using` specifier evaluates to the total
number of columns available in the current line of data.  For example
`plot FOO using 0:(column($# - 1))` plots the last-but-one field of each row.
@item
keyword `binvalue=avg` plots the average, rather than the sum, of binned data.
@item
`set colorbox bottom` places a horizontal color box underneath the plot
rather than a vertical box on the right.
@item
Improved rendering of intersecting pm3d surfaces - overlapping surface tiles
are split into two pieces along the line of intersection so that tiles
from one surface do not incorrectly protrude though the other surface.
@item
User-controlled spotlight added to the pm3d lighting model.
See `set pm3d spotlight`.
@item
New options to force total key width and number of columns. See `key layout`.
@item
`set pm3d border retrace` draws a border around each pm3d quadrangle in the
same color as the filled area.  In principle this should have no visible
effect, but it prevents some display modes like glitchy pdf or postscript
viewers from introducing aliasing artifacts.
@item
@ref{isotropic} adjusts the axis scaling in both 2D and 3D plots such that
the x, y, and z axes all have the same scale.
@item
Change: Text rotation angle is not limited to integral degrees.
@item
Special (non-numerical) linetypes `lt nodraw`, `lt black`, `lt background`
See `special_linetypes`.
@item
Data-driven color assignments in histogram plots. See `histograms colors`.
@item
The position of the key box can be manually tweaked by specifying an
offset to be added to whatever position the program would otherwise use.
See `set key offset`.
@item
A keyentry with text but no plot style can be used to generate a secondary
title in the key spanning the entire width of the key.  For example
@example
    `plot A, keyentry "left-justified text" left, B`
@end example

This can also be used to create a key with two columns of text by
providing both a text string and a title. See `keyentry`.
@end itemize


@node Brief_summary_of_features_introduced_in_version_5,  , Other_new_features, New_features_in_version_6
@subsection Brief summary of features introduced in version 5

@c ?new version_5
@cindex version_5



@menu
* Features_introduced_in_5.4::
* Features_introduced_in_5.2::
* Features_introduced_in_5.0::
@end menu

@node Features_introduced_in_5.4, Features_introduced_in_5.2, Brief_summary_of_features_introduced_in_version_5, Brief_summary_of_features_introduced_in_version_5
@subsubsection Features introduced in 5.4

@c ?new version_5 version_5.4
@c ?version_5 version_5.4
@itemize @bullet
@item
Expressions and functions use 64-bit integer arithmetic. See `integer`
@item
2D plot styles @ref{polygons}, @ref{spiderplot}, `arrows`
@item
3D plot styles @ref{boxes}, @ref{circles},  @ref{polygons}, @ref{isosurface} and
other representations of gridded voxel data
@item
Data preprocessing filter `zsort`
@item
Construction of customized keys using `keyentry`
@item
New LaTeX terminal pict2e supersedes older terminals `latex`, `emtex`, `eepic`,
and `tpic`.  The older terminals are no longer built by default
@item
`set pixmap` imports a png/jpeg/gif image as a pixmap that can be scaled and
positioned anywhere in a plot or on the page
@item
Enhanced text mode accepts \U+xxxx (xxxx is a 4 or 5 character hexadecimal)
as representing a Unicode code point that is converted to the corresponding
UTF-8 byte sequence on output
@item
Revised syntax for @ref{parallelaxes} allows convenient iteration inside the
plot command, similar to plot styles `histogram` and @ref{spiderplot}
@end itemize


@node Features_introduced_in_5.2, Features_introduced_in_5.0, Features_introduced_in_5.4, Brief_summary_of_features_introduced_in_version_5
@subsubsection Features introduced in 5.2

@c ?new version_5 version_5.2
@c ?version_5 version_5.2
@itemize @bullet
@item
Nonlinear coordinate systems (see @ref{nonlinear})
@item
Automated binning of data (see `bins`)
@item
2D beeswarm plots. See @ref{jitter}
@item
3D plot style `zerrorfill`
@item
3D lighting model provides shading and specular highlighted (see @ref{lighting}).
@item
Array data type, associated commands and operators. See @ref{arrays}.
@item
New terminals `sixelgd`, `domterm`
@item
New format descriptors tH tM tS handle relative times (interval lengths).
See `time_specifiers`.
@end itemize


@node Features_introduced_in_5.0,  , Features_introduced_in_5.2, Brief_summary_of_features_introduced_in_version_5
@subsubsection Features introduced in 5.0

@c ?new version_5 version_5.0
@c ?version_5 version_5.0
@itemize @bullet
@item
Terminal independent dash types.
@item
The default sequence of colors used for successive elements in a plot is
more easily distinguished by users with color-vision defects.
@item
New plot types @ref{parallelaxes}, @ref{table}.
@item
Hypertext labels activated by a mouse-over event.
@item
Explicit sampling ranges in 2D and 3D function plots and pseudofiles
'+' and '++'.
@item
Plugin support through new command @ref{import} that attaches a user-defined
function name to a function provided by an external shared object.
@end itemize


@node Differences_between_versions_5_and_6, Demos_and_Online_Examples, New_features_in_version_6, Gnuplot
@section Differences between versions 5 and 6


Some changes introduced in version 5 could cause certain scripts written
for earlier versions of gnuplot to fail or to behave differently.
There are very few such changes in version 6.


@menu
* Plot_style_details::
* Deprecated_syntax::
@end menu

@node Plot_style_details, Deprecated_syntax, Differences_between_versions_5_and_6, Differences_between_versions_5_and_6
@subsection Plot style details

@cindex v6_changes

Apart from adding entirely new plot styles, version 6 also makes a few
tweaks to existing plot styles.
@itemize @bullet
@item
More terminals (png/jpeg/sixel/kitty) scale the size of a "dot" by the
current line width.  Some other terminals already did this.
@item
Plot styles that draw error bars place a gap at the position of the data
point.  The size of the gap is controlled by @ref{pointintervalbox}.
@item
Multiplots can now be redrawn or rescaled (see `new multiplots`).
Because of this it is no longer possible to read in-line data from
pseudofile '-'.  Use a data block instead.
@end itemize


@node Deprecated_syntax,  , Plot_style_details, Differences_between_versions_5_and_6
@subsection Deprecated syntax

@c ?deprecated syntax
Deprecated in version 5.4, removed in 6.0
@example
      # use of a file containing @ref{reread} to perform iteration
      N = 0;  load "file-containing-reread";
      file content:
          N = N+1
          plot func(N,x)
          pause -1
          if (N<5) reread
@end example

Current equivalent
@example
      do for [N=1:5] @{
          plot func(N, x)
          pause -1
      @}

@end example

Deprecated in version 5.4, removed in 6.0
@example
      set dgrid3d ,,foo     # no keyword to indicate meaning of foo
@end example

Current equivalent
@example
      set dgrid3d qnorm foo # (example only; qnorm is not the only option)

@end example

Deprecated in version 5.0, not present in 6.0 unless built with configuration
optione --enable-backward-compatibility
@example
      set style increment user
@end example

Current equivalent
@example
      use "set linetype" to redefine a convenient range of linetypes
      explicit use of "linestyle N" or "linestyle variable"

@end example

Deprecated in version 5.0, removed in 6.0
@example
      set clabel
@end example

Current equivalent
@example
      `set clabel "format"` is replaced by `set cntrlabel format "format"`.
      @ref{clabel} is replaced by `set cntrlabel onecolor`.

@end example

Deprecated in version 5.0, removed in 6.0
@example
      show palette fit2rgbformulae

@end example


@node Demos_and_Online_Examples, Batch/Interactive_Operation, Differences_between_versions_5_and_6, Gnuplot
@section Demos and Online Examples

@cindex demos

@c ?online examples
@cindex examples

The `gnuplot` distribution contains a collection of examples in the `demo`
directory. You can browse on-line versions of these examples produced by the
png, svg, and canvas terminals at
@uref{http://gnuplot.info/demos/,http://gnuplot.info/demos
}
The commands that produced each demo plot are shown next to the plot, and
the corresponding gnuplot script can be downloaded to serve as a model for
generating similar plots.


@node Batch/Interactive_Operation, Canvas_size, Demos_and_Online_Examples, Gnuplot
@section Batch/Interactive Operation

@cindex batch/interactive

`Gnuplot` may be executed in either batch or interactive modes, and the two
may even be mixed together.

Command-line arguments are assumed to be either program options or names
of files containing `gnuplot` commands.
Each file or command string will be executed in the order specified.
The special filename "-" is indicates that commands are to be read from stdin.
`Gnuplot` exits after the last file is processed.  If no load files and no
command strings are specified, `gnuplot` accepts interactive input from stdin.

@menu
* command_line_options::
* Examples::
@end menu

@node command_line_options, Examples, Batch/Interactive_Operation, Batch/Interactive_Operation
@subsection command line options

@cindex command-line-options

@c ?batch/interactive command-line-options
Gnuplot accepts the following options on the command line
@example
     -V, --version
     -h, --help
     -p, --persist
     -d, --default-settings
     -s, --slow
     -e  "command1; command2; ..."
     -c  scriptfile ARG1 ARG2 ...

@end example

-p tells the program not to close any remaining interactive plot windows
when the program exits.

-d tells the program not to execute any private or system initialization
(see `initialization`).

-s tells the program to wait for slow font initialization on startup.
Otherwise it prints an error and continues with bad font metrics.

-e "command" tells gnuplot to execute that single command before continuing.

-c is equivalent to -e "call scriptfile ARG1 ARG2 ...". See @ref{call}.

@node Examples,  , command_line_options, Batch/Interactive_Operation
@subsection Examples

@c ?batch/interactive examples
To launch an interactive session:
@example
      gnuplot

@end example

To execute two command files "input1" and "input2" in batch mode:
@example
      gnuplot input1 input2

@end example

To launch an interactive session after an initialization file "header" and
followed by another command file "trailer":
@example
      gnuplot header - trailer

@end example

To give `gnuplot` commands directly in the command line, using the "-persist"
option so that the plot remains on the screen afterwards:
@example
      gnuplot -persist -e "set title 'Sine curve'; plot sin(x)"

@end example

To set user-defined variables a and s prior to executing commands from a file:
@example
      gnuplot -e "a=2; s='file.png'" input.gpl

@end example

@node Canvas_size, Command-line-editing, Batch/Interactive_Operation, Gnuplot
@section Canvas size

@c ?canvas size
@cindex canvas

@c ?set term size

This documentation uses the term "canvas" to mean the full drawing area
available for positioning the plot and associated elements like labels,
titles, key, etc.  NB: For information about the HTML5 canvas terminal
see `set term canvas`.

`set term <terminal_type> size <XX>, <YY>` controls the size of the output
file, or "canvas". By default, the plot will fill this canvas.

`set size <XX>, <YY>` scales the plot itself relative to the size of the
canvas.  Scale values less than 1 will cause the plot to not fill the entire
canvas.  Scale values larger than 1 will cause only a portion of the plot to
fit on the canvas.  Please be aware that setting scale values larger than 1
may cause problems.

Example:

@example
      set size 0.5, 0.5
      set term png size 600, 400
      set output "figure.png"
      plot "data" with lines

@end example

These commands produce an output file "figure.png" that is 600 pixels wide
and 400 pixels tall. The plot will fill the lower left quarter of this canvas.

Note: In early versions of gnuplot some terminal types used @ref{size}
to control the size of the output canvas.  This was deprecated in version 4.


@node Command-line-editing, Comments, Canvas_size, Gnuplot
@section Command-line-editing

@cindex line-editing

@cindex editing

@cindex command-line-editing

Command-line editing and command history are supported using either an
external gnu readline library, an external BSD libedit library,  or a
built-in equivalent.  This choice is a configuration option at the time
gnuplot is built.

The editing commands of the built-in version are given below. Please note that
the action of the DEL key is system-dependent. The gnu readline and BSD libedit
libraries have their own documentation.


@example
      `Line-editing`:

@end example

@example
      ^B    moves back a single character.
      ^F    moves forward a single character.
      ^A    moves to the beginning of the line.
      ^E    moves to the end of the line.
      ^H    deletes the previous character.
      DEL   deletes the current character.
      ^D    deletes current character, sends EOF if the line is empty.
      ^K    deletes from current position to the end of line.
      ^L    redraws line in case it gets trashed.
      ^U    deletes the entire line.
      ^W    deletes previous word.
      ^V    inhibits the interpretation of the following key as editing command.
      TAB   performs filename-completion.

@end example

@example
      `History`:

@end example

@example
      ^P    moves back through history.
      ^N    moves forward through history.
      ^R    starts a backward-search.

@end example



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Character</th>    <th>Function</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td></td>                <th>Line Editing</th></tr>
@c ^<tr>    <td><tt>^B</tt></td>    <td>move back a single character.</td></tr>
@c ^<tr>    <td><tt>^F</tt></td>    <td>move forward a single character.</td></tr>
@c ^<tr>    <td><tt>^A</tt></td>    <td>move to the beginning of the line.</td></tr>
@c ^<tr>    <td><tt>^E</tt></td>    <td>move to the end of the line.</td></tr>
@c ^<tr>    <td><tt>^H</tt></td>    <td>delete the previous character.</td></tr>
@c ^<tr>    <td><tt>DEL</tt></td>    <td>delete the current character.</td></tr>
@c ^<tr>    <td><tt>^D</tt></td>    <td>delete current character. EOF if line is empty</td></tr>
@c ^<tr>    <td><tt>^K</tt></td>    <td>delete from current position to the end of line.</td></tr>
@c ^<tr>    <td><tt>^L</tt></td>    <td>redraw line in case it gets trashed.</td></tr>
@c ^<tr>    <td><tt>^U</tt></td>    <td>delete the entire line.</td></tr>
@c ^<tr>    <td><tt>^W</tt></td>    <td>delete previous word.</td></tr>
@c ^<tr>    <td><tt>^V</tt></td>    <td>inhibits the interpretation of the following key as editing command.</td></tr>
@c ^<tr>    <td><tt>TAB</tt></td>    <td>performs filename-completion.</td></tr>
@c ^</tbody>
@c ^<tbody>
@c ^<tr>    <th></th>                <th>History</th></tr>
@c ^<tr>    <td><tt>^P</tt></td>    <td>move back through history.</td></tr>
@c ^<tr>    <td><tt>^N</tt></td>    <td>move forward through history.</td></tr>
@c ^<tr>    <td><tt>^R</tt></td>    <td>starts a backward-search.</td></tr>
@c ^</tbody>
@c ^</table>

@node Comments, Coordinates, Command-line-editing, Gnuplot
@section Comments

@cindex comments

The comment character `#` may appear almost anywhere in a command line, and
`gnuplot` will ignore the rest of that line. A `#` does not have this effect
inside a quoted string. Note that if a commented line ends in '\' then the
subsequent line is also treated as part of the comment.

See also `set datafile commentschars` for specifying a comment character for
data files.

@node Coordinates, Datastrings, Comments, Gnuplot
@section Coordinates

@cindex coordinates

@cindex axes

The commands `set arrow`, `set key`, `set label` and @ref{object} allow you
to draw something at an arbitrary position on the graph.  This position is
specified by the syntax:

@example
      @{<system>@} <x>, @{<system>@} <y> @{,@{<system>@} <z>@}

@end example

Each <system> can either be `first`, `second`, `polar`, `graph`, `screen`, or
`character`.

`first` places the x, y, or z coordinate in the system defined by the left
and bottom axes; `second` places it in the system defined by the x2,y2 axes
(top and right); `graph` specifies the area within the axes---0,0 is bottom
left and 1,1 is top right (for splot, 0,0,0 is bottom left of plotting area;
use negative z to get to the base---see @ref{xyplane}); `screen`
specifies the screen area (the entire area---not just the portion selected by
@ref{size}), with 0,0 at bottom left and 1,1 at top right. `character`
coordinates are used primarily for offsets, not absolute positions.
The `character` vertical and horizontal size depend on the current font.

`polar` causes the first two values to be interpreted as angle theta and radius
r rather than as x and y.  This could be used, for example, to place labels on
a 2D plot in polar coordinates or a 3D plot in cylindrical coordinates.

If the coordinate system for x is not specified, `first` is used.  If the
system for y is not specified, the one used for x is adopted.

In some cases, the given coordinate is not an absolute position but a
relative value (e.g., the second position in `set arrow` ... `rto`).  In
most cases, the given value serves as difference to the first position.
If the given coordinate belongs to a log-scaled axis, a relative value is
interpreted as multiplier. For example,

@example
      set logscale x
      set arrow 100,5 rto 10,2

@end example

plots an arrow from position 100,5 to position 1000,7 since the x axis is
logarithmic while the y axis is linear.

If one (or more) axis is timeseries, the appropriate coordinate should
be given as a quoted time string according to the @ref{timefmt} format string.
See @ref{xdata} and @ref{timefmt}.  `Gnuplot` will also accept an integer
expression, which will be interpreted as seconds relative to 1 January 1970.

@node Datastrings, Enhanced_text_mode, Coordinates, Gnuplot
@section Datastrings

@cindex datastrings

Data files may contain string data consisting of either an arbitrary string
of printable characters containing no whitespace or an arbitrary string of
characters, possibly including whitespace, delimited by double quotes.
The following line from a datafile is interpreted to contain four
columns, with a text field in column 3:

@example
  1.000 2.000 "Third column is all of this text" 4.00

@end example

Text fields can be positioned within a 2-D or 3-D plot using the commands:

@example
  plot 'datafile' using 1:2:4 with labels
  splot 'datafile' using 1:2:3:4 with labels

@end example

A column of text data can also be used to label the ticmarks along one or more
of the plot axes. The example below plots a line through a series of points
with (X,Y) coordinates taken from columns 3 and 4 of the input datafile.
However, rather than generating regularly spaced tics along the x axis
labeled numerically, gnuplot will position a tic mark along the x axis at the
X coordinate of each point and label the tic mark with text taken from column
1 of the input datafile.

@example
  set xtics
  plot 'datafile' using 3:4:xticlabels(1) with linespoints

@end example

@cindex columnheader

There is also an option that will interpret the first entry in a column of
input data (i.e. the column heading) as a text field, and use it as the key
title for data plotted from that column. The example given below will use the
first entry in column 2 to generate a title in the key box, while processing
the remainder of columns 2 and 4 to draw the required line:

@example
  plot 'datafile' using 1:(f($2)/$4) with lines title columnhead(2)

@end example

Another example:

@example
  plot for [i=2:6] 'datafile' using i title "Results for ".columnhead(i)

@end example

This use of column headings is automated by @ref{columnheaders} or
`set key autotitle columnhead`.
See @ref{labels}, `using xticlabels`, @ref{title}, `using`, `key autotitle`.

@node Enhanced_text_mode, Environment, Datastrings, Gnuplot
@section Enhanced text mode

@c ?enhanced text
@cindex enhanced

@cindex text_markup

@cindex markup

@cindex bold

@cindex italic

Many terminal types support an enhanced text mode in which additional
formatting information can be embedded in the text string.  For example, "x^2"
will write x-squared as we are used to seeing it, with a superscript 2.
This mode is selected by default when you set the terminal, but may be
toggled afterward using "set termoption [no]enhanced", or disabled for
individual strings as in `set label "x_2" noenhanced`.

Note:  For output to TeX-based terminals (e.g. cairolatex, pict2e, pslatex,
tikz) all text strings should instead use TeX/LaTeX syntax. See `latex`.



@example
 Control      Examples        Explanation
  ^           a^x             superscript
  _           a_x             subscript
  @@           @@x or a@@^b_@{cd@} phantom box (occupies no width)
  &           &@{space@}        inserts space of specified length
  ~           ~a@{.8-@}         overprints '-' on 'a', raised by .8
                              times the current fontsize
  @{/Times abc@}                print abc in font Times at current size
  @{/Times*2 abc@}              print abc in font Times at twice current size
  @{/Times:Italic abc@}         print abc in font Times with style italic
  @{/Arial:Bold=20 abc@}        print abc in boldface Arial font size 20
  \U+         \U+221E         Unicode point U+221E (INFINITY)

@end example


@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Control</th>    <th>Examples</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt> ^ </tt></td>    <td><tt>a^x</tt></td>            <td>superscript</td></tr>
@c ^<tr>    <td><tt> _ </tt></td>    <td><tt>a_x</tt></td>            <td>subscript</td></tr>
@c ^<tr>    <td><tt> @@ </tt></td>    <td><tt> @@x</tt> or <tt>a@@^b_@{cd@}</tt></td>    <td>phantom box (occupies no width)</td></tr>
@c ^<tr>    <td><tt> &amp;</tt></td>    <td><tt> &amp;@{space@}</tt></td>    <td>inserts space of specified length</td></tr>
@c ^<tr>    <td><tt> ~ </tt></td>    <td><tt> ~a@{.8-@}</tt></td>        <td>overprints '-' on 'a', raised by .8<br>times the current fontsize</td></tr>
@c ^</tbody>
@c ^</table>

The markup control characters act on the following single character or
bracketed clause. The bracketed clause may contain a string of characters with
no additional markup, e.g. 2^@{10@}, or it may contain additional markup that
changes font properties.  Font specifiers MUST be preceded by a '/' character
that immediately follows the opening '@{'.  If a font name contains spaces it
must be enclosed in single or double quotes.

Examples: The first example illustrates nesting one bracketed clause inside
another to produce a boldface A with an italic subscript i, all in the current
font.  If the clause introduced by :Normal were omitted the subscript would be
both italic and boldface.  The second example illustrates the same markup
applied to font "Times New Roman" at 20 point size.
@example
     @{/:Bold A_@{/:Normal@{/:Italic i@}@}@}
     @{/"Times New Roman":Bold=20 A_@{/:Normal@{/:Italic i@}@}@}

@end example

The phantom box is useful for a@@^b_c to align superscripts and subscripts
but does not work well for overwriting a diacritical mark on a letter.
For that purpose it is much better to use an encoding (e.g. utf8) that contains
letters with accents or other diacritical marks.  See @ref{encoding}.
Since the box is non-spacing, it is sensible to put the shorter of the subscript
or superscript in the box (that is, after the @@).

Space equal in length to a string can be inserted using the '&' character.
Thus
@example
        'abc&@{def@}ghi'
@end example

would produce
@example
        'abc   ghi'.

@end example

The '~' character causes the next character or bracketed text to be
overprinted by the following character or bracketed text.  The second text
will be horizontally centered on the first.  Thus '~a/' will result in an 'a'
with a slash through it.  You can also shift the second text vertically by
preceding the second text with a number, which will define the fraction of the
current fontsize by which the text will be raised or lowered.  In this case
the number and text must be enclosed in brackets because more than one
character is necessary.  If the overprinted text begins with a number, put a
space between the vertical offset and the text ('~@{abc@}@{.5 000@}'); otherwise
no space is needed ('~@{abc@}@{.5---@}').  You can change the font for one or
both strings ('~a@{.5 /*.2 o@}'---an 'a' with a one-fifth-size 'o' on top---and
the space between the number and the slash is necessary), but you can't
change it after the beginning of the string.  Neither can you use any other
special syntax within either string.  Control characters must be escaped,
e.g. '~a@{.8\^@}' to print â.  See `escape sequences` below.

Note that strings in double-quotes are parsed differently than those enclosed
in single-quotes.  The major difference is that backslashes may need to be
doubled when in double-quoted strings.

The file "ps_guide.ps" in the /docs/psdoc subdirectory of the gnuplot source
distribution contains more examples of the enhanced syntax, as does the demo
@uref{http://www.gnuplot.info/demo/enhanced_utf8.html,`enhanced_utf8.dem`
}


@menu
* escape_sequences::
@end menu

@node escape_sequences,  , Enhanced_text_mode, Enhanced_text_mode
@subsection escape sequences

@c ?escape sequences
@c ?enhanced text escape sequences
@cindex unicode

The backslash character \ is used to escape single byte character codes or
Unicode entry points.

The form \ooo (where ooo is a 3 character octal value) can be used to index a
known character code in a specific font encoding.  For example the Adobe Symbol
font uses a custom encoding in which octal 245 represents the infinity symbol.
You could embed this in an enhanced text string by giving the font name and the
character code "@{/Symbol \245@}".  This is mostly useful for the PostScript
terminal, which cannot easily handle UTF-8 encoding.

You can specify a character by its Unicode code point as \U+hhhh, where hhhh
is the 4 or 5 character hexadecimal code point. For example the code point for
the infinity symbol ∞ is \U+221E.  This will be converted to a UTF-8 byte
sequence on output if appropriate.  In a UTF-8 environment this mechanism
is not needed for printable special characters since they are handled in a
text string like any other character. However it is useful for combining forms
or supplemental diacritical marks (e.g. an arrow over a letter to represent
a vector).  See @ref{encoding}, `utf8`, and the
@uref{http://www.gnuplot.info/demo_5.4/unicode.html,online unicode demo.
}


@node Environment, Expressions, Enhanced_text_mode, Gnuplot
@section Environment

@cindex environment

A number of shell environment variables are understood by `gnuplot`.
None of these are required.

GNUTERM, if defined, is passed to "set term" on start-up.
This can be overridden by a system or personal initialization file
(see `startup`) and of course by later explicit `set term` commands.
Terminal options may be included.  E.g.
@example
     bash$ export GNUTERM="postscript eps color size 5in, 3in"

@end example

GNUHELP, if defined, sets the pathname of the HELP file (gnuplot.gih).

Initialization at start-up may search for configuration files $HOME/.gnuplot,
and $XDG_CONFIG_HOME/gnuplot/gnuplotrc.
On MS-DOS, Windows and OS/2, files in GNUPLOT or USERPROFILE are searched.
For more details see `startup`.

On Unix, PAGER is used as an output filter for help messages.

On Unix, SHELL is used for the @ref{shell} command.  On MS-DOS and OS/2, COMSPEC
is used.

FIT_SCRIPT may be used to specify a `gnuplot` command to be executed when a
fit is interrupted---see @ref{fit}.  FIT_LOG specifies the default filename of the
logfile maintained by fit.

GNUPLOT_LIB may be used to define additional search directories for data
and command files. The variable may contain a single directory name, or
a list of directories separated by a platform-specific path separator,
eg. ':' on Unix, or ';' on DOS/Windows/OS/2 platforms. The contents
of GNUPLOT_LIB are appended to the @ref{loadpath} variable, but not saved
with the @ref{save} and `save set` commands.

Several gnuplot terminal drivers access TrueType fonts via the gd library
(see `fonts`). For these terminals GDFONTPATH and GNUPLOT_DEFAULT_GDFONT
may affect font selection.

The postscript terminal uses its own font search path. It is controlled by
the environmental variable GNUPLOT_FONTPATH.

GNUPLOT_PS_DIR is used by the postscript driver to search for external
prologue files. Depending on the build process, gnuplot contains either a
built-in copy of those files or a default hardcoded path. You can use this
variable to have the postscript terminal use custom prologue files rather
than the default prologue files. See `postscript prologue`.

@node Expressions, Fonts, Environment, Gnuplot
@section Expressions

@cindex expressions

@cindex division

In general, any mathematical expression accepted by C, FORTRAN, Pascal, or
BASIC is valid.  The precedence of these operators is determined by the
specifications of the C programming language.  White space (spaces and tabs)
is ignored inside expressions.

Note that gnuplot uses both "real" and "integer" arithmetic, like FORTRAN and
C.  Integers are entered as "1", "-10", etc; reals as "1.0", "-10.0", "1e1",
3.5e-1, etc.  The most important difference between the two forms is in
division: division of integers truncates: 5/2 = 2; division of reals does
not: 5.0/2.0 = 2.5.  In mixed expressions, integers are "promoted" to reals
before evaluation: 5/2e0 = 2.5.  The result of division of a negative integer
by a positive one may vary among compilers.  Try a test like "print -5/2" to
determine if your system always rounds down (-5/2 yields -3) or always rounds
toward zero (-5/2 yields -2).

The integer expression "1/0" may be used to generate an "undefined" flag,
which causes a point to be ignored.  Or you can use the pre-defined variable
NaN to achieve the same result.  See `using` for an example.
@cindex NaN


Gnuplot can also perform simple operations on strings and string variables.
For example, the expression ("A" . "B" eq "AB") evaluates as true, illustrating
the string concatenation operator and the string equality operator.

A string which contains a numerical value is promoted to the corresponding
integer or real value if used in a numerical expression. Thus ("3" + "4" == 7)
and (6.78 == "6.78") both evaluate to true.  An integer, but not a real or
complex value, is promoted to a string if used in string concatenation.
A typical case is the use of integers to construct file names or other strings;
e.g. ("file" . 4 eq "file4") is true.

Substrings can be specified using a postfixed range descriptor [beg:end].
For example, "ABCDEF"[3:4] == "CD"   and   "ABCDEF"[4:*] == "DEF"
The syntax "string"[beg:end] is exactly equivalent to calling the built-in
string-valued function substr("string",beg,end), except that you cannot
omit either beg or end from the function call.

@menu
* Complex_values::
* Constants::
* Functions::
* operators::
* summation::
* Gnuplot-defined_variables::
* User-defined_variables_and_functions::
* arrays::
@end menu

@node Complex_values, Constants, Expressions, Expressions
@subsection Complex values

@c ?complex values
@cindex complex

Arithmetic operations and most built-in functions support the use of complex
arguments.  Complex constants are expressed as @{<real>,<imag>@}, where <real>
and <imag> must be numerical constants.  Thus @{0,1@} represents 'i'.
The program predefines a variable I = @{0,1@} on entry that can be used to
generate complex values in terms of other variables.
Thus `x + y*I` is a valid expression but `@{x,y@}` is not.
The real and imaginary components of complex value z can be extracted as
real(z) and imag(z). The modulus is given by abs(z).
The phase angle is given by arg(z).

Gnuplot's 2D and 3D plot styles expect real values; to plot a complex-valued
function f(z) with non-zero imaginary components you must plot the real or
imaginary component, or the modulus or phase.
For example to represent the modulus and phase of a function f(z) with
complex argument and complex result it is possible to use the height of the
surface to represent modulus and use the color to represent the phase.
It is convenient to use a color palette in HSV space with component H (hue),
running from 0 to 1, mapped to the range of the phase returned by arg(z),
[-π:π], so that the color wraps when the phase angle does.  By default this
would be at H = 0 (red).  You can change this with the `start` keyword in
@ref{palette} so that some other value of H is mapped to 0.
The example shown starts and wraps at H = 0.3 (green).
See @ref{defined}, @ref{arg}, @ref{angles}.

@example
     set palette model HSV start 0.3 defined (0 0 1 1, 1 1 1 1)
     set cbrange [-pi:pi]
     set cbtics ("-π" -pi, "π" pi)
     set pm3d corners2color c1
     E0(z) = exp(-z)/z
     I = @{0,1@}
     splot '++' using 1:2:(abs(E0(x+I*y))):(arg(E0(x+I*y))) with pm3d

@end example


@node Constants, Functions, Complex_values, Expressions
@subsection Constants

@cindex constants

@c ?expressions constants
@cindex octal

@cindex hexadecimal

@c ?complex constants
Integer constants are interpreted via the C library routine strtoll().
This means that constants beginning with "0" are interpreted as octal,
and constants beginning with "0x" or "0X" are interpreted as hexadecimal.

Floating point constants are interpreted via the C library routine atof().

Complex constants are expressed as @{<real>,<imag>@}, where <real> and <imag>
must be numerical constants.  For example, @{0,1@} represents 'i' itself;
@{3,2@} represents 3 + 2i.  The curly braces are explicitly required here.
The program predefines a variable I = @{0,1@} on entry that can be used to
avoid typing the explicit form.  For example `3 + 2*I` is the same as `@{3,2@}`,
with the advantage that it can be used with variable coefficient for the
imaginary component.  Thus `x + y*I` is a valid expression but `@{x,y@}` is not.

String constants consist of any sequence of characters enclosed either in
single quotes or double quotes. The distinction between single and double
quotes is important.  See `quotes`.

Examples:
@example
     1 -10 0xffaabb        # integer constants
     1.0 -10. 1e1 3.5e-1   # floating point constants
     @{1.2, -3.4@}           # complex constant
     "Line 1\nLine 2"      # string constant (\n is expanded to newline)
     '123\na\456'          # string constant (\ and n are ordinary characters)

@end example


@node Functions, operators, Constants, Expressions
@subsection Functions

@c ?expressions functions
Arguments to math functions in `gnuplot` can be integer, real, or complex
unless otherwise noted.  Functions that accept or return angles (e.g. sin(x))
treat angle values as radians, but this may be changed to degrees using the
command @ref{angles}.

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3" width="90%">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>   <th colspan="3"> Math library and built-in functions </th></tr>
@c ^<tr>    <th>Function</th>    <th>Arguments</th>    <th>Returns</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>abs(x)</td>    <td>int or real</td>    <td>|<i>x</i>|, absolute value of <i>x</i>; same type</td></tr>
@c ^<tr>    <td>abs(x)</td>    <td>complex</td>    <td>length of <i>x</i>, &radic;( Re(<i>x</i>)<sup>2</sup> + Im(<i>x</i>)<sup>2</sup> )</td></tr>
@c ^<tr>    <td>acos(x)</td>    <td>any</td>    <td>cos<sup>-1</sup> <i>x</i> (inverse cosine)</td></tr>
@c ^<tr>    <td>acosh(x)</td>    <td>any</td>    <td>cosh<sup>-1</sup> <i>x</i> (inverse hyperbolic cosine) </td></tr>
@c ^<tr>    <td>airy(x)</td>    <td>real</td>    <td>Airy function Ai(<i>x</i>) for real x</td></tr>
@c ^<tr>    <td>arg(x)</td>    <td>complex</td>    <td>the phase of <i>x</i></td></tr>
@c ^<tr>    <td>asin(x)</td>    <td>any</td>    <td>sin<sup>-1</sup> <i>x</i> (inverse sin)</td></tr>
@c ^<tr>    <td>asinh(x)</td>    <td>any</td>    <td>sinh<sup>-1</sup> <i>x</i> (inverse hyperbolic sin) </td></tr>
@c ^<tr>    <td>atan(x)</td>    <td>any</td>    <td>tan<sup>-1</sup> <i>x</i> (inverse tangent)</td></tr>
@c ^<tr>    <td>atan2(y,x)</td>    <td>int or real</td>    <td>tan<sup>-1</sup>(<i>y/x</i>) (inverse tangent)</td></tr>
@c ^<tr>    <td>atanh(x)</td>    <td>any</td>    <td>tanh<sup>-1</sup> <i>x</i> (inverse hyperbolic tangent) </td></tr>
@c ^<tr>    <td>besj0(x)</td>    <td>real</td>    <td><i>J</i><sub>0</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besj1(x)</td>    <td>real</td>    <td><i>J</i><sub>1</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besjn(n,x)</td>    <td>int,real</td>    <td><i>J</i><sub>n</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besy0(x)</td>    <td>real</td>    <td><i>Y</i><sub>0</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besy1(x)</td>    <td>real</td>    <td><i>Y</i><sub>1</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besyn(n,x)</td>   <td>int,real</td>    <td><i>Y</i><sub>n</sub> Bessel function of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besi0(x)</td>   <td>real</td>    <td>Modified Bessel function of order 0, <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besi1(x)</td>   <td>real</td>    <td>Modified Bessel function of order 1, <i>x</i> in radians</td></tr>
@c ^<tr>    <td>besin(n,x)</td>   <td>int,real</td><td>Modified Bessel function of order n, <i>x</i> in radians</td></tr>
@c ^<tr>    <td>cbrt(x)</td>    <td>real</td>    <td>cube root of x, domain and range both real </td></tr>
@c ^<tr>    <td>ceil(x)</td>    <td>any</td>    <td>&lceil;<i>x</i>&rceil;, smallest integer not less than <i>x</i> (real part)</td></tr>
@c ^<tr>    <td>conj(x)</td>    <td>complex</td>    <td>complex conjugate of <i>x</i></td></tr>
@c ^<tr>    <td>cos(x)</td>    <td>radians</td>    <td>cos <i>x</i>, cosine of <i>x</i></td></tr>
@c ^<tr>    <td>cosh(x)</td>    <td>any</td>    <td>cosh <i>x</i>, hyperbolic cosine of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>EllipticK(k)</td>    <td>real k in (-1:1)</td>    <td><i>K(k)</i> complete elliptic integral of the first kind</td></tr>
@c ^<tr>    <td>EllipticE(k)</td>    <td>real k in [-1:1]</td>    <td><i>E(k)</i> complete elliptic integral of the second kind</td></tr>
@c ^<tr>    <td>EllipticPi(n,k)</td>    <td> real n&lt;1, real k in (-1:1)</td>    <td> &Pi;(<i>n,k</i>) complete elliptic integral of the third kind</td></tr>
@c ^<tr>    <td>erf(x)</td>    <td>any</td>    <td>erf(Re(<i>x</i>)), error function of real(<i>x</i>)</td></tr>
@c ^<tr>    <td>erfc(x)</td>    <td>any</td>    <td>erfc(Re(<i>x</i>)), 1.0 - error function of real(<i>x</i>)</td></tr>
@c ^<tr>    <td>exp(x)</td>    <td>any</td>    <td><i>e<sup>x</sup></i>, exponential function of <i>x</i></td></tr>
@c ^<tr>    <td>expint(n,x)</td>    <td>any</td>    <td><i>E<sub>n</sub></i>(<i>x</i>), exponential integral function of <i>x</i></td></tr>
@c ^<tr>    <td>floor(x)</td>    <td>any</td>    <td>&lfloor;<i>x</i>&rfloor;, largest integer not greater than <i>x</i> (real part)</td></tr>
@c ^<tr>    <td>gamma(x)</td>    <td>any</td>    <td>&Gamma;(Re(<i>x</i>)), gamma function of real(<i>x</i>)</td></tr>
@c ^<tr>    <td>ibeta(p,q,x)</td>    <td>any</td>    <td>ibeta(Re(<i>p,q,x</i>)), ibeta function of real(<i>p</i>,<i>q</i>,<i>x</i>)</td></tr>
@c ^<tr>    <td>inverf(x)</td>    <td>any</td>    <td>inverse error function real(<i>x</i>)</td></tr>
@c ^<tr>    <td>igamma(a,z)</td>    <td>complex</td>    <td>igamma(<i>a&gt;0,z</i>), igamma function of complex <a>a>0</a>,<i>z</i></td></tr>
@c ^<tr>    <td>imag(x)</td>    <td>complex</td>    <td>Im(<i>x</i>), imaginary part of <i>x</i> as a real number</td></tr>
@c ^<tr>    <td>int(x)</td>    <td>real</td>    <td>integer part of <i>x</i>, truncated toward zero</td></tr>
@c ^<tr>    <td>invibeta(a,b,p)</td>    <td>0&lt;p&lt;1</td>    <td>inverse incomplete beta function</td></tr>
@c ^<tr>    <td>invigamma(a,p)</td>    <td>0&lt;p&lt;1</td>    <td>inverse incomplete gamma function</td></tr>
@c ^<tr>    <td>invnorm(x)</td>    <td>any</td>    <td>inverse normal distribution function real(<i>x</i>)</td></tr>
@c ^<tr>    <td>LambertW(z,k)</td> <td>complex, int</td> <td>kth branch of complex Lambert W function</td></tr>
@c ^<tr>    <td>lambertw(x)</td>    <td>real</td>    <td>principal branch (k=0) of Lambert <i>W</i> function</td></tr>
@c ^<tr>    <td>lgamma(x)</td>    <td>real</td>    <td>lgamma(Re(<i>x</i>)), lgamma function of real(<i>x</i>)</td></tr>
@c ^<tr>    <td>lnGamma(x)</td>    <td>complex</td>    <td>lnGamma(x) valid over entire complex plane</td></tr>
@c ^<tr>    <td>log(x)</td>    <td>any</td>    <td>ln <i>x</i>, natural logarithm (base <i>e</i>) of <i>x</i></td></tr>
@c ^<tr>    <td>log10(x)</td>    <td>any</td>    <td>log<sub>10</sub> <i>x</i>, logarithm (base 10) of <i>x</i></td></tr>
@c ^<tr>    <td>norm(x)</td>    <td>any</td>    <td>norm(<i>x</i>), normal distribution function of real(<i>x</i>)</td></tr>
@c ^<tr>    <td>rand(x)</td>    <td>int</td>    <td>pseudo random number in the interval (0:1)</td></tr>
@c ^<tr>    <td>real(x)</td>    <td>any</td>    <td>Re(<i>x</i>), real part of <i>x</i></td></tr>
@c ^<tr>    <td>sgn(x)</td>    <td>any</td>    <td>1 if <i>x</i> &gt; 0,  -1 if <i>x</i> &lt; 0,  0 if <i>x</i> = 0. &image;(<i>x</i>) ignored</td></tr>
@c ^<tr>    <td>Sign(x)</td>    <td>complex</td>    <td> 0 if <i>x</i> = 0, otherwise <i>x</i>/|<i>x</i>|</td></tr>
@c ^<tr>    <td>sin(x)</td>    <td>any</td>    <td>sin <i>x</i>, sine of <i>x</i></td></tr>
@c ^<tr>    <td>sinh(x)</td>    <td>any</td>    <td>sinh <i>x</i>, hyperbolic sine of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>sqrt(x)</td>    <td>any</td>    <td>&radic;<i>x</i>, square root of <i>x</i></td></tr>
@c ^<tr>    <td>SynchrotronF(x)</td> <td>real</td> <td> Synchtrotron function F</td></tr>
@c ^<tr>    <td>tan(x)</td>    <td>any</td>    <td>tan <i>x</i>, tangent of <i>x</i></td></tr>
@c ^<tr>    <td>tanh(x)</td>    <td>any</td>    <td>tanh <i>x</i>, hyperbolic tangent of <i>x</i> in radians</td></tr>
@c ^<tr>    <td>uigamma(a,x)</td>    <td>real</td>    <td>uigamma(<i>a,x</i>), upper incomplete gamma function <a>a>0</a>,<i>x</i></td></tr>
@c ^<tr>    <td>voigt(x,y)</td>    <td>real</td>    <td>convolution of Gaussian and Lorentzian</td></tr>
@c ^<tr>    <td>zeta(s)</td>    <td>any</td>    <td>Riemann zeta function </td></tr>
@c ^</tbody>
@c ^</table>

@c ^<p>&nbsp;</p>

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3" width="90%">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>   <th colspan="3">Special functions from libcerf (only if available)</th></tr>
@c ^<tr>    <th>Function</th>    <th>Arguments</th>    <th>Returns</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>cerf(z)</td>    <td>complex</td>    <td>complex error function</td></tr>
@c ^<tr>    <td>cdawson(z)</td>    <td>complex</td>    <td>complex Dawson's integral</td></tr>
@c ^<tr>    <td>faddeeva(z)</td>    <td>complex</td>    <td>rescaled complex error function <i>w</i>(<i>z</i>) = exp(-<i>z</i>²) × erfc(-i<i>z</i>)</td></tr>
@c ^<tr>    <td>erfi(x)</td>    <td>real</td>    <td>imaginary error function erfi(<i>x</i>) = -i × erf(i<i>x</i>)</td></tr>
@c ^<tr>    <td>FresnelC(x)</td>    <td>real</td>    <td> cosine (real) component of Fresnel integral </td></tr>
@c ^<tr>    <td>FresnelS(x)</td>    <td>real</td>    <td> sine (imaginary) component of Fresnel integral </td></tr>
@c ^<tr>    <td>VP(x,sigma,gamma)</td>    <td>real</td>    <td>Voigt profile</td></tr>
@c ^<tr>    <td>VP_fwhm(sigma,gamma)</td>    <td>real</td>    <td>Voigt profile full width at half max</td></tr>

@c ^</tbody>
@c ^</table>

@c ^<p>&nbsp;</p>

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3" width="90%">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>   <th colspan="3"> String functions </th></tr>
@c ^<tr>    <th>Function</th>    <th>Arguments</th>    <th>Returns</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>gprintf("format",x,...)</td>    <td>any</td>    <td>string result from applying gnuplot's format parser</td></tr>
@c ^<tr>    <td>sprintf("format",x,...)</td>    <td>multiple</td>    <td>string result from C-language sprintf</td></tr>
@c ^<tr>    <td>strlen("string")</td>    <td>string</td>    <td>number of characters in string</td></tr>
@c ^<tr>    <td>strstrt("string","key")</td>    <td>strings</td>    <td>int index of first character of substring "key"</td></tr>
@c ^<tr>    <td>substr("string",beg,end)</td>    <td>multiple</td>    <td>string "string"[beg:end]</td></tr>
@c ^<tr>    <td>split("string","separator")</td>    <td>string</td>    <td>array containing individual fields of original string</td></tr>
@c ^<tr>    <td>join(array,"separator")</td>    <td>array,string</td>    <td>concatenates array elements into a string</td></tr>
@c ^<tr>    <td>strftime("timeformat",t)</td>    <td>any</td>    <td>string result from applying gnuplot's time parser</td></tr>
@c ^<tr>    <td>strptime("timeformat",s)</td>    <td>string</td>    <td>seconds since year 1970 as given in string s</td></tr>
@c ^<tr>    <td>system("command")</td>    <td>string</td>    <td>string containing output stream of shell command</td></tr>
@c ^<tr>    <td>trim(" string ")</td>    <td>string</td>    <td>string without leading or trailing whitespace</td></tr>
@c ^<tr>    <td>word("string",n)</td>    <td>string, int</td>    <td>returns the nth word in "string"</td></tr>
@c ^<tr>    <td>words("string")</td>    <td>string</td>    <td>returns the number of words in "string"</td></tr>
@c ^</tbody>
@c ^</table>

@c ^<p>&nbsp;</p>

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3" width="90%">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>   <th colspan="3"> time functions </th></tr>
@c ^<tr>    <th>Function</th>    <th>Arguments</th>    <th>Returns</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>time(x)</td>    <td>any</td>    <td>the current system time</td></tr>
@c ^<tr>    <td>timecolumn(N,format)</td>    <td>int, string</td>    <td> formatted time data from column <i>N</i> of input data</td></tr>
@c ^<tr>    <td>tm_hour(t)</td>    <td>time in sec</td>    <td>the hour</td></tr>
@c ^<tr>    <td>tm_mday(t)</td>    <td>time in sec</td>    <td>the day of the month</td></tr>
@c ^<tr>    <td>tm_min(t)</td>    <td>time in sec</td>    <td>the minute</td></tr>
@c ^<tr>    <td>tm_mon(t)</td>    <td>time in sec</td>    <td>the month</td></tr>
@c ^<tr>    <td>tm_sec(t)</td>    <td>time in sec</td>    <td>the second</td></tr>
@c ^<tr>    <td>tm_wday(t)</td>    <td>time in sec</td>    <td>the day of the week</td></tr>
@c ^<tr>    <td>tm_week(t)</td>    <td>time in sec</td>    <td>ISO 8601 week of year</td></tr>
@c ^<tr>    <td>tm_yday(t)</td>    <td>time in sec</td>    <td>the day of the year</td></tr>
@c ^<tr>    <td>tm_year(t)</td>    <td>time in sec</td>    <td>the year</td></tr>
@c ^<tr>    <td>weekdate_iso(year,week,day)</td> <td>int</td> <td> time eqv to ISO 8601 standard week date</td></tr>
@c ^<tr>    <td>weekdate_cdc(year,week,day)</td> <td>int</td> <td> time eqv to CDC epidemiological week date</td></tr>
@c ^</tbody>
@c ^</table>

@c ^<p>&nbsp;</p>

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3" width="90%">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>   <th colspan="3"> other gnuplot functions </th></tr>
@c ^<tr>    <th>Function</th>    <th>Arguments</th>    <th>Returns</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>column(x)</td>    <td>int or string</td>    <td> contents of column <i>x</i> during data input.</td></tr>
@c ^<tr>    <td>columnhead(x)</td>    <td>int</td>    <td> string containing first entry of column <i>x</i> in datafile.</td></tr>
@c ^<tr>    <td>exists("X")</td>    <td>string</td>    <td> returns 1 if a variable named X is defined, 0 otherwise.</td></tr>
@c ^<tr>    <td>hsv2rgb(h,s,v)</td>    <td>h,s,v in [0:1]</td>    <td> converts HSV color to 24bit RGB color.</td></tr>
@c ^<tr>    <td>index(A,x)</td>    <td>array, any</td>  <td> returns i such that A[i] equals x</td></tr>
@c ^<tr>    <td>palette(z)</td>    <td>real</td>    <td> 24bit RGB palette color mapped to z</td></tr>
@c ^<tr>    <td>rgbcolor("name")</td>    <td>string</td>    <td> 32bit ARGB color from name</td></tr>
@c ^<tr>    <td>stringcolumn(x)</td>    <td>int</td>    <td> content column <i>x</i> as a string.</td></tr>
@c ^<tr>    <td>valid(x)</td>    <td>int</td>    <td> test validity of column <i>x</i> during datafile input</td></tr>
@c ^<tr>    <td>value("name")</td>    <td>string</td>    <td> returns the current value of the named variable.</td></tr>
@c ^</tbody>
@c ^</table>

@c ^<!-- INCLUDE_NEXT_TABLE -->


@menu
* abs::
* acos::
* acosh::
* airy::
* arg::
* asin::
* asinh::
* atan::
* atan2::
* atanh::
* besj0::
* besj1::
* besjn::
* besy0::
* besy1::
* besyn::
* besi0::
* besi1::
* besin::
* cbrt::
* conj::
* cos::
* cosh::
* EllipticK::
* EllipticE::
* EllipticPi::
* erf::
* erfc::
* exp::
* gamma::
* inverf::
* imag::
* invnorm::
* lambertw::
* lgamma::
* lngamma::
* log::
* log10::
* norm::
* rand::
* real::
* sgn::
* Sign::
* sin::
* sinh::
* sqrt::
* tan::
* tanh::
* voigt::
* cerf::
* cdawson::
* faddeeva::
* erfi::
* Voigt_Profile::
* gprintf::
* sprintf::
* strlen::
* strstrt::
* substr::
* split::
* join::
* strftime::
* strptime::
* system::
* trim::
* word::
* words::
* exists::
* hsv2rgb::
* palette::
* rgbcolor::
* voxel::
* integer_conversion_functions_(int_floor_ceil_round)::
* elliptic_integrals::
* Complex_Airy_functions::
* Complex_Bessel_functions::
* Expint::
* Fresnel_integrals_FresnelC(x)_and_FresnelS(x)::
* Gamma::
* Igamma::
* Invigamma::
* Ibeta::
* Invibeta::
* LambertW::
* lnGamma::
* Random_number_generator::
* Special_functions_with_complex_arguments::
* Synchrotron_function::
* Time_functions::
* uigamma::
* using_specifier_functions::
* value::
* Counting_and_extracting_words::
* zeta::
@end menu

@node abs, acos, Functions, Functions
@subsubsection abs

@c ?expressions functions abs
@cindex abs
@findex abs


The `abs(x)` function returns the absolute value of its argument.  The
returned value is of the same type as the argument.

@cindex norm
@findex norm


@cindex modulus

For complex arguments, abs(x) is defined as the length of x in the complex
plane [i.e.,  sqrt(real(x)**2 + imag(x)**2) ]. This is also known as the norm
or complex modulus of x.

@node acos, acosh, abs, Functions
@subsubsection acos

@c ?expressions functions acos
@cindex acos
@findex acos


The `acos(x)` function returns the arc cosine (inverse cosine) of its
argument.  `acos` returns its argument in radians or degrees, as selected by
@ref{angles}.

@node acosh, airy, acos, Functions
@subsubsection acosh

@c ?expressions functions acosh
@cindex acosh
@findex acosh


The `acosh(x)` function returns the inverse hyperbolic cosine of its argument
in radians or degrees, as selected by @ref{angles}.

@node airy, arg, acosh, Functions
@subsubsection airy

@c ?expressions functions airy
@cindex airy
@findex airy


The `airy(x)` function returns the value of the Airy function Ai(x) of its
argument. The function Ai(x) is that solution of the equation y'' - x y = 0
which is everywhere finite. If the argument is complex, its imaginary part
is ignored.

@node arg, asin, airy, Functions
@subsubsection arg

@c ?expressions functions arg
@cindex arg
@findex arg


The `arg(x)` function returns the phase of a complex number in radians or
degrees, as selected by @ref{angles}.

@node asin, asinh, arg, Functions
@subsubsection asin

@c ?expressions functions asin
@cindex asin
@findex asin


The `asin(x)` function returns the arc sin (inverse sin) of its argument.
`asin` returns its argument in radians or degrees, as selected by @ref{angles}.

@node asinh, atan, asin, Functions
@subsubsection asinh

@c ?expressions functions asinh
@cindex asinh
@findex asinh


The `asinh(x)` function returns the inverse hyperbolic sin of its argument in
radians or degrees, as selected by @ref{angles}.

@node atan, atan2, asinh, Functions
@subsubsection atan

@c ?expressions functions atan
@cindex atan
@findex atan


The `atan(x)` function returns the arc tangent (inverse tangent) of its
argument.  `atan` returns its argument in radians or degrees, as selected by
@ref{angles}.

@node atan2, atanh, atan, Functions
@subsubsection atan2

@c ?expressions functions atan2
@cindex atan2
@findex atan2


The `atan2(y,x)` function returns the arc tangent (inverse tangent) of the
ratio of the real parts of its arguments.  @ref{atan2} returns its argument in
radians or degrees, as selected by @ref{angles}, in the correct quadrant.

@node atanh, besj0, atan2, Functions
@subsubsection atanh

@c ?expressions functions atanh
@cindex atanh
@findex atanh


The `atanh(x)` function returns the inverse hyperbolic tangent of its
argument in radians or degrees, as selected by @ref{angles}.

@node besj0, besj1, atanh, Functions
@subsubsection besj0

@c ?expressions functions besj0
@cindex besj0
@findex besj0


The `besj0(x)` function returns the J0th Bessel function of its argument.
@ref{besj0} expects its argument to be in radians.

@node besj1, besjn, besj0, Functions
@subsubsection besj1

@c ?expressions functions besj1
@cindex besj1
@findex besj1


The `besj1(x)` function returns the J1st Bessel function of its argument.
@ref{besj1} expects its argument to be in radians.

@node besjn, besy0, besj1, Functions
@subsubsection besjn

@c ?expressions functions besjn
@cindex besjn
@findex besjn


The `besjn(n,x)` functions returns the Jn Bessel function of x in radians.

@node besy0, besy1, besjn, Functions
@subsubsection besy0

@c ?expressions functions besy0
@cindex besy0
@findex besy0


The `besy0(x)` function returns the Y0th Bessel function of its argument.
@ref{besy0} expects its argument to be in radians.

@node besy1, besyn, besy0, Functions
@subsubsection besy1

@c ?expressions functions besy1
@cindex besy1
@findex besy1


The `besy1(x)` function returns the Y1st Bessel function of its argument.
@ref{besy1} expects its argument to be in radians.

@node besyn, besi0, besy1, Functions
@subsubsection besyn

@c ?expressions functions besyn
@cindex besyn
@findex besyn


The `besyn(n,x)` functions returns the Yn Bessel function of x in radians.

@node besi0, besi1, besyn, Functions
@subsubsection besi0

@c ?expressions functions besi0
@cindex besi0
@findex besi0


The `besi0(x)` function is the modified Bessel function or order 0.
@ref{besi0} expects its argument to be in radians.

@node besi1, besin, besi0, Functions
@subsubsection besi1

@c ?expressions functions besi1
@cindex besi1
@findex besi1


The `besi1(x)` function is the modified Bessel function or order 1.
@ref{besi1} expects its argument to be in radians.

@node besin, cbrt, besi1, Functions
@subsubsection besin

@c ?expressions functions besin
@cindex besin
@findex besin


`besin(n,x)` is the modified Bessel function or order n for integer n and
x in radians.

@node cbrt, conj, besin, Functions
@subsubsection cbrt

@c ?expressions functions cbrt
@cindex cbrt
@findex cbrt


`cbrt(x)` returns the cube root of x. If x is not real, returns NaN.
@cindex ?

`ceil(x)` returns the smallest integer not less than the real part of x.
Outside the domain |x|<2^52 ceil(x) returns NaN.

@node conj, cos, cbrt, Functions
@subsubsection conj

@c ?expressions functions conj
@cindex conj
@findex conj


The `conj(x)` function returns the complex conjugate x.
conj( @{r, i@} ) = @{r, -i@}

@node cos, cosh, conj, Functions
@subsubsection cos

@c ?expressions functions cos
@cindex cos
@findex cos


The `cos(x)` function returns the cosine of its argument.  `cos` accepts its
argument in radians or degrees, as selected by @ref{angles}.

@node cosh, EllipticK, cos, Functions
@subsubsection cosh

@c ?expressions functions cosh
@cindex cosh
@findex cosh


The `cosh(x)` function returns the hyperbolic cosine of its argument.  @ref{cosh}
expects its argument to be in radians.
@c ?expressions functions EllipticK
@cindex EllipticK
@findex EllipticK



@node EllipticK, EllipticE, cosh, Functions
@subsubsection EllipticK

The `EllipticK(k)` function returns the complete elliptic integral of the
first kind. See `elliptic integrals` for more details.
@c ?expressions functions EllipticE
@cindex EllipticE
@findex EllipticE



@node EllipticE, EllipticPi, EllipticK, Functions
@subsubsection EllipticE

The `EllipticE(k)` function returns the complete elliptic integral of the
second kind. See `elliptic integrals` for more details.
@c ?expressions functions EllipticPi
@cindex EllipticPi
@findex EllipticPi



@node EllipticPi, erf, EllipticE, Functions
@subsubsection EllipticPi

The `EllipticPi(n,k)` function returns the complete elliptic integral of the
third kind. See `elliptic integrals` for more details.

@node erf, erfc, EllipticPi, Functions
@subsubsection erf

@c ?expressions functions erf
@cindex erf
@findex erf


The `erf(x)` function returns the error function of the real part of its
argument.  If the argument is a complex value, the imaginary component is
ignored.  See @ref{cerf}, @ref{erfc}, @ref{inverf}, and @ref{norm}.

@node erfc, exp, erf, Functions
@subsubsection erfc

@c ?expressions functions erfc
@cindex erfc
@findex erfc


The `erfc(x)` function returns 1.0 - the error function of the real part of
its argument.  If the argument is a complex value, the imaginary component is
ignored.  See @ref{cerf}, `erf`, @ref{inverf}, and @ref{norm}.

@node exp, gamma, erfc, Functions
@subsubsection exp

@c ?expressions functions exp
@cindex exp
@findex exp


The `exp(x)` function returns `e` raised to the power of x, which can be
an integer, real, or complex value.
@cindex ?

@cindex ?

`floor(x)` returns the largest integer not greater than the real part of x.
Outside the domain |x|<2^52 floor(x) returns NaN.

@node gamma, inverf, exp, Functions
@subsubsection gamma

@c ?expressions functions gamma
The `gamma(x)` function returns the gamma function of the real part of its
argument.  For integer n, gamma(n+1) = n!.  If the argument is a complex
value, the imaginary component is ignored. For complex arguments see @ref{lnGamma}.
@cindex ?


@node inverf, imag, gamma, Functions
@subsubsection inverf

@c ?expressions functions inverf
@cindex inverf
@findex inverf


The `inverf(x)` function returns the inverse error function of the real part
of its argument.   See `erf` and @ref{invnorm}.
@cindex ?


@node imag, invnorm, inverf, Functions
@subsubsection imag

@c ?expressions functions imag
@cindex imag
@findex imag


The `imag(x)` function returns the imaginary part of its argument as a real
number.
@cindex ?

int(x) returns the integer part of its argument, truncated toward zero.

@node invnorm, lambertw, imag, Functions
@subsubsection invnorm

@c ?expressions functions invnorm
@cindex invnorm
@findex invnorm


The `invnorm(x)` function returns the inverse cumulative normal (Gaussian)
distribution function of the real part of its argument.  See @ref{norm}.

@cindex ?


@cindex ?




@node lambertw, lgamma, invnorm, Functions
@subsubsection lambertw

@c ?expressions functions lambertw
@cindex lambertw
@findex lambertw


The `lambertw(x)` function returns the value of the principal branch (k=0)
of Lambert's W function, which is defined by the equation (W(x)*exp(W(x))=x.
x must be a real number with x >= -exp(-1).

@node lgamma, lngamma, lambertw, Functions
@subsubsection lgamma

@c ?expressions functions lgamma
@cindex lgamma
@findex lgamma


The `lgamma(x)` function returns the natural logarithm of the gamma function
of the real part of its argument.  If the argument is a complex value, the
imaginary component is ignored.  For complex values use lnGamma(z).

@node lngamma, log, lgamma, Functions
@subsubsection lngamma

The `lnGamma(x)` function returns the natural logarithm of the gamma function.
This implementation uses a Lanczos approximation valid over the entire complex
plane. The imaginary component of the result is phase-shifted to yield a
continuous surface everywhere except the negative real axis.

@node log, log10, lngamma, Functions
@subsubsection log

@c ?expressions functions log
@cindex log
@findex log


The `log(x)` function returns the natural logarithm (base `e`) of its
argument.  See @ref{log10}.

@node log10, norm, log, Functions
@subsubsection log10

@c ?expressions functions log10
@cindex log10
@findex log10


The `log10(x)` function returns the logarithm (base 10) of its argument.

@node norm, rand, log10, Functions
@subsubsection norm

@c ?expressions functions norm
@cindex norm
@findex norm


The `norm(x)` function returns the cumulative normal (Gaussian) distribution
function of the real part of its argument.   See @ref{invnorm}, `erf` and @ref{erfc}.

@node rand, real, norm, Functions
@subsubsection rand

@c ?expressions functions rand
@cindex rand
@findex rand


The `rand(x)` function returns a pseudo random number in the interval (0:1).
See `random` for more details.

@node real, sgn, rand, Functions
@subsubsection real

@c ?expressions functions real
@cindex real
@findex real


The `real(x)` function returns the real part of its argument.
@cindex ?

`round(x)` returns the integer nearest to the real part of x.
Outside the domain |x|<2^52 round(x) returns NaN.

@node sgn, Sign, real, Functions
@subsubsection sgn

@c ?expressions functions sgn
@cindex sgn
@findex sgn


The `sgn(x)` function returns 1 if its argument is positive, -1 if its
argument is negative, and 0 if its argument is 0.  If the argument is a
complex value, the imaginary component is ignored.

@node Sign, sin, sgn, Functions
@subsubsection Sign

The `Sign(x)` function returns 0 if its argument is zero, otherwise it returns
the complex value Sign(x) = x/|x|.

@node sin, sinh, Sign, Functions
@subsubsection sin

@c ?expressions functions sin
@cindex sin
@findex sin


The `sin(x)` function returns the sine of its argument.  `sin` expects its
argument to be in radians or degrees, as selected by @ref{angles}.

@node sinh, sqrt, sin, Functions
@subsubsection sinh

@c ?expressions functions sinh
@cindex sinh
@findex sinh


The `sinh(x)` function returns the hyperbolic sine of its argument.  @ref{sinh}
expects its argument to be in radians.

@node sqrt, tan, sinh, Functions
@subsubsection sqrt

@c ?expressions functions sqrt
@cindex sqrt
@findex sqrt


The `sqrt(x)` function returns the square root of its argument. If the
x is a complex value, this always returns the root with positive real
part.
@cindex ?


@node tan, tanh, sqrt, Functions
@subsubsection tan

@c ?expressions functions tan
@cindex tan
@findex tan


The `tan(x)` function returns the tangent of its argument.  `tan` expects
its argument to be in radians or degrees, as selected by @ref{angles}.

@node tanh, voigt, tan, Functions
@subsubsection tanh

@c ?expressions functions tanh
@cindex tanh
@findex tanh


The `tanh(x)` function returns the hyperbolic tangent of its argument.  @ref{tanh}
expects its argument to be in radians.
@cindex ?


@node voigt, cerf, tanh, Functions
@subsubsection voigt

@c ?expressions functions voigt
@cindex voigt
@findex voigt


The function `voigt(x,y)` returns an approximation to the Voigt/Faddeeva
function used in spectral analysis. The approximation is accurate to
one part in 10^4.  If the libcerf library is available, the re_w_of_z()
routine is used to provide a more accurate value.
Note that voigt(x,y) = real(faddeeva( x + y*@{0,1@} )).
@cindex ?



@c ^<!-- INCLUDE_NEXT_TABLE -->


@node cerf, cdawson, voigt, Functions
@subsubsection cerf

@c ?expressions functions cerf
@cindex cerf
@findex cerf


`cerf(z)` is the complex version of the error function erf(x)
Requires external library libcerf.

@node cdawson, faddeeva, cerf, Functions
@subsubsection cdawson

@c ?expressions functions cdawson
@cindex cdawson
@findex cdawson


@cindex Dawson's integral

@c ?Dawson's integral
`cdawson(z)` returns Dawson's Integral evaluated for the complex argument z.
cdawson(z) = sqrt(pi)/2 * exp(-z^2) * erfi(z)
Requires external library libcerf.

@node faddeeva, erfi, cdawson, Functions
@subsubsection faddeeva

@c ?expressions functions faddeeva
@cindex faddeeva
@findex faddeeva


`faddeeva(z)` returns the scaled complex complementary error function
faddeeva(z) = exp(-z^2) * erfc(-i*z)
This corresponds to Eqs 7.1.3 and 7.1.4 of Abramowitz and Stegun.
Requires external library libcerf.

@node erfi, Voigt_Profile, faddeeva, Functions
@subsubsection erfi

@c ?expressions functions erfi
@cindex erfi
@findex erfi


Imaginary error function erfi(x) = -i * erf(ix)
Requires external library libcerf.
@cindex ?

@cindex ?


@node Voigt_Profile, gprintf, erfi, Functions
@subsubsection Voigt Profile

@c ?expressions functions VP
@c ?expressions functions VP_fwhm
@cindex VP

@cindex VP_fwhm

`VP(x,sigma,gamma)` corresponds to the Voigt profile defined by convolution of
a Gaussian G(x;sigma) with a Lorentzian L(x;gamma).
`VP_fwhm(sigma,gamma)` gives the full width at half maximum value of this function.



@c ^<!-- INCLUDE_NEXT_TABLE -->




@c ^<!-- INCLUDE_NEXT_TABLE -->


@node gprintf, sprintf, Voigt_Profile, Functions
@subsubsection gprintf

@c ?expressions functions gprintf
`gprintf("format",x)` applies gnuplot's own format specifiers to the single
variable x and returns the resulting string. If you want standard C-language
format specifiers, you must instead use `sprintf("format",x)`.
See `format specifiers`.

@node sprintf, strlen, gprintf, Functions
@subsubsection sprintf

@c ?expressions functions sprintf
@cindex sprintf
@findex sprintf


`sprintf("format",var1,var2,...)` applies standard C-language format specifiers
to multiple arguments and returns the resulting string. If you want to
use gnuplot's own format specifiers, you must instead call `gprintf()`.
For information on sprintf format specifiers, please see standard C-language
documentation or the unix sprintf man page.

@node strlen, strstrt, sprintf, Functions
@subsubsection strlen

@c ?expressions functions strlen
@cindex strlen
@findex strlen


`strlen("string")` returns the number of characters in a string taking into
account the current encoding.  If the current encoding supports multibyte
characters (SJIS UTF8), this may be less than the number of bytes in the string.
If the string contains multibyte UTF8 characters but the current encoding is
set to something other than UTF8, strlen("utf8string") will return a value that
is larger than the actual number of characters.

@node strstrt, substr, strlen, Functions
@subsubsection strstrt

@c ?expressions functions strstrt
@cindex strstrt
@findex strstrt


`strstrt("string","key")` searches for the character string "key" in "string"
and returns the index to the first character of "key". If "key" is not found,
it returns 0. Similar to C library function strstr except that it returns an
index rather than a string pointer. strstrt("hayneedlestack","needle") = 4.
This function is aware of utf8 encoding, so strstrt("αβγ","β") returns 2.

@node substr, split, strstrt, Functions
@subsubsection substr

@c ?expressions functions substr
@cindex substr
@findex substr


@cindex substring

`substr("string",beg,end)` returns the substring consisting of characters
beg through end of the original string. This is exactly equivalent to the
expression "string"[beg:end] except that you do not have the option of
omitting beg or end.


@node split, join, substr, Functions
@subsubsection split

@c ?
`split("string", "sep")` uses the character sequence in "sep" as a
field separator to split the content of "string" into individual fields.
It returns an array of strings, each corresponding to one field of the
original string. The second parameter "sep" is optional.  If "sep" is
omitted or if it contains a single space character the fields are split
by any amount of whitespace (space, tab, formfeed, newline, return).
Otherwise the full sequence of characters in "sep" must be matched.
For examples, see `counting_words`.

@node join, strftime, split, Functions
@subsubsection join

@c ?
`join(array, "sep")` concatenates the string elements of an array into a
single string containing fields delimited by the character sequence in "sep".
Non-string array elements generate an empty field.
For examples, see `counting_words`.


@node strftime, strptime, join, Functions
@subsubsection strftime

@c ?expressions functions strftime
@cindex strftime
@findex strftime


`strftime("timeformat",t)` applies the timeformat specifiers to the time t
given in seconds since the year 1970.
See `time_specifiers` and @ref{strptime}.

@node strptime, system, strftime, Functions
@subsubsection strptime

@c ?expressions functions strptime
@cindex strptime
@findex strptime


`strptime("timeformat",s)` reads the time from the string s using the
timeformat specifiers and converts it into seconds since the year 1970.
See `time_specifiers` and @ref{strftime}.

@node system, trim, strptime, Functions
@subsubsection system

@c ?expressions functions system
@cindex system
@cmindex system


`system("command")` executes "command" using the standard shell and returns
the resulting character stream from stdout as string variable.
One optional trailing newline is ignored.

This can be used to import external functions into gnuplot scripts using
'f(x) = real(system(sprintf("somecommand %f", x)))'.

@node trim, word, system, Functions
@subsubsection trim

@cindex trim
@findex trim


@c ?expressions functions trim
`trim("  padded string ")` returns the original string stripped of leading
and trailing whitespace.  This is useful for string comparisons of input
data fields that may contain extra whitespace. For example
@example
     plot FOO using 1:( trim(strcol(3)) eq "A" ? $2 : NaN )

@end example

@node word, words, trim, Functions
@subsubsection word

@c ?
@cindex word
@findex word


`word("string",n)` returns the nth word in string. For example,
`word("one two three",2)` returns the string "two".

@node words, exists, word, Functions
@subsubsection words

@cindex words
@findex words


`words("string")` returns the number of words in string. For example,
`words(" a b c d")` returns 4.


@c ^<!-- INCLUDE_NEXT_TABLE -->

@cindex ?

@cindex ?

@cindex ?

@c ?expressions functions tm_hour
@cindex tm_hour

The `tm_hour(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the hour (an integer in the range 0--23) as a real.
@cindex ?

@c ?expressions functions tm_mday
@cindex tm_mday

The `tm_mday(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the day of the month (an integer in the range 1--31)
as a real.
@cindex ?

@c ?expressions functions tm_min
@cindex tm_min

The `tm_min(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the minute (an integer in the range 0--59) as a real.
@cindex ?

@c ?expressions functions tm_mon
@cindex tm_mon

The `tm_mon(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the month (an integer in the range 0--11) as a real.
@cindex ?

@c ?expressions functions tm_sec
@cindex tm_sec

The `tm_sec(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the second (an integer in the range 0--59) as a real.
@cindex ?

@c ?expressions functions tm_wday
@cindex tm_wday

The `tm_wday(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the day of the week (Sun..Sat) as an integer (0..6).
@cindex ?

@cindex ?

@c ?expressions functions tm_yday
@cindex tm_yday

The `tm_yday(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the day of the year (an integer in the range 0--365)
as a real.
@cindex ?

@c ?expressions functions tm_year
@cindex tm_year

The `tm_year(t)` function interprets its argument as a time, in seconds from
1 Jan 1970.  It returns the year (an integer) as a real.
@cindex ?

@cindex ?



@c ^<!-- INCLUDE_NEXT_TABLE -->

@cindex ?

@cindex ?

@cindex ?


@node exists, hsv2rgb, words, Functions
@subsubsection exists

@c ?expressions functions exists
@cindex exists
@findex exists


The argument to `exists()` is a string constant or a string variable;
if the string contains the name of a defined variable, the function returns 1.
Otherwise the function returns 0.

@node hsv2rgb, palette, exists, Functions
@subsubsection hsv2rgb

@c ?expressions functions hsv2rgb
@cindex hsv2rgb
@findex hsv2rgb


@cindex hsv

The `hsv2rgb(h,s,v)` function converts HSV (Hue/Saturation/Value) triplet
to an equivalent RGB value.
@cindex ?


@node palette, rgbcolor, hsv2rgb, Functions
@subsubsection palette

@c ?expressions functions palette
@cindex palette
@opindex palette


`palette(z)` returns the 24 bit RGB representation of the palette color
@example
 mapped to z given the current extremes of cbrange.

@end example

@node rgbcolor, voxel, palette, Functions
@subsubsection rgbcolor

@c ?expressions functions rgbcolor
@cindex rgbcolor
@findex rgbcolor


@cindex alpha channel

`rgbcolor("name")` returns an integer containing the 32 bit alpha + RGB color
value of a named color or a string of the form "0xAARRGGBB" or "#AARRGGBB".
If the string is not recognized as a color description the function returns 0.
This can be used to read a color name from a data file or to add an alpha
channel to a named color in the upper byte of the returned value.
See @ref{colorspec}.
@cindex ?

@cindex ?

@cindex ?


@node voxel, integer_conversion_functions_(int_floor_ceil_round), rgbcolor, Functions
@subsubsection voxel

@c ?expressions functions voxel
@cindex voxel
@findex voxel


The function voxel(x,y,z) returns the value of the voxel in the currently
active grid that contains the point (x,y,z).  It may also be used on the
left side of an assignment statement to set the value of that voxel.
E.g. voxel(x,y,z) = 0.0
See `splot voxel-grids`, @ref{vgrid}.



@node integer_conversion_functions_(int_floor_ceil_round), elliptic_integrals, voxel, Functions
@subsubsection integer conversion functions (int floor ceil round)

@c ?integer conversion
@cindex integer

@cindex precision

Gnuplot integer variables are stored with 64 bits of precision if that is
supported by the platform.

Gnuplot complex and real variables are on most platforms stored in IEEE754
binary64 (double) floating point representation. Their precision is limited
to 53 bits, corresponding to roughly 16 significant digits.

Therefore integers with absolute value larger than 2^53 cannot be uniquely
represented in a floating point variable.  I.e. for large N the operation
int(real(N)) may return an integer near but not equal to N.

Furthermore, functions that convert from a floating point value to an integer
by truncation may not yield the expected value if the operation depends on
more than 15 significant digits of precision even if the magnitude is small.
For example int(log10(0.1)) returns 0 rather than -1 because the floating
point representation is equivalent to -0.999999999999999...
See also @ref{overflow}.

@c ?expressions functions int
@cindex int

`int(x)` returns the integer part of its argument, truncated toward zero.
If |x| > 2^63, i.e. too large to represent as an integer, NaN is returned.
If |x| > 2^52 the return value will lie within a range of neighboring integers
that cannot be distinguished due to limited floating point precision.
See `integer conversion`.

@c ?expressions functions floor
@cindex floor

`floor(x)` returns the largest integer not greater than the real part of x.
If |x| > 2^52 the true value cannot be uniquely determined; in this case the
return value is NaN.  See `integer conversion`.

@c ?expressions functions ceil
@cindex ceil

`ceil(x)` returns the smallest integer not less than the real part of x.
If |x| > 2^52 the true value cannot be uniquely determined; in this case the
return value is NaN.  See `integer conversion`.

@c ?expressions functions round
@cindex round

`round(x)` returns the integer nearest to the real part of x.
If |x| > 2^52 the true value cannot be uniquely determined; in this case the
return value is NaN.  See `integer conversion`.


@node elliptic_integrals, Complex_Airy_functions, integer_conversion_functions_(int_floor_ceil_round), Functions
@subsubsection elliptic integrals

@c ?elliptic integrals
@cindex elliptic

@cindex elliptic integrals
@findex elliptic integrals


The `EllipticK(k)` function returns the complete elliptic integral of the first
kind, i.e. the definite integral between 0 and pi/2 of the function
`(1 - k^2*sin^2(θ))^(-0.5)`.  The domain of `k` is -1 to 1 (exclusive).


The `EllipticE(k)` function returns the complete elliptic integral of the
second kind, i.e. the definite integral between 0 and pi/2 of the function
`(1 - k^2*sin^2(θ))^0.5`.  The domain of `k` is -1 to 1 (inclusive).


The `EllipticPi(n,k)` function returns the complete elliptic integral of the
third kind, i.e. the definite integral between 0 and pi/2 of the function
`(1 - k^2*sin^2(θ))^(-0.5) / (1  - n*sin^2(θ))`.  The parameter `n` must be less
than 1, while `k` must lie between -1 and 1 (exclusive).  Note that by
definition EllipticPi(0,k) == EllipticK(k) for all possible values of `k`.


Elliptic integral algorithm: B.C.Carlson 1995, Numerical Algorithms 10:13-26.


@node Complex_Airy_functions, Complex_Bessel_functions, elliptic_integrals, Functions
@subsubsection Complex Airy functions

@c ?expressions functions Ai
@cindex Ai

@c ?expressions functions Bi
@cindex Bi

`Ai(z)` and `Bi(z)` are the Airy functions of complex argument z, computed
in terms of the modified Bessel functions K and I.
Supported via an external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).




@node Complex_Bessel_functions, Expint, Complex_Airy_functions, Functions
@subsubsection Complex Bessel functions

@c ?expressions functions BesselJ
@cindex BesselJ

`BesselJ(nu,z)` is the Bessel function of the first kind J_nu
for real argument nu and complex argument z.
Supported via external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).

@c ?expressions functions BesselY
@cindex BesselY

`BesselY(nu,z)` is the Bessel function of the second kind Y_nu
for real argument nu and complex argument z.
Supported via external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).

@c ?expressions functions BesselI
@cindex BesselI

`BesselI(nu,z)` is the modified Bessel function of the first kind I_nu
for real argument nu and complex argument z.
Supported via external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).

@c ?expressions functions BesselK
@cindex BesselK

`BesselK(nu,z)` is the modified Bessel function of the second kind K_nu
for real argument nu and complex argument z.
Supported via external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).

@c ?expressions functions BesselH1
@c ?expressions functions BesselH2
@c ?expressions functions Hankel
@cindex BesselH1

@cindex BesselH2

@cindex Hankel

`BesselH1(nu,z)` and `BesselH2(nu,z)` are the Hankel functions of the first and
second kind
@example
    H1(nu,z) = J(nu,z) + iY(nu,z)
    H2(nu,z) = J(nu,z) - iY(nu,z)
@end example

for real argument nu and complex argument z.
Supported via external library containing routines by Donald E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).


@node Expint, Fresnel_integrals_FresnelC(x)_and_FresnelS(x), Complex_Bessel_functions, Functions
@subsubsection Expint

@c ?expressions functions expint
@cindex expint

`expint(n,z)` returns the exponential integral of order n, where n is an
integer >= 0.  This is the integral from 1 to infinity of t^(-n) e^(-tz) dt.


If your copy of gnuplot was built with support for complex functions from
the Amos library, then for n>0 the evaluation uses Amos routine cexint
[Amos 1990 Algorithm 683, ACM Trans Math Software 16:178].
In this case z may be any complex number with -pi < arg(z) <= pi.
expint(0,z) is calculated as exp(-z)/z.

If Amos library support is not present, z is limited to real values z >= 0.


@node Fresnel_integrals_FresnelC(x)_and_FresnelS(x), Gamma, Expint, Functions
@subsubsection Fresnel integrals FresnelC(x) and FresnelS(x)

@c ?expressions functions FresnelC
@c ?expressions functions FresnelS
@cindex FresnelC

@cindex FresnelS

The cosine and sine Fresnel integrals are calculated using their relationship
to the complex error function erf(z).  Due to dependence on erf(z),
these functions are only available if libcerf library support is present.




@node Gamma, Igamma, Fresnel_integrals_FresnelC(x)_and_FresnelS(x), Functions
@subsubsection Gamma

@cindex gamma
@findex gamma


`gamma(x)` returns the gamma function of the real part of its argument.
For integer n, gamma(n+1) = n!.  If the argument is a complex value,
the imaginary component is ignored. For complex arguments see @ref{lnGamma}.


@node Igamma, Invigamma, Gamma, Functions
@subsubsection Igamma

@c ?expressions functions igamma
@cindex igamma

`igamma(a, z)` returns the lower incomplete gamma function P(a, z),
[Abramowitz and Stegun (6.5.1); NIST DLMF 8.2.4].  If complex function
support is present a and z may be complex values; real(a) > 0;
For the complementary upper incomplete gamma function, see @ref{uigamma}.


One of four algorithms is used depending on a and z.
Case (1) When a is large (>100) and (z-a)/a is small (<0.2) use
Gauss-Legendre quadrature with coefficients from Numerical Recipes 3rd
Edition section 6.2, Press et al (2007).
Case (2) When z > 1 and z > (a+2) use a continued fraction following
Shea (1988) J. Royal Stat. Soc. Series C (Applied Statistics) 37:466-473.
Case (3) When z < 0 and a < 75 and imag(a) == 0 use the series from
Abramowitz & Stegun (6.5.29).
Otherwise (Case 4) use Pearson's series expansion.

Note that convergence is poor in some regions of the full domain.
If the chosen algorithm does not converge to within 1.E-14 the function
returns NaN and prints a warning.

If no complex function support is present the domain is limited to
real arguments a > 0, z >= 0.


@node Invigamma, Ibeta, Igamma, Functions
@subsubsection Invigamma

@c ?expressions functions invigamma
@cindex invigamma

The inverse incomplete gamma function `invigamma(a,p)` returns the value
z such that p = igamma(a,z).
p is limited to (0;1]. a must be a positive real number.
The implementation in gnuplot has relative accuracy that ranges from
1.e-16 for a<1 to 5.e-6 for a = 1.e10.  Convergence may fail for a < 0.005.


@node Ibeta, Invibeta, Invigamma, Functions
@subsubsection Ibeta

@c ?expressions functions ibeta
@cindex ibeta

`ibeta(a,b,x)` returns the normalized lower incomplete beta integral of
real arguments a,b > 0,  x in [0:1].


If the arguments are complex, the imaginary components are ignored.
The implementation in gnuplot uses code from the Cephes library
[Moshier 1989, "Methods and Programs for Mathematical Functions", Prentice-Hall].


@node Invibeta, LambertW, Ibeta, Functions
@subsubsection Invibeta

@c ?expressions functions invibeta
@cindex invibeta

The inverse incomplete beta function `invibeta(a,b,p)` returns the value
z such that p = ibeta(a,b,z).  a, b are limited to positive real values
and p is in the interval [0,1].  Note that as a, b approach zero
invibeta() approaches 1.0 and its relative accuracy is limited by
floating point precision.


@node LambertW, lnGamma, Invibeta, Functions
@subsubsection LambertW

@c ?expressions functions LambertW
@cindex LambertW
@findex LambertW


Lambert W function with complex domain and range.
LambertW( z, k ) returns the kth branch of the function W defined by
the equation W(z) * exp(W(z)) = z.
The complex value is obtained using Halley's method as described by
Corless et al [1996], Adv. Comp. Math 5:329.
The nominal precision is 1.E-13 but convergence can be poor very close to
discontinuities, e.g. branch points.

@node lnGamma, Random_number_generator, LambertW, Functions
@subsubsection lnGamma

@c ?expressions functions lnGamma
@cindex lnGamma
@findex lnGamma


lnGamma(z) returns the natural log of the gamma function with complex domain
and range.  Implemented using 14 term approximation following Lanczos [1964],
SIAM JNA 1:86-96.  The imaginary component of the result is phase-shifted to
yield a continuous surface everywhere except the negative real axis.

@node Random_number_generator, Special_functions_with_complex_arguments, lnGamma, Functions
@subsubsection Random number generator

@c ?expressions random
@cindex random

@cindex rand
@findex rand


The function `rand()` produces a sequence of pseudo-random numbers between
0 and 1 using an algorithm from P. L'Ecuyer and S. Cote, "Implementing a
random number package with splitting facilities", ACM Transactions on
Mathematical Software, 17:98-111 (1991).

@example
      rand(0)     returns a pseudo random number in the open interval (0:1)
                  generated from the current value of two internal
                  32-bit seeds.
      rand(-1)    resets both seeds to a standard value.
      rand(x)     for integer 0 < x < 2^31-1 sets both internal seeds
                  to x.
      rand(@{x,y@}) for integer 0 < x,y < 2^31-1 sets seed1 to x and
                  seed2 to y.

@end example

@node Special_functions_with_complex_arguments, Synchrotron_function, Random_number_generator, Functions
@subsubsection Special functions with complex arguments

@c ?expressions functions special
@c ?expressions functions complex
@cindex special_functions

@cindex libcerf

@cindex Amos

@cindex libopenspecfun


Some special functions with complex domain are provided through external
libraries. If your copy of gnuplot was not configured to link against these
libraries then it will support only the real domain or will not provide
the function at all.

Functions requiring libcerf (http://apps.jcns.fz-juelich.de/libcerf) depend
on configuration option `--with-libcerf`.  This is the default.
See @ref{cerf}, @ref{cdawson}, @ref{faddeeva}, @ref{erfi}, `VP`, and `VP_fwhm`.

Complex Airy, Bessel, and Hankel functions of real order nu and complex
arguments require a library containing routines implemented by Douglas E. Amos,
Sandia National Laboratories, SAND85-1018 (1985).
These routines may be found in netlib (http://netlib.sandia.gov) or in
libopenspecfun (https://github.com/JuliaLang/openspecfun).
The corresponding configuration option is `--with-amos=<library directory>`.
See `Ai`, `Bi`, `BesselJ`, `BesselY`, `BesselI`, `BesselK`, `Hankel`.
The complex exponential integral is provided by netlib or libamos but not by
libopenspecfun.  See `expint`.


@node Synchrotron_function, Time_functions, Special_functions_with_complex_arguments, Functions
@subsubsection Synchrotron function

@c ?expressions functions SynchrotronF
@cindex SynchrotronF

The synchrotron function SynchrotronF(x) describes the power distribution
spectrum of synchrotron radiation as a function of x given in units of the
critical photon energy (i.e. critical frequency vc).


Chebyshev coefficients for approximation accurate to 1.E-15 are taken from
MacLead (2000) NuclInstMethPhysRes A443:540-545.


@node Time_functions, uigamma, Synchrotron_function, Functions
@subsubsection Time functions



@noindent --- TIME ---

@c ?expressions functions time
@cindex time

The `time(x)` function returns the current system time. This value can be
converted to a date string with the @ref{strftime} function, or it can be used
in conjunction with `timecolumn` to generate relative time/date plots.
The type of the argument determines what is returned. If the argument is an
integer, time() returns the current time as an integer, in seconds from the
epoch date, 1 Jan 1970. If the argument is real (or complex), the result is
real as well.  If the argument is a string, it is assumed to be a format
and it is passed to @ref{strftime} to provide a formatted time string.
See also `time_specifiers` and @ref{timefmt}.


@noindent --- TIMECOLUMN ---

@c ?expressions functions timecolumn
@cindex timecolumn

`timecolumn(N,"timeformat")` reads string data starting at column N as a time/date
value and uses "timeformat" to interpret this as "seconds since the epoch" to
millisecond precision.  If no format parameter is given, the format defaults
to the string from @ref{timefmt}.  This function is valid only in the `using`
specification of a plot or stats command.  See `plot datafile using`.


@noindent --- TM_STRUCTURE ---

@cindex epoch

Gnuplot stores time internally as a 64-bit floating point value representing
seconds since the epoch date 1 Jan 1970.  In order to interpret this as a time
or date it is converted to or from a POSIX standard structure `struct_tm`.
Note that fractional seconds, if any, cannot be retrieved via tm_sec().
The components may be accessed individually using the functions
@itemize @bullet
@item
`tm_hour(t)` integer hour in the range 0--23
@item
`tm_mday(t)` integer day of month in the range 1--31
@item
`tm_min(t)`  integer minute in the range 0--59
@item
`tm_mon(t)`  integer month of year in the range 0--11
@item
`tm_sec(t)`  integer second in the range 0--59
@item
`tm_wday(t)` integer day of the week in the range 0 (Sunday)--6(Saturday)
@item
`tm_yday(t)` integer day of the year the range 0--365
@item
`tm_year(t)` integer year
@end itemize


@noindent --- TM_WEEK ---

@c ?expressions functions tm_week
@c ?time_specifiers tm_week
@cindex tm_week

@c ?epidemiological week
@cindex epidemiological week

The `tm_week(t, standard)` function interprets its first argument t as a time
in seconds from 1 Jan 1970.  Despite the name of this function it does not
report a field from the POSIX tm structure.

If standard = 0 it returns the week number in the ISO 8601 "week date" system.
This corresponds to gnuplot's %W time format.
If standard = 1 it returns the CDC epidemiological week number ("epi week").
This corresponds to gnuplot's %U time format.
For corresponding inverse functions that convert week dates to calendar time
see `weekdate_iso`, `weekdate_cdc`.

In brief, ISO Week 1 of year YYYY begins on the Monday closest to 1 Jan YYYY.
This may place it in the previous calendar year.  For example Tue 30 Dec 2008
has ISO week date 2009-W01-2 (2nd day of week 1 of 2009).  Up to three days
at the start of January may come before the Monday of ISO week 1;
these days are assigned to the final week of the previous calendar year.
E.g. Fri 1 Jan 2021 has ISO week date 2020-W53-5.

The US Center for Disease Control (CDC) epidemiological week is a similar
week date convention that differs from the ISO standard by defining a week as
starting on Sunday, rather than on Monday.



@noindent --- WEEKDATE_ISO ---

@c ?expressions functions weekdate_iso
@c ?time_specifiers weekdate_iso
@cindex weekdate_iso

Syntax:
@example
     time = weekdate_iso( year, week [, day] )

@end example

This function converts from the year, week, day components of a date in
ISO 8601 "week date" format to the calendar date as a time in seconds since
the epoch date 1 Jan 1970.  Note that the nominal year in the week date
system is not necessarily the same as the calendar year.  The week is an
integer from 1 to 53.  The day parameter is optional. If it is omitted
or equal to 0 the time returned is the start of the week. Otherwise day
is an integer from 1 (Monday) to 7 (Sunday).
See `tm_week` for additional information on an inverse function that converts
from calendar date to week number in the ISO standard convention.

Example:
@example
     # Plot data from a file with column 1 containing ISO weeks
     #     Week     cases  deaths
     #     2020-05    432       1
     calendar_date(w) = weekdate_iso( int(w[1:4]), int(w[6:7]) )
     set xtics time format "%b\n%Y"
     plot FILE using (calendar_date(strcol(1))) : 2   title columnhead

@end example



@noindent --- WEEKDATE_CDC ---

@c ?expressions functions weekdate_cdc
@c ?time_specifiers weekdate_cdc
@cindex weekdate_cdc

@cindex epidemiological week

Syntax:
@example
     time = weekdate_cdc( year, week [, day] )

@end example

This function converts from the year, week, day components of a date in
the CDC/MMWR "epi week" format to the calendar date as a time in seconds since
the epoch date 1 Jan 1970.  The CDC week date convention differs from the
ISO week date in that it is defined in terms of each week running from
day 1 = Sunday to day 7 = Saturday.  If the third parameter is 0 or is
omitted, the time returned is the start of the week.
See `tm_week` and `weekdate_iso`.


@node uigamma, using_specifier_functions, Time_functions, Functions
@subsubsection uigamma

@c ?expressions functions uigamma
@cindex uigamma
@findex uigamma


`uigamma(a, x)` returns the regularized upper incomplete gamma function Q(a, x),
NIST DLMF eq 8.2.4
For the complementary lower incomplete gamma function P(a,x), see `igamma`.
Q(a, x) + P(a, x) = 1.


The current implementation is from the Cephes library (Moshier 2000).
The domain is restricted to real a>0, real x>=0.


@node using_specifier_functions, value, uigamma, Functions
@subsubsection using specifier functions

@c ?
These functions are valid only in the context of data input.  Usually this
means use in an expression that provides an input field of the `using`
specifier in a `plot`, `splot`, @ref{fit}, or `stats` command.  However the
scope of the functions is actually the full clause of the plot command,
including for example use of `columnhead` in constructing the plot title.



@noindent --- COLUMN ---

@c ?expressions functions column
@cindex column

The `column(x)` function may be used only in the `using` specifier
of a plot, splot, fit, or stats command.
It evaluates to the numerical value of the content of column x.
If the column is expected to hold a string, use instead stringcolumn(x)
or timecolumn(x, "timeformat").
See `plot datafile using`, `stringcolumn`, `timecolumn`.


@noindent --- COLUMNHEAD ---

@c ?expressions functions columnhead
@cindex columnhead

The `columnhead(x)` function may only be used as part of a plot, splot,
or stats command.  It evaluates to a string containing the content of
column x in the first line of a data file.  This is typically used to
extract the column header for use in a plot title.
See `plot datafile using`.
Example:
@example
     set datafile columnheader
     plot for [i=2:4] DATA using 1:i title columnhead(i)

@end example


@noindent --- STRINGCOLUMN ---

@c ?expressions functions stringcolumn
@cindex stringcolumn

@c ?expressions functions strcol
@cindex strcol

The `stringcolumn(x)` function may be used only in the `using` specification
of a data plot or @ref{fit} command.  It returns the content of column x as a
string.  `strcol(x)` is shorthand for `stringcolumn(x)`.
If the string is to be interpreted as a time or date, use instead
timecolumn(x, "timeformat").  See `plot datafile using`.


@noindent --- VALID ---

@c ?expressions functions valid
@cindex valid

The `valid(x)` function may be used only in expressions that are part of a
`using` specification.  It can be used to detect explicit NaN values or
unexpected garbage in a field of the input stream, perhaps to substitute
a default value or to prevent further arithmetic operations using NaN.
Both "missing" and NaN (not-a-number) data values are considered to be
invalid, but it is important to note that if the program recognizes that a
field is truly missing or contains a "missing" flag then the input line is
discarded before the expression invoking valid() would be called.
See `plot datafile using`, `missing`.

Example:
@example
     # Treat an unrecognized bin value as contributing some constant
     # prior expectation to the bin total rather than ignoring it.
     plot DATA using 1 : (valid(2) ? $2 : prior) smooth unique

@end example


@node value, Counting_and_extracting_words, using_specifier_functions, Functions
@subsubsection value

@c ?expressions functions value
@cindex value
@findex value


B = value("A") is effectively the same as B = A, where A is the name of a
user-defined variable.  This is useful when the name of the variable is itself
held in a string variable. See `user-defined variables`.  It also allows you to
read the name of a variable from a data file.  If the argument is a numerical
expression, value() returns the value of that expression.  If the argument is a
string that does not correspond to a currently defined variable,
value() returns NaN.


@node Counting_and_extracting_words, zeta, value, Functions
@subsubsection Counting and extracting words

@cindex counting_words

@c ?expressions functions word
@c ?expressions functions words
@cindex words
@findex words


@cindex word
@findex word


`word("string",n)` returns the nth word in string. For example,
`word("one two three",2)` returns the string "two".

`words("string")` returns the number of words in string. For example,
`words(" a b c d")` returns 4.

Words must be separated by whitespace; if you need to extract individual
fields from a string that are separated by some other character, use
instead @ref{split}.

The `word` and @ref{words} functions provide limited support for quoted strings,
both single and double quotes can be used:
@example
      print words("\"double quotes\" or 'single quotes'")   # 3
@end example

A starting quote must either be preceded by a white space, or start the
string. This means that apostrophes in the middle or at the end of words are
considered as parts of the respective word:
@example
      print words("Alexis' phone doesn't work") # 4
@end example

Escaping quote characters is not supported. If you want to keep certain quotes,
the respective section must be surrounded by the other kind of quotes:
@example
      s = "Keep \"'single quotes'\" or '\"double quotes\"'"
      print word(s, 2) # 'single quotes'
      print word(s, 4) # "double quotes"
@end example

Note, that in this last example the escaped quotes are necessary only for the
string definition.

@cindex split
@findex split


@cindex split
@findex split


@c ?expressions functions split
`split("string", "sep")` uses the character sequence in "sep" as a
field separator to split the content of "string" into individual fields.
It returns an array of strings, each corresponding to one field of the
original string. The second parameter "sep" is optional.  If "sep" is
omitted or if it contains a single space character the fields are split
by any amount of whitespace (space, tab, formfeed, newline, return).
Otherwise the full sequence of characters in "sep" must be matched.

The three examples below each produce an array [ "A", "B", "C", "D" ]
@example
    t1 = split( "A B C D" )
    t2 = split( "A B C D", " ")
    t3 = split( "A;B;C;D", ";")

@end example

However the command
@example
    t4 = split( "A;B; C;D", "; " )
@end example

produces an array containing only two strings [ "A;B", "C;D" ] because
the two-character field separator sequence "; " is found only once.

Note: Breaking the string into an array of single characters using an empty
string for sep is not currently implemneted.  You can instead accomplish
this using single character substrings:     Array[i] = "string"[i:i]

@cindex join
@findex join


@cindex join
@findex join


@c ?expressions functions join
`join(array, "sep")` concatenates the string elements of an array into a
single string containing fields delimited by the character sequence in "sep".
Non-string array elements generate an empty field.  The complementary
operation @ref{split} break extracts fields from a string to create an array.
Example:
@example
    array A = ["A", "B", , 7, "E"]
    print join(A,";")
          A;B;;;E

@end example

@cindex trim
@findex trim


@cindex trim
@findex trim


`trim("  padded string ")` returns the original string stripped of leading
and trailing whitespace.  This is useful for string comparisons of input
data fields that may contain extra whitespace. For example
@example
     plot FOO using 1:( trim(strcol(3)) eq "A" ? $2 : NaN )

@end example


@node zeta,  , Counting_and_extracting_words, Functions
@subsubsection zeta

@c ?expressions functions zeta
@cindex zeta
@findex zeta


@cindex Riemann

zeta(s) is the Riemann zeta function with complex domain and range.

This implementation uses the polynomial series described in algorithm 3 of
P. Borwein [2000] Canadian Mathematical Society Conference Proceedings.
The nominal precision is 1.e-16 over the complex plane.  However note that
this does not guarantee that non-trivial zeros of the zeta function will
evaluate exactly to 0.


@node operators, summation, Functions, Expressions
@subsection operators

@c ?expressions operators
@cindex operators

The operators in `gnuplot` are the same as the corresponding operators in the
C programming language, except that all operators accept integer, real, and
complex arguments, unless otherwise noted.  The ** operator (exponentiation)
is supported, as in FORTRAN.

Operator precedence is the same as in Fortran and C.  As in those languages,
parentheses may be used to change the order of operation.  Thus -2**2 = -4,
but (-2)**2 = 4.


@menu
* Unary::
* Binary::
* Ternary::
@end menu

@node Unary, Binary, operators, operators
@subsubsection Unary

@c ?expressions operators unary
@c ?operators unary
@cindex unary

The following is a list of all the unary operators:


@example
    Symbol      Example    Explanation
      -           -a          unary minus
      +           +a          unary plus (no-operation)
      ~           ~a        * one's complement
      !           !a        * logical negation
      !           a!        * factorial
      $           $3        * data column in `using` specifier
      ||          |A|         cardinality of array A
@end example

@cindex factorial

@cindex negation

@cindex one's complement

@cindex operator precedence

@cindex cardinality



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Symbol</th>    <th>Example</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>-</tt></td>    <td><tt>-a</tt></td>    <td>unary minus</td></tr>
@c ^<tr>    <td><tt>+</tt></td>    <td><tt>+a</tt></td>    <td>unary plus (no-operation)</td></tr>
@c ^<tr>    <td><tt>~</tt></td>    <td><tt>~a</tt></td>    <td>* one's complement</td></tr>
@c ^<tr>    <td><tt>!</tt></td>    <td><tt>!a</tt></td>    <td>* logical negation</td></tr>
@c ^<tr>    <td><tt>!</tt></td>    <td><tt>a!</tt></td>    <td>* factorial</td></tr>
@c ^<tr>    <td><tt>$</tt></td>    <td><tt>$3</tt></td>    <td>* data column in `using` specifier</td></tr>
@c ^<tr>    <td><tt>|</tt></td>    <td><tt>|A|</tt></td>   <td>cardinality of array A</td></tr>
@c ^</tbody>
@c ^</table>

(*) Starred explanations indicate that the operator requires an integer
argument.

The factorial operator returns an integer when N! is sufficiently small
(N <= 20 for 64-bit integers). It returns a floating point approximation
for larger values of N.

@cindex cardinality

The cardinality operator |...| returns the number of elements |A| in array A.
It returns the number of data lines |$DATA| when applied to datablock $DATA.

@node Binary, Ternary, Unary, operators
@subsubsection Binary

@c ?expressions operators binary
@c ?operators binary
The following is a list of all the binary operators:


@example
    Symbol       Example      Explanation
      **          a**b          exponentiation
      *           a*b           multiplication
      /           a/b           division
      %           a%b         * modulo
      +           a+b           addition
      -           a-b           subtraction
      ==          a==b          equality
      !=          a!=b          inequality
      <           a<b           less than
      <=          a<=b          less than or equal to
      >           a>b           greater than
      >=          a>=b          greater than or equal to
      <<          0xff<<1       left shift unsigned
      >>          0xff>>2       right shift unsigned
      &           a&b         * bitwise AND
      ^           a^b         * bitwise exclusive OR
      |           a|b         * bitwise inclusive OR
      &&          a&&b        * logical AND
      ||          a||b        * logical OR
      =           a = b         assignment
      ,           (a,b)         serial evaluation
      .           A.B           string concatenation
      eq          A eq B        string equality
      ne          A ne B        string inequality
@end example

@cindex bitwise operators

@cindex string operators

@cindex modulo

@cindex exponentiation




@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Symbol</th>    <th>Example</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>**</tt></td>    <td><tt>a**b</tt></td>    <td>exponentiation</td></tr>
@c ^<tr>    <td><tt>*</tt></td>    <td><tt>a*b</tt></td>    <td>multiplication</td></tr>
@c ^<tr>    <td><tt>/</tt></td>    <td><tt>a/b</tt></td>    <td>division</td></tr>
@c ^<tr>    <td><tt>%</tt></td>    <td><tt>a%b</tt></td>    <td>* modulo</td></tr>
@c ^<tr>    <td><tt>+</tt></td>    <td><tt>a+b</tt></td>    <td>addition</td></tr>
@c ^<tr>    <td><tt>-</tt></td>    <td><tt>a-b</tt></td>    <td>subtraction</td></tr>
@c ^<tr>    <td><tt>==</tt></td>    <td><tt>a==b</tt></td>    <td>equality</td></tr>
@c ^<tr>    <td><tt>!=</tt></td>    <td><tt>a!=b</tt></td>    <td>inequality</td></tr>
@c ^<tr>    <td><tt>&lt;</tt></td>    <td><tt>a&lt;b</tt></td>    <td>less than</td></tr>
@c ^<tr>    <td><tt>&lt;=</tt></td>    <td><tt>a&lt;=b</tt></td>    <td>less than or equal to</td></tr>
@c ^<tr>    <td><tt>&gt;</tt></td>    <td><tt>a&gt;b</tt></td>    <td>greater than</td></tr>
@c ^<tr>    <td><tt>&gt;=</tt></td>    <td><tt>a&gt;=b</tt></td>    <td>greater than or equal to</td></tr>
@c ^<tr>    <td><tt>&lt;&lt;</tt></td>    <td><tt>0xff&lt;&lt;1</tt></td>    <td>left shift unsigned</td></tr>
@c ^<tr>    <td><tt>&gt;&gt;</tt></td>    <td><tt>0xff&gt;&gt;1</tt></td>    <td>right shift unsigned</td></tr>
@c ^<tr>    <td><tt>&amp;</tt></td>    <td><tt>a&amp;b</tt></td>    <td>* bitwise AND</td></tr>
@c ^<tr>    <td><tt>^</tt></td>    <td><tt>a^b</tt></td>    <td>* bitwise exclusive OR</td></tr>
@c ^<tr>    <td><tt>|</tt></td>    <td><tt>a|b</tt></td>    <td>* bitwise inclusive OR</td></tr>
@c ^<tr>    <td><tt>&amp;&amp;</tt></td>    <td><tt>a&amp;&amp;b</tt></td>    <td>* logical AND</td></tr>
@c ^<tr>    <td><tt>||</tt></td>    <td><tt>a||b</tt></td>    <td>* logical OR</td></tr>
@c ^<tr>    <td><tt>=</tt></td>    <td><tt>a = b</tt></td>    <td>assignment</td></tr>
@c ^<tr>    <td><tt>,</tt></td>    <td><tt>(a,b)</tt></td>    <td>serial evaluation</td></tr>
@c ^<tr>    <td><tt>.</tt></td>    <td><tt>a.b</tt></td>    <td>string concatenation</td></tr>
@c ^<tr>    <td><tt>eq</tt></td>    <td><tt>A eq B</tt></td>    <td>string equality</td></tr>
@c ^<tr>    <td><tt>ne</tt></td>    <td><tt>A ne B</tt></td>    <td>string inequality</td></tr>
@c ^</tbody>
@c ^</table>

(*) Starred explanations indicate that the operator requires integer
arguments.
Capital letters A and B indicate that the operator requires string arguments.

Logical AND (&&) and OR (||) short-circuit the way they do in C.  That is,
the second `&&` operand is not evaluated if the first is false; the second
`||` operand is not evaluated if the first is true.

Serial evaluation occurs only in parentheses and is guaranteed to proceed
in left to right order.  The value of the rightmost subexpression is returned.

@node Ternary,  , Binary, operators
@subsubsection Ternary

@c ?expressions operators ternary
@c ?operators ternary
@cindex ternary

There is a single ternary operator:


@example
    Symbol       Example      Explanation
      ?:          a?b:c     ternary operation

@end example



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Symbol</th>    <th>Example</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>?:</tt></td>    <td><tt>a?b:c</tt></td>    <td>* ternary operation</td></tr>
@c ^</tbody>
@c ^</table>

The ternary operator behaves as it does in C.  The first argument (a), which
must be an integer, is evaluated.  If it is true (non-zero), the second
argument (b) is evaluated and returned; otherwise the third argument (c) is
evaluated and returned.

The ternary operator is very useful both in constructing piecewise functions
and in plotting points only when certain conditions are met.

Examples:

Plot a function that is to equal sin(x) for 0 <= x < 1, 1/x for 1 <= x < 2,
and undefined elsewhere:
@example
      f(x) = 0<=x && x<1 ? sin(x) : 1<=x && x<2 ? 1/x : 1/0
      plot f(x)
@end example

Note that `gnuplot` quietly ignores undefined values when plotting, so the
final branch of the function (1/0) will produce no plottable points.
Note also that f(x) will be plotted as a continuous function across the
discontinuity if a line style is used.  To plot it discontinuously, create
separate functions for the two pieces.

For data in a file, plot the average of the data in columns 2 and 3 against
the datum in column 1, but only if the datum in column 4 is non-negative:

@example
      plot 'file' using 1:( $4<0 ? 1/0 : ($2+$3)/2 )

@end example

For an explanation of the `using` syntax, please see `plot datafile using`.

@node summation, Gnuplot-defined_variables, operators, Expressions
@subsection summation

@c ?expressions operators summation
@c ?operators summation
@cindex summation

A summation expression has the form
@example
      sum [<var> = <start> : <end>] <expression>
@end example

<var> is treated as an integer variable that takes on successive integral
values from <start> to <end>.  For each of these, the current value of
<expression> is added to a running total whose final value becomes the value
of the summation expression.
Examples:
@example
      print sum [i=1:10] i
          55.
      # Equivalent to plot 'data' using 1:($2+$3+$4+$5+$6+...)
      plot 'data' using 1 : (sum [col=2:MAXCOL] column(col))
@end example

It is not necessary that <expression> contain the variable <var>.
Although <start> and <end> can be specified as variables or expressions,
their value cannot be changed dynamically as a side-effect of carrying
out the summation. If <end> is less than <start> then the value of the
summation is zero.

@node Gnuplot-defined_variables, User-defined_variables_and_functions, summation, Expressions
@subsection Gnuplot-defined variables

@c ?expressions gnuplot-defined
@cindex gnuplot-defined

@c ?gnuplot-defined variables
@cindex GPVAL

@cindex gpval

Gnuplot maintains a number of read-only variables that reflect the current
internal state of the program and the most recent plot. These variables begin
with the prefix "GPVAL_".
Examples include GPVAL_TERM, GPVAL_X_MIN, GPVAL_X_MAX, GPVAL_Y_MIN.
Type `show variables all` to display the complete list and current values.
Values related to axes parameters (ranges, log base) are values used during the
last plot, not those currently `set`.

Example:  To calculate the fractional screen coordinates of the point [X,Y]
@example
     GRAPH_X = (X - GPVAL_X_MIN) / (GPVAL_X_MAX - GPVAL_X_MIN)
     GRAPH_Y = (Y - GPVAL_Y_MIN) / (GPVAL_Y_MAX - GPVAL_Y_MIN)
     SCREEN_X = GPVAL_TERM_XMIN + GRAPH_X * (GPVAL_TERM_XMAX - GPVAL_TERM_XMIN)
     SCREEN_Y = GPVAL_TERM_YMIN + GRAPH_Y * (GPVAL_TERM_YMAX - GPVAL_TERM_YMIN)
     FRAC_X = SCREEN_X * GPVAL_TERM_SCALE / GPVAL_TERM_XSIZE
     FRAC_Y = SCREEN_Y * GPVAL_TERM_SCALE / GPVAL_TERM_YSIZE

@end example

@cindex errors

@cindex error state

The read-only variable GPVAL_ERRNO is set to a non-zero value if any gnuplot
command terminates early due to an error.  The most recent error message is
stored in the string variable GPVAL_ERRMSG.  Both GPVAL_ERRNO and GPVAL_ERRMSG
can be cleared using the command `reset errors`.

Interactive terminals with `mouse` functionality maintain read-only variables
with the prefix "MOUSE_".  See `mouse variables` for details.

The @ref{fit} mechanism uses several variables with names that begin "FIT_".  It
is safest to avoid using such names.  When using `set fit errorvariables`, the
error for each fitted parameter will be stored in a variable named like the
parameter, but with "_err" appended.  See the documentation on @ref{fit} and
@ref{fit} for details.

See `user-defined variables`, `reset errors`, `mouse variables`, and @ref{fit}.


@node User-defined_variables_and_functions, arrays, Gnuplot-defined_variables, Expressions
@subsection User-defined variables and functions

@c ?expressions user-defined
@c ?functions user-defined
@c ?user-defined variables
@cindex user-defined

@cindex variables

New user-defined variables and functions of one through twelve variables may
be declared and used anywhere, including on the `plot` command itself.

User-defined function syntax:
@example
      <func-name>( <dummy1> @{,<dummy2>@} ... @{,<dummy12>@} ) = <expression>

@end example

where <expression> is defined in terms of <dummy1> through <dummy12>.
This form of function definition is limited to a single line.
More complicated multi-line functions can be defined using the function block
mechanism (new in this version). See `function blocks`.

User-defined variable syntax:
@example
      <variable-name> = <constant-expression>

@end example

Examples:
@example
      w = 2
      q = floor(tan(pi/2 - 0.1))
      f(x) = sin(w*x)
      sinc(x) = sin(pi*x)/(pi*x)
      delta(t) = (t == 0)
      ramp(t) = (t > 0) ? t : 0
      min(a,b) = (a < b) ? a : b
      comb(n,k) = n!/(k!*(n-k)!)
      len3d(x,y,z) = sqrt(x*x+y*y+z*z)
      plot f(x) = sin(x*a), a = 0.2, f(x), a = 0.4, f(x)

@end example

@example
      file = "mydata.inp"
      file(n) = sprintf("run_%d.dat",n)

@end example

The final two examples illustrate a user-defined string variable and a
user-defined string function.

@cindex NaN

@cindex pi

Note that the variables `pi` (3.14159...) and @ref{NaN} (IEEE "Not a Number") are
already defined.  You can redefine these to something else if you really need
to. The original values can be recovered by setting:

@example
      NaN = GPVAL_NaN
      pi  = GPVAL_pi

@end example

Other variables may be defined under various gnuplot operations like mousing in
interactive terminals or fitting; see `gnuplot-defined variables` for details.

You can check for existence of a given variable V by the exists("V")
expression. For example
@example
      a = 10
      if (exists("a")) print "a is defined"
      if (!exists("b")) print "b is not defined"

@end example

Valid names are the same as in most programming languages: they must begin
with a letter, but subsequent characters may be letters, digits, or "_".

Each function definition is made available as a special string-valued
variable with the prefix 'GPFUN_'.

Example:
@example
      set label GPFUN_sinc at graph .05,.95

@end example

See @ref{functions}, @ref{functions}, `gnuplot-defined variables`, @ref{macros},
@ref{value}.

@node arrays,  , User-defined_variables_and_functions, Expressions
@subsection arrays

@cindex arrays

@cindex cardinality

Arrays are implemented as indexed lists of user variables.  The elements in an
array are not limited to a single type of variable.  Arrays must be created
explicitly before being referenced. The size of an array cannot be changed
after creation.  Array elements are initially undefined unless they are
provided in the array declaration.
In most places an array element can be used instead of a named user variable.

The cardinality (number of elements) of array A is given by the expression |A|.

Examples:
@example
     array A[6]
     A[1] = 1
     A[2] = 2.0
     A[3] = @{3.0, 3.0@}
     A[4] = "four"
     A[6] = A[2]**3
     array B[6] = [ 1, 2.0, A[3], "four", , B[2]**3 ]
     array C = split("A B C D E F")

@end example

@example
     do for [i=1:6] @{ print A[i], B[i] @}
         1 1
         2.0 2.0
         @{3.0, 3.0@} @{3.0, 3.0@}
         four four
         <undefined> <undefined>
         8.0 8.0

@end example

Note: Arrays and variables share the same namespace.  For example, assignment
of a string to a variable named FOO will destroy any previously created array
with name FOO.

The name of an array can be used in a `plot`, `splot`, @ref{fit}, or `stats`
command.  This is equivalent to providing a file in which column 1 holds the
array index (from 1 to size), column 2 holds the value of real(A[i]) and
column 3 holds the value of imag(A[i]).

Example:
@example
     array A[200]
     do for [i=1:200] @{ A[i] = sin(i * pi/100.) @}
     plot A title "sin(x) in centiradians"

@end example

When plotting the imaginary component of complex array values, it may be
referenced either as imag(A[$1]) or as $3.  These two commands are equivalent

@example
     plot A using (real(A[$1])) : (imag(A[$1]))
     plot A using 2:3

@end example


@menu
* Array_functions::
* Array_indexing::
@end menu

@node Array_functions, Array_indexing, arrays, arrays
@subsubsection Array functions

@c ?arrays functions
@c ?arrays slice
@cindex slice

@cindex split
@findex split


Starting with gnuplot version 6, an array can be passed to a function or
returned by a function.  For example a simple dot-product function acting on
two equal-sized numerical arrays could be defined:

@example
     dot(A,B) = (|A| != |B|) ? NaN : sum [i=1:|A|] A[i] * B[i]

@end example

Built-in functions that return an array include the slice operation
array[min:max] and the index retrieval function index(Array,value).

@example
     T = split("A B C D E F")
     U = T[3:4]
     print T
        [ "A", "B", "C", "D", "E", "F" ]
     print U
        [ "C", "D" ]
     print index( T, "D" )
        4

@end example

Note that T and U in this example are now arrays, whether or not they had been
previously declared.


@node Array_indexing,  , Array_functions, arrays
@subsubsection Array indexing

@c ?arrays indexing
@cindex index

Array indices run from 1 to N for an array with N elements.
Element i of array A is accessed by A[i].
The built-in function `index(Array, <value>)` returns an integer i such that
A[i] is equal to <value>, where <value> may be any expression that evaluates
to a number (integer, real, or complex) or a string. The array element must
match in both type and value.  A return of 0 indicates that no match was found.

@example
    array A = [ 4.0, 4, "4" ]
    print index( A, 4 )
          2
    print index( A, 2.+2. )
          1
    print index( A, "D4"[2:2] )
          3

@end example


@node Fonts, Glossary, Expressions, Gnuplot
@section Fonts

@cindex fonts

Gnuplot does not provide any fonts of its own. It relies on external font
handling, the details of which unfortunately vary from one terminal type to
another. Brief documentation of font mechanisms that apply to more than one
terminal type is given here. For information on font use by other individual
terminals, see the documentation for that terminal.

Although it is possible to include non-alphabetic symbols by temporarily
switching to a special font, e.g. the Adobe Symbol font, the preferred method
is now to choose UTF-8 encoding and treat the symbol like any other character.
Alternatively you can specify the unicode entry point for the desired symbol
as an escape sequence in enhanced text mode.
See @ref{encoding}, `unicode`, @ref{locale}, and `escape sequences`.


@menu
* cairo_(pdfcairo::
* gd_(png::
* postscript__(also_encapsulated_postscript_*.eps)::
@end menu

@node cairo_(pdfcairo, gd_(png, Fonts, Fonts
@subsection cairo (pdfcairo, pngcairo, epscairo, wxt terminals)

@c ?fonts cairo
@cindex fontconfig

@c ?fonts fontconfig
@cindex fonts

@cindex pdf
@tmindex pdf


@cindex png
@tmindex png


@cindex wxt
@tmindex wxt


Some terminals, including all the cairo-based terminals,  access fonts via the
fontconfig system library.  Please see the
@uref{http://fontconfig.org/fontconfig-user.html,fontconfig user manual.
}
It is usually sufficient in gnuplot to request a font by a generic name and
size, letting fontconfig substitute a similar font if necessary. The following
will probably all work:
@example
     set term pdfcairo font "sans,12"
     set term pdfcairo font "Times,12"
     set term pdfcairo font "Times-New-Roman,12"

@end example


@node gd_(png, postscript__(also_encapsulated_postscript_*.eps), cairo_(pdfcairo, Fonts
@subsection gd (png, gif, jpeg, sixel terminals)

@cindex gd

@c ?fonts gd
@cindex fonts

@cindex png
@tmindex png


@cindex jpeg

@cindex gif

@cindex sixel

Font handling for the png, gif, jpeg, and sixelgd terminals is done by the
libgd library.  At a minimum it provides five basic fonts named `tiny`,
`small`, `medium`, `large`, and `giant` that cannot be scaled or rotated.
Use one of these keywords instead of the `font` keyword. E.g.
@example
     set term png tiny

@end example

On many systems libgd can also use generic font handling provided by the
fontconfig tools (see `fontconfig`).
On most systems without fontconfig, libgd provides access to Adobe fonts
(*.pfa *.pfb) and to TrueType fonts (*.ttf).  You must give the name of the
font file, not the name of the font inside it, in the form "<face> @{,<size>@}".
<face> is either the full pathname to the font file, or the first part of a
filename in one of the directories listed in the GDFONTPATH environmental
variable. That is, 'set term png font "Face"' will look for a font file named
either <somedirectory>/Face.ttf or <somedirectory>/Face.pfa.
For example, if GDFONTPATH contains `/usr/local/fonts/ttf:/usr/local/fonts/pfa`
then the following pairs of commands are equivalent
@example
     set term png font "arial"
     set term png font "/usr/local/fonts/ttf/arial.ttf"
     set term png font "Helvetica"
     set term png font "/usr/local/fonts/pfa/Helvetica.pfa"
@end example

To request a default font size at the same time:
@example
     set term png font "arial,11"

@end example

If no specific font is requested in the "set term" command, gnuplot checks
the environmental variable GNUPLOT_DEFAULT_GDFONT.

@node postscript__(also_encapsulated_postscript_*.eps),  , gd_(png, Fonts
@subsection postscript  (also encapsulated postscript *.eps)

@c ?fonts postscript
@cindex fonts

@cindex postscript

@cindex eps

PostScript font handling is done by the printer or viewing program.
Gnuplot can create valid PostScript or encapsulated PostScript (*.eps) even if
no fonts at all are installed on your computer.  Gnuplot simply refers to the
font by name in the output file, and assumes that the printer or viewing
program will know how to find or approximate a font by that name.

All PostScript printers or viewers should know about the standard set of Adobe
fonts `Times-Roman`, `Helvetica`, `Courier`, and `Symbol`.  It is likely that
many additional fonts are also available, but the specific set depends on your
system or printer configuration. Gnuplot does not know or care about this;
the output *.ps or *.eps files that it creates will simply refer to whatever
font names you request.

Thus
@example
     set term postscript eps font "Times-Roman,12"
@end example

will produce output that is suitable for all printers and viewers.

On the other hand
@example
     set term postscript eps font "Garamond-Premier-Pro-Italic"
@end example

will produce a valid PostScript output file, but since it refers to a
specialized font only some printers or viewers will be able to display the
exact font that was requested.  Most will substitute a different font.

However, it is possible to embed a specific font in the output file so that
all printers will be able to use it. This requires that the a suitable font
description file is available on your system. Note that some font files require
specific licensing if they are to be embedded in this way.
See `postscript fontfile` for more detailed description and examples.

@node Glossary, inline_data_and_datablocks, Fonts, Gnuplot
@section Glossary

@cindex glossary

@cindex terminal
@opindex terminal


@cindex screen

@cindex record

@cindex block

As `gnuplot` has evolved over more than 30 years, the meaning of certain words
used in commands and in the documentation may have diverged from current common
usage.  This section explains how some of these terms are used in `gnuplot`.

The term "terminal" refers to an output mode, not to the thing you are typing
on.  For example, the command `set terminal pdf` means that subsequent plotting
commands will produce pdf ouput.  Usually you would want to accompany this with
a `set output "filename"` command to control where the pdf output is written.

A "page" or "screen" or "canvas" is the entire area addressable by `gnuplot`.
On a desktop it is a full window; on a plotter, it is a single sheet of paper.

When discussing data files, the term "record" denotes a single line of text in
the file, that is, the characters between newline or end-of-record characters.
A "point" is the datum extracted from a single record.
A "block" of data is a set of consecutive records delimited by blank lines.
A line, when referred to in the context of a data file, is a subset of a block.
Note that the term "data block" may also be used to refer to a named block
of inline data (see `datablocks`).


@node inline_data_and_datablocks, iteration, Glossary, Gnuplot
@section inline data and datablocks

@c ?inline data
@cindex inline

@c ?data inline
@cindex datablocks

@c ?data datablocks
There are two mechanisms for embedding data into a stream of gnuplot commands.
If the special filename '-' appears in a plot command, then the lines
immediately following the plot command are interpreted as inline data.
See @ref{special-filenames}.  Data provided in this way can only be used once, by
the plot command it follows.

The second mechanism defines a named data block as a here-document.  The named
data is persistent and may be referred to by more than one plot command.
Example:
@example
     $Mydata << EOD
     11 22 33 first line of data
     44 55 66 second line of data
     # comments work just as in a data file
     77 88 99
     EOD
     stats $Mydata using 1:3
     plot $Mydata using 1:3 with points, $Mydata using 1:2 with impulses

@end example

Data block names must begin with a $ character, which distinguishes them from
other types of persistent variables.  The end-of-data delimiter (EOD in the
example) may be any sequence of alphanumeric characters.

For a parallel mechanism that stores executable commands rather than data in
a named block, see `function blocks`.

The storage associated with named data blocks can be released using `undefine`
command. `undefine $*` frees all named data and function blocks at once.

@node iteration, linetypes, inline_data_and_datablocks, Gnuplot
@section iteration

@cindex iteration

@cindex iterate

gnuplot supports command iteration and block-structured if/else/while/do
constructs.  See @ref{if}, `while`, and `do`.
Simple iteration is possible inside `plot` or `set` commands.
See `plot for`.  General iteration spanning multiple
commands is possible using a block construct as shown below.
For a related new feature, see the @ref{summation} expression type.
Here is an example using several of these new syntax features:
@example
      set multiplot layout 2,2
      fourier(k, x) = sin(3./2*k)/k * 2./3*cos(k*x)
      do for [power = 0:3] @{
          TERMS = 10**power
          set title sprintf("%g term Fourier series",TERMS)
          plot 0.5 + sum [k=1:TERMS] fourier(k,x) notitle
      @}
      unset multiplot

@end example

@cindex iteration-specifier

Iteration is controlled by an iteration specifier with syntax

@example
     for [<var> in "string of N elements"]

@end example

or

@example
     for [<var> = <start> : <end> @{ : <increment> @}]

@end example

In the first case <var> is a string variable that successively evaluates to
single-word substrings 1 to N of the string in the iteration specifier.
In the second case <start>, <end>, and <increment> are integers or integer
expressions.

@cindex scope

The scope of the iteration variable is private to that iteration. See `scope`.
You cannot permanently change the value of the iteration variable inside the
iterated clause.  If the iteration variable has a value prior to iteration,
that value will be retained or restored at the end of the iteration.
For example, the following commands will print 1 2 3 4 5 6 7 8 9 10 A.

@example
     i = "A"
     do for [i=1:10] @{ print i; i=10; @}
     print i

@end example


@node linetypes, layers, iteration, Gnuplot
@section linetypes, colors, and styles

@cindex linetypes

@cindex colors

In very old gnuplot versions, each terminal type provided a set of distinct
"linetypes" that could differ in color, in thickness, in dot/dash pattern, or
in some combination of color and dot/dash.  These colors and patterns were not
guaranteed to be consistent across different terminal types although most
used the color sequence red/green/blue/magenta/cyan/yellow.  You can select
this old behaviour via the command `set colorsequence classic`, but by default
gnuplot now uses a terminal-independent sequence of 8 colors.

You can further customize the sequence of linetype properties interactively or
in an initialization file.  See `set linetype`.  Several sample initialization
files are provided in the distribution package.

The current linetype properties for a particular terminal can be previewed by
issuing the `test` command after setting the terminal type.

Successive functions or datafiles plotted by a single command will be assigned
successive linetypes in the current default sequence.  You can override this
for any individual function, datafile, or plot element by giving explicit line
properties in the plot command.

Examples:

@example
     plot "foo", "bar"                 # plot two files using linetypes 1, 2
     plot sin(x) linetype 4            # use linetype color 4

@end example

In general, colors can be specified using named colors, rgb (red, green, blue)
components, hsv (hue, saturation, value) components, or a coordinate along the
current pm3d palette.  The keyword `linecolor` may be abbreviated to `lc`.

Examples:

@example
     plot sin(x) lc rgb "violet"       # use one of gnuplot's named colors
     plot sin(x) lc rgb "#FF00FF"      # explicit RGB triple in hexadecimal
     plot sin(x) lc palette cb -45     # whatever color corresponds to -45
                                       # in the current cbrange of the palette
     plot sin(x) lc palette frac 0.3   # fractional value along the palette

@end example

See @ref{colorspec}, @ref{colornames}, `hsv`, @ref{palette}, @ref{cbrange}.
See also @ref{monochrome}.

Linetypes also have an associated dot-dash pattern although not all terminal
types are capable of using it.  You can specify the dot-dash pattern
independent of the line color. See @ref{dashtype}.


@menu
* colorspec::
* dashtype::
* linestyles_vs_linetypes::
* special_linetypes::
@end menu

@node colorspec, dashtype, linetypes, linetypes
@subsection colorspec

@cindex colorspec

@cindex colors

@cindex lc

@cindex linecolor

@cindex tc

@cindex textcolor

@cindex fillcolor

Many commands allow you to specify a linetype with an explicit color.

Syntax:

@example
      ... @{linecolor | lc@} @{"colorname" | <colorspec> | <n>@}
      ... @{textcolor | tc@} @{<colorspec> | @{linetype | lt@} <n>@}
      ... @{fillcolor | fc@} @{<colorspec> | linetype <n> | linestyle <n>@}

@end example

where <colorspec> has one of the following forms:

@example
      rgbcolor "colorname"    # e.g. "blue"
      rgbcolor "0xRRGGBB"     # string containing hexadecimal constant
      rgbcolor "0xAARRGGBB"   # string containing hexadecimal constant
      rgbcolor "#RRGGBB"      # string containing hexadecimal in x11 format
      rgbcolor "#AARRGGBB"    # string containing hexadecimal in x11 format
      rgbcolor <integer val>  # integer value representing AARRGGBB
      rgbcolor variable       # integer value is read from input file
      palette frac <val>      # <val> runs from 0 to 1
      palette cb <value>      # <val> lies within cbrange
      palette z
      palette <colormap>      # use named colormap rather than current palette
      variable                # color index is read from input file
      background or bgnd      # background color
      black

@end example

The "<n>" is the linetype number the color of which is used, see `test`.

"colorname" refers to one of the color names built in to gnuplot. For a list
of the available names, see @ref{colornames}.

Hexadecimal constants can be given in quotes as "#RRGGBB" or "0xRRGGBB", where
RRGGBB represents the red, green, and blue components of the color and must be
between 00 and FF.  For example, magenta = full-scale red + full-scale blue
could be represented by "0xFF00FF", which is the hexadecimal representation of
(255 << 16) + (0 << 8) + (255).

"#AARRGGBB" represents an RGB color with an alpha channel (transparency)
value in the high bits. An alpha value of 0 represents a fully opaque color;
i.e., "#00RRGGBB" is the same as "#RRGGBB".  An alpha value of 255 (FF)
represents full transparency.

For a callable function that converts any of these forms to a 32bit
integer representation of the color, see `expressions functions rgbcolor`.

The color palette is a linear gradient of colors that smoothly maps a
single numerical value onto a particular color.  Two such mappings are always
in effect. `palette frac`  maps a fractional value between 0 and 1 onto the
full range of the color palette.  `palette cb` maps the range of the color
axis onto the same palette.  See @ref{cbrange}.  See also `set colorbox`.
You can use either of these to select a constant color from the current
palette.

"palette z" maps the z value of each plot segment or plot element into the
cbrange mapping of the palette. This allows smoothly-varying color along a
3d line or surface. It also allows coloring 2D plots by palette values read
from an extra column of data (not all 2D plot styles allow an extra column).
@cindex bgnd

@cindex black

There are two special color specifiers: `background` (short form `bgnd`)
for background color and `black`.

@menu
* background_color::
* linecolor_variable::
* palette_::
* rgbcolor_variable::
@end menu

@node background_color, linecolor_variable, colorspec, colorspec
@subsubsection background color

@cindex background

@cindex bgnd

Most terminals allow you to set an explicit background color for the plot.
The special linetype `background` (short form `bgnd`) will draw in this color,
and is also recognized as a color name.
Examples:
@example
     # This will erase a section of the canvas by writing over it in the
     # background color
     set term wxt background rgb "gray75"
     set object 1 rectangle from x0,y0 to x1,y1 fillstyle solid fillcolor bgnd
     # Draw an "invisible" line at y=0, erasing whatever was underneath
     plot 0 lt background

@end example

@node linecolor_variable, palette_, background_color, colorspec
@subsubsection linecolor variable

@c ?linecolor variable
@c ?linestyle variable
@c ?lc variable
@c ?ls variable
@c ?textcolor variable
@c ?tc variable
@c ?variable linecolor
`lc variable` tells the program to use the value read from one column of the
input data as a linetype index, and use the color belonging to that linetype.
This requires a corresponding additional column in the `using` specifier.
`ls variable` does the same except the value read from the input data stream
is interpreted as the index of a linestyle rather than a linetype.
Text colors can be set similarly using `tc variable`.

Examples:
@example
      # Use the third column of data to assign colors to individual points
      plot 'data' using 1:2:3 with points lc variable

@end example

@example
      # A single data file may contain multiple sets of data, separated by two
      # blank lines.  Each data set is assigned as index value (see @ref{index})
      # that can be retrieved via the `using` specifier `column(-2)`.
      # See `pseudocolumns`.  This example uses to value in column -2 to
      # draw each data set in a different line color.
      plot 'data' using 1:2:(column(-2)) with lines lc variable

@end example


@node palette_, rgbcolor_variable, linecolor_variable, colorspec
@subsubsection palette

@c ?colorspec palette
Syntax
@example
      ... @{lc|fc|tc@} palette @{z@}
      ... @{lc|fc|tc@} palette frac <fraction>
      ... @{lc|fc|tc@} palette cb <fixed z-value>
      ... fc palette <colormap>

@end example

The palette defines a range of colors with gray values between 0 and 1.
`palette frac <fraction>` selects the color with gray value <fraction>.

`palette cb <z-value>` selects the single color whose fractional gray value
is (z - cbmin) / (cbmax - cbmin).

@ref{palette} and `palette z` both map the z coordinate of the plot element being
colored onto the current palette.  If z is outside cbrange it is by default
mapped to palette fraction 0 or palette fraction 1.  If the option
`set pm3d noclipcb` is set, then quadrangles in a pm3d plot whose z values
are out of range will not be drawn at all.

`fillcolor palette <colormap>` maps the z coordinate of a plot element onto
a previously saved named colormap instead of using the current palette.
See @ref{colormap}.

If the colormap has a separate range associated with it, that range is used
to map z values analogous to the use of cbrange to map the standard palette.
If there is no separate range for this colormap then cbrange is used.


@node rgbcolor_variable,  , palette_, colorspec
@subsubsection rgbcolor variable

@c ?rgbcolor variable
@c ?lc rgbcolor variable
@c ?tc rgbcolor variable
@c ?variable rgbcolor
@c ?variable textcolor
You can assign a separate color for each data point, line segment, or label in
your plot.  `lc rgbcolor variable` tells the program to read RGB color
information for each line in the data file. This requires a corresponding
additional column in the `using` specifier.  The extra column is interpreted as
a 24-bit packed RGB triple. If the value is provided directly in the data file
it is easiest to give it as a hexadecimal value (see `rgbcolor`).
Alternatively, the `using` specifier can contain an expression that evaluates
to a 24-bit RGB color as in the example below.
Text colors are similarly set using `tc rgbcolor variable`.

Example:
@example
      # Place colored points in 3D at the x,y,z coordinates corresponding to
      # their red, green, and blue components
      rgb(r,g,b) = 65536 * int(r) + 256 * int(g) + int(b)
      splot "data" using 1:2:3:(rgb($1,$2,$3)) with points lc rgb variable

@end example


@node dashtype, linestyles_vs_linetypes, colorspec, linetypes
@subsection dashtype

@cindex dashtype
@opindex dashtype


@cindex dashtype
@opindex dashtype


The dash pattern (@ref{dashtype}) is a separate property associated with each line,
analogous to `linecolor` or `linewidth`.  It is not necessary to place the
current terminal in a special mode just to draw dashed lines.
I.e. the old command `set term <termname> @{solid|dashed@}` is now ignored.

All lines have the property `dashtype solid` unless you specify otherwise.
You can change the default for a particular linetype using the command
`set linetype` so that it affects all subsequent commands, or you can include
the desired dashtype as part of the `plot` or other command.

Syntax:
@example
      dashtype N          # predefined dashtype invoked by number
      dashtype "pattern"  # string containing a combination of the characters
                          # dot (.) hyphen (-) underscore(_) and space.
      dashtype (s1,e1,s2,e2,s3,e3,s4,e4)  # dash pattern specified by 1 to 4
                          # numerical pairs <solid length>, <emptyspace length>

@end example

Example:
@example
      # Two functions using linetype 1 but distinguished by dashtype
      plot f1(x) with lines lt 1 dt solid, f2(x) with lines lt 1 dt 3

@end example

Some terminals support user-defined dash patterns in addition to whatever
set of predefined dash patterns they offer.

Examples:
@example
     plot f(x) dt 3            # use terminal-specific dash pattern 3
     plot f(x) dt ".. "        # construct a dash pattern on the spot
     plot f(x) dt (2,5,2,15)   # numerical representation of the same pattern
     set dashtype 11 (2,4,4,7) # define new dashtype to be called by index
     plot f(x) dt 11           # plot using our new dashtype

@end example

If you specify a dash pattern using a string the program will convert this to
a sequence of <solid>,<empty> pairs. Dot "." becomes (2,5), dash "-" becomes
(10,10), underscore "_" becomes (20,10), and each space character " " adds 10
to the previous <empty> value.  The command @ref{dashtype} will show both the
original string and the converted numerical sequence.


@node linestyles_vs_linetypes, special_linetypes, dashtype, linetypes
@subsection linestyles vs linetypes

@c ?linestyles vs linetypes
A `linestyle` is a temporary association of properties linecolor, linewidth,
dashtype, and pointtype.  It is defined using the command `set style line`.
Once you have defined a linestyle, you can use it in a plot command to control
the appearance of one or more plot elements.  In other words, it is just like
a linetype except for its lifetime.  Whereas `linetypes` are permanent (they
last until you explicitly redefine them), `linestyles` last until the next
reset of the graphics state.

Examples:

@example
     # define a new line style with terminal-independent color cyan,
     # linewidth 3, and associated point type 6 (a circle with a dot in it).
     set style line 5 lt rgb "cyan" lw 3 pt 6
     plot sin(x) with linespoints ls 5          # user-defined line style 5

@end example


@node special_linetypes,  , linestyles_vs_linetypes, linetypes
@subsection special linetypes

@c ?linetypes special linetypes
@cindex special_linetypes

@cindex nodraw

@cindex bgnd

@cindex background

@cindex black

A few special (non-numerical) linetypes are recognized.

`lt black` specifies a solid black line.

`lt background` or `lt bgnd` specifies a solid line with the background color
of the current terminal. See `background`.

`lt nodraw` skips drawing the line altogether.  This is useful in conjunction
with plot style @ref{linespoints}.  It allows you to suppress the line component
of the plot while retaining point properties that are available only in this
plot style.  For example
@example
     plot f(x) with linespoints lt nodraw pointinterval -3
@end example

will draw only every third point and will isolate it by placing a small
circle of background color underneath it.  See @ref{linespoints}.
`lt nodraw` may also be used to suppress a particular set of lines that would
otherwise be drawn automatically. For example you could suppress certain
contour levels in a contour plot by setting their linetype to `nodraw`.


@node layers, mouse_input, linetypes, Gnuplot
@section layers

@cindex layers

@cindex behind

@cindex front

@cindex back

A gnuplot plot is built up by drawing its various components in a fixed order.
This order can be modified by assigning some components to a specific layer
using the keywords `behind`, `back`, or `front`. For example, to replace the
background color of the plot area you could define a colored rectangle with the
attribute `behind`.
@example
     set object 1 rectangle from graph 0,0 to graph 1,1 fc rgb "gray" behind
@end example

The order of drawing is
@example
     behind
     back
     the plot itself
     the plot legend (`key`)
     front
@end example

Within each layer elements are drawn in the order
@example
     grid, axis, and border elements
     pixmaps in numerical order
     objects (rectangles, circles, ellipses, polygons) in numerical order
     labels in numerical order
     arrows in numerical order
@end example

In the case of multiple plots on a single page (multiplot mode) this order
applies separately to each component plot, not to the multiplot as a whole.

An exception to this is that several TeX-based terminals (e.g. pslatex,
cairolatex) accumulate all text elements in one output stream and graphics
in a separate output stream;  the text and graphics are then combined to
yield the final figure. In general this leaves each text element either
completely behind or completely in front of the graphics.


@node mouse_input, Persist, layers, Gnuplot
@section mouse input

@c ?mouse input
Many terminals allow interaction with the current plot using the mouse. Some
also support the definition of hotkeys to activate pre-defined functions by
hitting a single key while the mouse focus is in the active plot window.
It is even possible to combine mouse input with `batch` command scripts, by
invoking the command `pause mouse` and then using the mouse variables returned
by mouse clicking as parameters for subsequent scripted actions.
See `bind` and `mouse variables`.  See also the command `set mouse`.

@menu
* bind::
* Mouse_variables::
@end menu

@node bind, Mouse_variables, mouse_input, mouse_input
@subsection bind

@c ?commands bind
@cindex hotkey

@cindex hotkeys

@cindex bind
@opindex bind


Syntax:
@example
      bind @{allwindows@} [<key-sequence>] ["<gnuplot commands>"]
      bind <key-sequence> ""
      reset bind

@end example

The `bind` allows defining or redefining a hotkey, i.e. a sequence of gnuplot
commands which will be executed when a certain key or key sequence is pressed
while the driver's window has the input focus. Note that `bind` is only
available if gnuplot was compiled with `mouse` support and it is used by all
mouse-capable terminals. A user-specified binding supersedes any builtin
bindings, except that <space> and 'q' cannot normally be rebound. For an
exception, see `bind space`.

Mouse button bindings are only active in 2D plots.

You get the list of all hotkeys by typing `show bind` or `bind` or by typing
the hotkey 'h' in the graph window.

Key bindings are restored to their default state by `reset bind`.

Note that multikey-bindings with modifiers must be given in quotes.

Normally hotkeys are only recognized when the currently active plot window
has focus. `bind allwindows <key> ...` (short form: `bind all <key> ...`)
causes the binding for <key> to apply to all gnuplot plot windows, active
or not.  In this case gnuplot variable MOUSE_KEY_WINDOW is set to the ID
of the originating window, and may be used by the bound command.

Examples:

- set bindings:

@example
    bind a "replot"
    bind "ctrl-a" "plot x*x"
    bind "ctrl-alt-a" 'print "great"'
    bind Home "set view 60,30; replot"
    bind all Home 'print "This is window ",MOUSE_KEY_WINDOW'

@end example

- show bindings:
@example
    bind "ctrl-a"          # shows the binding for ctrl-a
    bind                   # shows all bindings
    show bind              # show all bindings

@end example

- remove bindings:
@example
    bind "ctrl-alt-a" ""   # removes binding for ctrl-alt-a
                             (note that builtins cannot be removed)
    reset bind             # installs default (builtin) bindings

@end example

- bind a key to toggle something:
@example
  v=0
  bind "ctrl-r" "v=v+1;if(v%2)set term x11 noraise; else set term x11 raise"

@end example

Modifiers (ctrl / alt) are case insensitive, keys not:
@example
    ctrl-alt-a == CtRl-alT-a
    ctrl-alt-a != ctrl-alt-A

@end example

List of modifiers (alt == meta):
@example
    ctrl, alt, shift (only valid for Button1 Button2 Button3)

@end example

List of supported special keys:

@example
   "BackSpace", "Tab", "Linefeed", "Clear", "Return", "Pause", "Scroll_Lock",
   "Sys_Req", "Escape", "Delete", "Home", "Left", "Up", "Right", "Down",
   "PageUp", "PageDown", "End", "Begin",

@end example

@example
   "KP_Space", "KP_Tab", "KP_Enter", "KP_F1", "KP_F2", "KP_F3", "KP_F4",
   "KP_Home", "KP_Left", "KP_Up", "KP_Right", "KP_Down", "KP_PageUp",
   "KP_PageDown", "KP_End", "KP_Begin", "KP_Insert", "KP_Delete", "KP_Equal",
   "KP_Multiply", "KP_Add", "KP_Separator", "KP_Subtract", "KP_Decimal",
   "KP_Divide",

@end example

@example
   "KP_1" - "KP_9", "F1" - "F12"

@end example

The following are window events rather than actual keys

@example
   "Button1" "Button2" "Button3" "Close"

@end example

See also help for `mouse`.

@menu
* bind_space::
@end menu

@node bind_space,  , bind, bind
@subsubsection bind space

@c ?commands bind space
@c ?bind space
If gnuplot was built with configuration option --enable-raise-console, then
typing <space> in the plot window raises gnuplot's command window. Maybe.
In practice this is highly system-dependent.  This hotkey can be changed to
ctrl-space by starting gnuplot as 'gnuplot -ctrlq', or by setting the
XResource 'gnuplot*ctrlq'.

@node Mouse_variables,  , bind, mouse_input
@subsection Mouse variables

@c ?mouse variables
When `mousing` is active, clicking in the active window will set several user
variables that can be accessed from the gnuplot command line. The coordinates
of the mouse at the time of the click are stored in MOUSE_X MOUSE_Y MOUSE_X2
and MOUSE_Y2. The mouse button clicked, and any meta-keys active at that time,
are stored in MOUSE_BUTTON MOUSE_SHIFT MOUSE_ALT and MOUSE_CTRL.  These
variables are set to undefined at the start of every plot, and only become
defined in the event of a mouse click in the active plot window. To determine
from a script if the mouse has been clicked in the active plot window, it is
sufficient to test for any one of these variables being defined.

@example
      plot 'something'
      pause mouse
      if (exists("MOUSE_BUTTON")) call 'something_else'; \
      else print "No mouse click."

@end example

It is also possible to track keystrokes in the plot window using the mousing
code.

@example
      plot 'something'
      pause mouse keypress
      print "Keystroke ", MOUSE_KEY, " at ", MOUSE_X, " ", MOUSE_Y

@end example

When `pause mouse keypress` is terminated by a keypress, then MOUSE_KEY will
contain the ascii character value of the key that was pressed. MOUSE_CHAR will
contain the character itself as a string variable.  If the pause command is
terminated abnormally (e.g. by ctrl-C or by externally closing the plot window)
then MOUSE_KEY will equal -1.

Note that after a zoom by mouse, you can read the new ranges as GPVAL_X_MIN,
GPVAL_X_MAX, GPVAL_Y_MIN, and GPVAL_Y_MAX, see `gnuplot-defined variables`.

@node Persist, Plotting, mouse_input, Gnuplot
@section Persist

@cindex persist

Many gnuplot terminals (aqua, pm, qt, x11, windows, wxt, ...) open separate
display windows on the screen into which plots are drawn.  The `persist` option
tells gnuplot to leave these windows open when the main program exits.
It has no effect on non-interactive terminal output.
For example if you issue the command

@example
     gnuplot -persist -e 'plot sinh(x)'

@end example

gnuplot will open a display window, draw the plot into it, and then exit,
leaving the display window containing the plot on the screen.
You can also specify `persist` or `nopersist` when you set a new terminal.

@example
     set term qt persist size 700,500

@end example

Depending on the terminal type, some mousing operations may still be possible
in the persistent window.  However operations like zoom/unzoom that require
redrawing the plot are not possible because the main program has exited.
If you want to leave a plot window open and fully mouseable after creating
the plot, for example when running gnuplot from a script file rather than
interactively, see `pause mouse close`.


@node Plotting, Plugins, Persist, Gnuplot
@section Plotting

@cindex plotting

There are four `gnuplot` commands which actually create a plot: `plot`,
`splot`, @ref{replot}, and @ref{refresh}.  Other commands control the layout, style,
and content of the plot that will eventually be created.
`plot` generates 2D plots. `splot` generates 3D plots (actually 2D projections,
of course). @ref{replot} reexecutes the previous `plot` or `splot` command.
@ref{refresh} is similar to @ref{replot} but it reuses any previously stored data
rather than rereading data from a file or input stream.

@cindex multiplot
@opindex multiplot


@cindex inset

@cindex subfigures

Each time you issue one of these four commands it will redraw the screen or
generate a new page of output containing all of the currently defined axes,
labels, titles, and all of the various functions or data sources listed in the
original plot command. If instead you need to place several complete plots next
to each other on the same page, e.g. to make a panel of sub-figures or to inset
a small plot inside a larger plot, use the command @ref{multiplot} to suppress
generation of a new page for each plot command.

Much of the general information about plotting can be found in the discussion
of `plot`; information specific to 3D can be found in the `splot` section.

`plot` operates in either rectangular or polar coordinates -- see `set polar`.
`splot` operates in Cartesian coordinates, but will accept azimuthal or
cylindrical coordinates on input. See @ref{mapping}.
@cindex axes

`plot` also lets you use each of the four borders -- x (bottom), x2 (top), y
(left) and y2 (right) -- as an independent axis.  The @ref{axes} option lets you
choose which pair of axes a given function or data set is plotted against.  A
full complement of `set` commands exists to give you complete control over
the scales and labeling of each axis.  Some commands have the name of an
axis built into their names, such as @ref{xlabel}.  Other commands have one
or more axis names as options, such as `set logscale xy`.  Commands and
options controlling the z axis have no effect on 2D graphs.

`splot` can plot surfaces and contours in addition to points and/or lines.
See @ref{isosamples} for information about defining the grid for a 3D function.
See @ref{datafile} for information about the requisite file structure for 3D
data. For contours see `set contour`, @ref{cntrlabel}, and @ref{cntrparam}.

In `splot`, control over the scales and labels of the axes are the same as
with `plot` except that there is also a z axis and labeling the x2 and y2 axes
is possible only for pseudo-2D plots created using `set view map`.

@node Plugins, Scope_of_variables, Plotting, Gnuplot
@section Plugins

@cindex plugins

The set of functions available for plotting or for evaluating expressions
can be extended through a plugin mechanism that imports executable functions
from a shared library.  For example, gnuplot versions through 5.4 did not
provide a built-in implementation of the upper incomplete gamma function
Q(a,x).
You could define an approximation directly in gnuplot like this:
@example
      Q(a,x) = 1. - igamma(a,x)
@end example

However this has inherently limited precision as igamma(a,x) approaches 1.
If you need a more accurate implementation, it would be better to provide one
via a plugin (see below).  Once imported, the function can be used just as any
other built-in or user-defined function in gnuplot.
See @ref{import}.

The gnuplot distribution includes source code and instructions for creating
a plugin library in the directory demo/plugin.  You can modify the simple
example file `demo_plugin.c` by replacing one or more of the toy example
functions with an implementation of the function you are interested in.
This could include invocation of functions from an external mathematical
library.

The demo/plugin directory also contains source for a plugin that implements
Q(a,x). As noted above, this plugin allows earlier versions of gnuplot to
provide the same function @ref{uigamma} as version 6.
@example
     import Q(a,x) from "uigamma_plugin"
     uigamma(a,x) = ((x<1 || x<a) ? 1.0-igamma(a,x) : Q(a,x))

@end example


@node Scope_of_variables, Start-up_(initialization), Plugins, Gnuplot
@section Scope of variables

@cindex scope

@c ?variables local
@cindex local
@cmindex local


@cindex global

Gnuplot variables are global except in the special cases listed below.
There is a single persistent list of active variables indexed by name.
Assignment to a variable creates or replaces an entry in that list.
The only way to remove a variable from that list is the `undefine` command.

Exception 1: The scope of the variable used in an iteration specifier is
private to that iteration.  You cannot permanently change the value of the
iteration variable inside the iterated clause.
If the iteration variable has a value prior to iteration, that value will
be retained or restored at the end of the iteration.
For example, the following commands will print 1 2 3 4 5 6 7 8 9 10 A.

@example
     i = "A"
     do for [i=1:10] @{ print i; i=10; @}
     print i

@end example

Exception 2: The parameter names used in defining a function are only
placeholders for the actual values that will be provided when the function
is called.  For example, any current or future values of x and y are not
relevant to the definition shown here, but A must exist as a global variable
when the function is later evaluated:

@example
     func(x,y) = A + (x+y)/2.

@end example

Exception 3: Variables declared with the `local` command.
The `local` qualifier (new in version 6) allows optional declaration of a
variable or array whose scope is limited to the execution of the code block
in which it is found.  This includes `load` and @ref{call} operations,
evaluation of a function block, and the code in curly brackets that follows
an @ref{if}, `else`, `do for`, or `while` condition.
If the name of a local variable duplicates the name of a global variable,
the global variable is shadowed until exit from the local scope.
EXPERIMENTAL: As currently implemented the scope of a local variable
extends into functions called from the code block it was declared in;
this includes @ref{call}, `load`, and function block invocation.
This will probably change in the future so that the scope is strictly
confined to the declaring code block.


@node Start-up_(initialization), String_constants, Scope_of_variables, Gnuplot
@section Start-up (initialization)

@cindex startup

@cindex start

@cindex start-up

@cindex initialization

@cindex .gnuplot

@cindex gnuplotrc

When gnuplot is run, it first looks for a system-wide initialization file
`gnuplotrc`.  The location of this file is determined when the program is built
and is reported by @ref{loadpath}.  The program then looks in the user's HOME
directory for a file called `.gnuplot` on Unix-like systems or `GNUPLOT.INI` on
other systems.  (OS/2 will look for it in the directory named in
the environment variable `GNUPLOT`; Windows will use `APPDATA`).
On Unix-like systems gnuplot additionally checks for the file
$XDG_CONFIG_HOME/gnuplot/gnuplotrc.

@node String_constants, Substitution_and_Command_line_macros, Start-up_(initialization), Gnuplot
@section String constants, string variables, and string functions

@cindex string

@cindex strings

In addition to string constants, most gnuplot commands also accept a string
variable, a string expression, or a function that returns a string.
For example, the following four methods of creating a plot all result in the
same plot title:

@example
      four = "4"
      graph4 = "Title for plot #4"
      graph(n) = sprintf("Title for plot #%d",n)

@end example

@example
      plot 'data.4' title "Title for plot #4"
      plot 'data.4' title graph4
      plot 'data.4' title "Title for plot #".four
      plot 'data.4' title graph(4)

@end example

Since integers are promoted to strings when operated on by the string
concatenation operator ('.' character), the following method also works:

@example
      N = 4
      plot 'data.'.N title "Title for plot #".N

@end example

In general, elements on the command line will only be evaluated as possible
string variables if they are not otherwise recognizable as part of the normal
gnuplot syntax. So the following sequence of commands is legal, although
probably should be avoided so as not to cause confusion:

@example
      plot = "my_datafile.dat"
      title = "My Title"
      plot plot title title

@end example

@menu
* substrings::
* string_operators::
* string_functions::
* string_encoding::
@end menu

@node substrings, string_operators, String_constants, String_constants
@subsection substrings

@c ?string substring
@cindex substrings

Substrings can be specified by appending a range specifier to any string,
string variable, or string-valued function.  The range specifier has the
form [begin:end], where begin is the index of the first character of the
substring and end is the index of the last character of the substring.
The first character has index 1.  The begin or end fields may be empty, or
contain '*', to indicate the true start or end of the original string.
Thus str[:] and str[*:*] both describe the full string str.
Example:
@example
     eos = strlen(file)
     if (file[eos-3:*] eq ".dat") @{
         set output file[1:eos-4] . ".png"
         plot file
     @}

@end example

There is also an equivalent function `substr( string, begin, end )`.

@node string_operators, string_functions, substrings, String_constants
@subsection string operators

@c ?string operators
Three binary operators require string operands: the string concatenation
operator ".", the string equality operator "eq" and the string inequality
operator "ne".  The following example will print TRUE.

@example
     if ("A"."B" eq "AB") print "TRUE"

@end example

@node string_functions, string_encoding, string_operators, String_constants
@subsection string functions

@c ?string functions
Gnuplot provides several built-in functions that operate on strings.
General formatting functions: see @ref{gprintf} @ref{sprintf}.
Time formatting functions: see @ref{strftime} @ref{strptime}.
String manipulation: see @ref{split}, `substr` @ref{strstrt} @ref{trim} `word` @ref{words}.

@node string_encoding,  , string_functions, String_constants
@subsection string encoding

@c ?string encoding
@cindex utf8

Gnuplot's built-in string manipulation functions are sensitive to utf-8
encoding (see @ref{encoding}). For example

@example
 set encoding utf8
 utf8string = "αβγ"
 strlen(utf8string) returns 3 (number of characters, not number of bytes)
 utf8string[2:2] evaluates to "β"
 strstrt(utf8string,"β") evaluates to 2

@end example


@node Substitution_and_Command_line_macros, Syntax, String_constants, Gnuplot
@section Substitution and Command line macros

@cindex substitution

When a command line to gnuplot is first read, i.e. before it is interpreted
or executed, two forms of lexical substitution are performed. These are
triggered by the presence of text in backquotes (ascii character 96) or
preceded by @@ (ascii character 64).

@menu
* Substitution_of_system_commands_in_backquotes::
* Substitution_of_string_variables_as_macros::
* String_variables::
@end menu

@node Substitution_of_system_commands_in_backquotes, Substitution_of_string_variables_as_macros, Substitution_and_Command_line_macros, Substitution_and_Command_line_macros
@subsection Substitution of system commands in backquotes

@c ?substitution backquotes
@cindex backquotes

@c ?shell commands
Command-line substitution is specified by a system command enclosed in
backquotes.  This command is spawned and the output it produces replaces
the backquoted text on the command line.  Exit status of the system command
is returned in variables GPVAL_SYSTEM_ERRNO and GPVAL_SYSTEM_ERRMSG.

Note: Internal carriage-return ('\r') and newline ('\n') characters are not
stripped from the substituted string.

Command-line substitution can be used anywhere on the `gnuplot` command
line except inside strings delimited by single quotes.

For example, these will generate labels with the current time and userid:
@example
      set label "generated on `date +%Y-%m-%d` by `whoami`" at 1,1
      set timestamp "generated on %Y-%m-%d by `whoami`"

@end example

This creates an array containing the names of files in the current directory:
@example
      FILES = split( "`ls -1`" )

@end example

@node Substitution_of_string_variables_as_macros, String_variables, Substitution_of_system_commands_in_backquotes, Substitution_and_Command_line_macros
@subsection Substitution of string variables as macros

@c ?substitution macros
@cindex macros
@opindex macros


@cindex exists
@findex exists


The character @@ is used to trigger substitution of the current value of a
string variable into the command line. The text in the string variable may
contain any number of lexical elements.  This allows string variables to be
used as command line macros.  Only string constants may be expanded using this
mechanism, not string-valued expressions.
For example:

@example
      style1 = "lines lt 4 lw 2"
      style2 = "points lt 3 pt 5 ps 2"
      range1 = "using 1:3"
      range2 = "using 1:5"
      plot "foo" @@range1 with @@style1, "bar" @@range2 with @@style2

@end example

The line containing @@ symbols is expanded on input, so that by the time it is
executed the effect is identical to having typed in full

@example
      plot "foo" using 1:3 with lines lt 4 lw 2, \
           "bar" using 1:5 with points lt 3 pt 5 ps 2

@end example

The function exists() may be useful in connection with macro evaluation.
The following example checks that C can safely be expanded as the name of
a user-defined variable:

@example
      C = "pi"
      if (exists(C)) print C," = ", @@C

@end example

Macro expansion does not occur inside either single or double quotes.
However macro expansion does occur inside backquotes.

Macro expansion is handled as the very first thing the interpreter does when
looking at a new line of commands and is only done once. Therefore, code like
the following will execute correctly:

@example
     A = "c=1"
     @@A

@end example

but this line will not, since the macro is defined on the same line
and will not be expanded in time

@example
     A = "c=1"; @@A   # will not expand to c=1

@end example

Macro expansion inside a bracketed iteration occurs before the loop is
executed; i.e. @@A will always act as the original value of A even if A itself
is reassigned inside the loop.

For execution of complete commands the @ref{evaluate} command may also be handy.

@node String_variables,  , Substitution_of_string_variables_as_macros, Substitution_and_Command_line_macros
@subsection String variables, macros, and command line substitution

@cindex mixing_macros_backquotes

@c ?substitution mixing_macros_backquotes
The interaction of string variables, backquotes and macro substitution is
somewhat complicated.  Backquotes do not block macro substitution, so

@example
      filename = "mydata.inp"
      lines = ` wc --lines @@filename | sed "s/ .*//" `

@end example

results in the number of lines in mydata.inp being stored in the integer
variable lines. And double quotes do not block backquote substitution, so

@example
      mycomputer = "`uname -n`"

@end example

results in the string returned by the system command `uname -n` being stored
in the string variable mycomputer.

However, macro substitution is not performed inside double quotes, so you
cannot define a system command as a macro and then use both macro and backquote
substitution at the same time.

@example
       machine_id = "uname -n"
       mycomputer = "`@@machine_id`"  # doesn't work!!

@end example

This fails because the double quotes prevent @@machine_id from being interpreted
as a macro. To store a system command as a macro and execute it later you must
instead include the backquotes as part of the macro itself.  This is
accomplished by defining the macro as shown below.  Notice that the sprintf
format nests all three types of quotes.

@example
      machine_id = sprintf('"`uname -n`"')
      mycomputer = @@machine_id

@end example

@node Syntax, Time/Date_data, Substitution_and_Command_line_macros, Gnuplot
@section Syntax

@cindex syntax

@cindex specify

@cindex punctuation

Options and any accompanying parameters are separated by spaces whereas lists
and coordinates are separated by commas.  Ranges are separated by colons and
enclosed in brackets [], text and file names are enclosed in quotes, and a
few miscellaneous things are enclosed in parentheses.

Commas are used to separate coordinates on the `set` commands `arrow`,
`key`, and `label`; the list of variables being fitted (the list after the
`via` keyword on the @ref{fit} command); lists of discrete contours or the loop
parameters which specify them on the @ref{cntrparam} command; the arguments
of the `set` commands @ref{dgrid3d}, @ref{dummy}, @ref{isosamples}, @ref{offsets}, @ref{origin},
@ref{samples}, @ref{size}, `time`, and @ref{view}; lists of tics or the loop parameters
which specify them; the offsets for titles and axis labels; parametric
functions to be used to calculate the x, y, and z coordinates on the `plot`,
@ref{replot} and `splot` commands; and the complete sets of keywords specifying
individual plots (data sets or functions) on the `plot`, @ref{replot} and `splot`
commands.

Parentheses are used to delimit sets of explicit tics (as opposed to loop
parameters) and to indicate computations in `using` specifiers of the @ref{fit},
`plot`, @ref{replot} and `splot` commands.

(Parentheses and commas are also used as usual in function notation.)

Square brackets are used to delimit ranges given in `set`, `plot`
or `splot` commands.

Colons are used to separate extrema in `range` specifications (whether they
are given on `set`, `plot` or `splot` commands) and to separate entries in
the `using` specifier of the `plot`, @ref{replot}, `splot` and @ref{fit} commands.

Semicolons are used to separate commands given on a single command line.

Curly braces are used in the syntax for enhanced text mode and to delimit
blocks in if/then/else statements.  They are also used to denote complex
numbers: @{3,2@} = 3 + 2i.

@menu
* quote_marks::
@end menu

@node quote_marks,  , Syntax, Syntax
@subsection quote marks

@cindex quotes

@c ?syntax quotes
Gnuplot uses three forms of quote marks for delimiting text strings,
double-quote (ascii 34), single-quote (ascii 39), and backquote (ascii 96).

Filenames may be entered with either single- or double-quotes.  In this
manual the command examples generally single-quote filenames and double-quote
other string tokens for clarity.

String constants and text strings used for labels, titles, or other plot
elements may be enclosed in either single quotes or double quotes. Further
processing of the quoted text depends on the choice of quote marks.

Backslash processing of special characters like \n (newline) and
\345 (octal character code) is performed only for double-quoted strings.
In single-quoted strings, backslashes are just ordinary characters.  To get
a single-quote (ascii 39) in a single-quoted string, it must be doubled.
Thus the strings "d\" s' b\\" and 'd" s'' b\' are completely equivalent.

Text justification is the same for each line of a multi-line string.
Thus the center-justified string
@example
      "This is the first line of text.\nThis is the second line."
@end example

will produce
@example
                       This is the first line of text.
                          This is the second line.
@end example

but
@example
      'This is the first line of text.\nThis is the second line.'
@end example

will produce
@example
          This is the first line of text.\nThis is the second line.

@end example

Enhanced text processing is performed for both double-quoted text and
single-quoted text.  See `enhanced text`.

Back-quotes are used to enclose system commands for substitution into the
command line.  See `substitution`.

@node Time/Date_data, Watchpoints_, Syntax, Gnuplot
@section Time/Date data

@cindex time/date

`gnuplot` supports the use of time and/or date information as input data.
This feature is activated by the commands `set xdata time`, `set ydata time`,
etc.

Internally all times and dates are converted to the number of seconds from
the year 1970.  The command @ref{timefmt} defines the default format for all
inputs: data files, ranges, tics, label positions -- anything that accepts a
time data value defaults to receiving it in this format.  Only one default
format can be in effect at a given time. Thus if both x and y data in a file
are time/date, by default they are interpreted in the same format. However
this default can be replaced when reading any particular file or column of
input using the `timecolumn` function in the corresponding `using` specifier.

The conversion to and from seconds assumes Universal Time (which is the same
as Greenwich Standard Time).  There is no provision for changing the time
zone or for daylight savings.  If all your data refer to the same time zone
(and are all either daylight or standard) you don't need to worry about these
things.  But if the absolute time is crucial for your application, you'll
need to convert to UT yourself.

Commands like @ref{xrange} will re-interpret the integer according to
@ref{timefmt}.  If you change @ref{timefmt}, and then `show` the quantity again, it
will be displayed in the new @ref{timefmt}.  For that matter, if you reset the
data type flag for that axis (e.g. @ref{xdata}), the quantity will be shown
in its numerical form.

The commands `set format` or `set tics format` define the format that will be
used for tic labels, whether or not input for the specified axis is time/date.

If time/date information is to be plotted from a file, the `using` option
_must_ be used on the `plot` or `splot` command.  These commands simply use
white space to separate columns, but white space may be embedded within the
time/date string.  If you use tabs as a separator, some trial-and-error may
be necessary to discover how your system treats them.

The `time` function can be used to get the current system time. This value
can be converted to a date string with the @ref{strftime} function, or it can be
used in conjunction with `timecolumn` to generate relative time/date plots.
The type of the argument determines what is returned. If the argument is an
integer, `time` returns the current time as an integer, in seconds from
1 Jan 1970. If the argument is real (or complex), the result is real as well.
The precision of the fractional (sub-second) part depends on your operating
system. If the argument is a string, it is assumed to be a format string,
and it is passed to @ref{strftime} to provide a formatted time/date string.

The following example demonstrates time/date plotting.

Suppose the file "data" contains records like

@example
      03/21/95 10:00  6.02e23

@end example

This file can be plotted by

@example
      set xdata time
      set timefmt "%m/%d/%y"
      set xrange ["03/21/95":"03/22/95"]
      set format x "%m/%d"
      set timefmt "%m/%d/%y %H:%M"
      plot "data" using 1:3

@end example

which will produce xtic labels that look like "03/21".

Gnuplot tracks time to millisecond precision. Time formats have been
modified to match this.
Example: print the current time to msec precision
@example
     print strftime("%H:%M:%.3S %d-%b-%Y",time(0.0))
     18:15:04.253 16-Apr-2011

@end example

See `time_specifiers`, `set xtics time`, `set mxtics time`.

@node Watchpoints_,  , Time/Date_data, Gnuplot
@section Watchpoints

@cindex watchpoints
@opindex watchpoints


@cindex watch

Support for watchpoints is present only if your copy of gnuplot was built
with configuration option --enable-watchpoints. This feature is EXPERIMENTAL
[details may change in a subsequent release version].

Syntax:
@example
      plot FOO watch @{x|y|z|F(x,y)@} = <value>
      plot FOO watch mouse

@end example

@example
      set style watchpoints nolabels
      set style watchpoints label <label-properties>

@end example

@example
      unset style watchpoints      # return to default style

@end example

@example
      show watchpoints    # summarizes all watches from previous plot command

@end example

A watchpoint is a target value for the x, y, or z coordinate or for a function
f(x,y).  Each watchpoint is attached to a single plot within a `plot` command.
Watchpoints are tracked only for styles `with lines` and @ref{linespoints}.
Every component line segment of that plot is checked against all watchpoints
attached the plot to see whether one or more of the watchpoint targets is
satisfied at a point along that line segment. A list of points that satisfy the
the target condition ("hits") is accumulated as the plot is drawn.

For example, if there is a watchpoint with a target y=100, each line segment
is checked to see if the y coordinates of the two endpoints bracket the target
y value.  If so then some point [x,y] on the line segment satisfies the target
condition y = 100 exactly.  This target point is then found by linear
interpolation or by iterative bisection.

Watchpoints within a single plot command are numbered successively.
More than one watchpoint per plot component may be specified.
Example:
@example
     plot DATA using 1:2 smooth cnormal watch y=0.25 watch y=0.5 watch y=0.75

@end example

Watchpoint hits for each target in the previous plot command are stored in
named arrays WATCH_n.  You can also display a summary of all watchpoint hits
from the previous plot command;  see @ref{watchpoints}.

@example
     gnuplot> show watchpoints
     Plot title:     "DATA using 1:2 smooth cnormal"
       Watch 1 target y = 0.25         (1 hits)
               hit 1   x 49.7  y 0.25
       Watch 2 target y = 0.5          (1 hits)
               hit 1   x 63.1  y 0.5
       Watch 3 target y = 0.75         (1 hits)
               hit 1   x 67.8  y 0.75

@end example

Smoothing: Line segments are checked as they are drawn.  For unsmoothed data
plots this means a hit found by interpolation will lie exactly on a line
segment connecting two data points.  If a data plot is smoothed, hits will
lie on a line segment from the smoothed curve.  Depending on the quality
of the smoothed fit, this may or may not be more accurate than the hit from
the unsmoothed data.

Accuracy: If the line segment was generated from a function plot, the exact
value of x such that f(x) = y is found by iterative bisection.
Otherwise the coordinates [x,y] are approximated by linear interpolation
along the line segment.


@menu
* watch_mouse::
* watch_labels::
@end menu

@node watch_mouse, watch_labels, Watchpoints_, Watchpoints_
@subsection watch mouse

@c ?watchpoints mouse
@c ?watch mouse

Using the current mouse x coordinate as a watch target generates a label
that moves along the line of the plot tracking the horizontal position of
the mouse.  This allows simultaneous readout of the y values of multiple
plot lines in the same graph.  The appearance of the point indicating the
current position and of the label can be modified by `set style watchpoint`
and `set style textbox`

Example:

@example
     set style watchpoint labels point pt 6 ps 2 boxstyle 1
     set style textbox 1 lw 0.5 opaque
     plot for [i=1:N] "file.dat" using 1:(column(i)) watch mouse

@end example


@node watch_labels,  , watch_mouse, Watchpoints_
@subsection watch labels

@c ?watchpoint labels
@c ?watch labels
By default, labels are always generated for the target "watch mouse".
You can turn labels on for other watch targets using the command
@ref{labels}.  The label text is "x : y", where x and
y are the coordinates of the point, formatted using the current settings
for the corresponding axes.

Example:
@example
     set y2tics format "%.2f°"
     set style watchpoint labels point pt 6
     plot FOO axes x1y2 watch mouse
@end example

D watchpoints 2


@node Plotting_styles, Commands, Gnuplot, Top
@chapter Plotting styles

@c ?plotting styles
@cindex plot styles


Many plotting styles are available in gnuplot.
They are listed alphabetically below.
The commands `set style data` and `set style function` change the
default plotting style for subsequent `plot` and `splot` commands.

You can also specify the plot style explicitly as part of
the `plot` or `splot` command.  If you want to mix plot styles within a
single plot, you must specify the plot style for each component.

Example:

@example
     plot 'data' with boxes, sin(x) with lines

@end example

Each plot style has its own expected set of data entries in a data file.
For example, by default the `lines` style expects either a single column of
y values (with implicit x ordering) or a pair of columns with x in the first
and y in the second.  For more information on how to fine-tune how columns in a
file are interpreted as plot data, see `using`.


@menu
* arrows::
* Bee_swarm_plots::
* boxerrorbars::
* boxes::
* boxplot::
* boxxyerror::
* candlesticks::
* circles::
* contourfill::
* dots::
* ellipses::
* filledcurves::
* financebars::
* fillsteps::
* fsteps::
* histeps::
* heatmaps::
* histograms::
* hsteps::
* image::
* impulses::
* labels::
* lines::
* linespoints::
* masking::
* parallelaxes::
* Polar_plots::
* points::
* polygons::
* rgbalpha::
* rgbimage::
* sectors::
* spiderplot::
* steps::
* surface::
* vectors::
* xerrorbars::
* xyerrorbars::
* xerrorlines::
* xyerrorlines::
* yerrorbars::
* yerrorlines::
* 3D_plots::
* Fence_plots::
* isosurface::
* Zerrorfill::
* Animation::
@end menu

@node arrows, Bee_swarm_plots, Plotting_styles, Plotting_styles
@section arrows

@c ?plotting styles arrows
@c ?style arrows
@c ?with arrows
@cindex arrows

@c ^figure_vectors
The 2D `arrows` style draws an arrow with specified length and orientation
angle at each point (x,y).  Additional input columns may be used to provide
variable (per-datapoint) color information or arrow style.
It is identical to the 2D style @ref{vectors} except that each arrow head
is positioned using length + angle rather than delta_x + delta_y.
See @ref{vectors}.

@example
     4 columns:  x  y  length  angle

@end example

The keywords `with arrows` may be followed by inline arrow style properties,
a reference to a predefined arrow style, or `arrowstyle variable` to load the
index of the desired arrow style for each arrow from a separate column.

`length` > 0 is interpreted in x-axis coordinates.
-1 < `length` < 0 is interpreted in horizontal graph coordinates; i.e. |length|
is a fraction of the total graph width.
The program will adjust for differences in x and y scaling or plot aspect ratio
so that the visual length is independent of the orientation angle.

`angle` is always specified in degrees.

@menu
* arrowstyle_variable::
@end menu

@node arrowstyle_variable,  , arrows, arrows
@subsection arrowstyle variable

@c ?arrowstyle variable
@c ?variable arrowstyle
For plot styles `with arrows` and @ref{vectors}, you can provide an extra
column of input data that provides an integer arrow style corresponding to
style previously defined using `set style arrow`.

Example:
@example
     set style arrow 1 head nofilled linecolor "blue" linewidth 0.5
     set style arrow 2 head filled linecolor "red" linewidth 1.0
     # column 5 is expected to contain either 1 or 2,
     # determining which of the two previous defined styles to use
     plot DATA using 1:2:3:4:5 with arrows arrowstyle variable

@end example


@node Bee_swarm_plots, boxerrorbars, arrows, Plotting_styles
@section Bee swarm plots

@cindex beeswarm

@c ?bee swarm
@cindex jitter
@opindex jitter


"Bee swarm" plots result from applying jitter to separate overlapping points.
A typical use is to compare the distribution of y values exhibited by two or
more categories of points, where the category determines the x coordinate.
See the @ref{jitter} command for how to control the overlap criteria and the
displacement pattern used for jittering.  The plots in the figure were created
by the same plot command but different jitter settings.

@example
     set jitter
     plot $data using 1:2:1 with points lc variable

@end example

@node boxerrorbars, boxes, Bee_swarm_plots, Plotting_styles
@section boxerrorbars

@c ?plotting styles boxerrorbars
@c ?style boxerrorbars
@c ?with boxerrorbars
@cindex boxerrorbars

The @ref{boxerrorbars} style is only relevant to 2D data plotting.  It is a
combination of the @ref{boxes} and @ref{yerrorbars} styles.  It requires 3, 4, or 5
columns of data.
An additional (4th, 5th or 6th) input column may be used to provide variable
(per-datapoint) color information (see `linecolor` and `rgbcolor variable`).

@example
     3 columns:  x  y  ydelta
     4 columns:  x  y  ydelta xdelta         (xdelta <= 0 means use boxwidth)
     5 columns:  x  y  ylow  yhigh  xdelta   (xdelta <= 0 means use boxwidth)

@end example

The boxwidth will come from the fourth column if the y errors are given as
"ydelta" or from the fifth column if they are in the form of "ylow yhigh".
If xdelta is zero or negative, the width of the box is controlled by the
value previously given for boxwidth.  See @ref{boxwidth}.

A vertical error bar is drawn to represent the y error in the same way as
for the @ref{yerrorbars} style, either from y-ydelta to y+ydelta or from
ylow to yhigh, depending on how many data columns are provided.
The line style used for the error bar may be controlled using `set bars`.
Otherwise the error bar will match the border of the box.

DEPRECATED:  Old versions of gnuplot treated `boxwidth = -2.0` as a special
case for four-column data with y errors in the form "ylow yhigh".
In this case boxwidth was adjusted to leave no gap between adjacent boxes.
This treatment is retained for backward-compatibility but may be removed
in a future version.


@node boxes, boxplot, boxerrorbars, Plotting_styles
@section boxes

@c ?plotting styles boxes
@c ?style boxes
@c ?with boxes
@cindex boxes

In 2D plots the @ref{boxes} style draws a rectangle centered about the given
x coordinate that extends from the x axis, i.e. from y=0 not from the graph
border, to the given y coordinate.  The width of the box can be provided in
an additional input column or controlled by @ref{boxwidth}.  Otherwise each
box extends to touch the adjacent boxes.

In 3D plots the @ref{boxes} style draws a box centered at the given [x,y]
coordinate that extends from the plane at z=0 to the given z coordinate.
The width of the box on x can be provided in a separate input column or via
@ref{boxwidth}.  The depth of the box on y is controlled by @ref{boxdepth}.
Boxes do not automatically expand to touch each other.

@menu
* 2D_boxes::
* 3D_boxes::
@end menu

@node 2D_boxes, 3D_boxes, boxes, boxes
@subsection 2D boxes

@c ?style boxes 2D
@c ?boxes 2D

@ref{boxes} uses 2 or 3 columns of basic data.  Additional input columns
may be used to provide information such as variable line or fill color.
See `rgbcolor variable`.

@example
     2 columns:  x  y
     3 columns:  x  y  x_width

@end example

The width of the box is obtained in one of three ways.  If the input data has a
third column, this will be used to set the box width.  Otherwise if a width has
been set using the @ref{boxwidth} command, this will be used.  If neither of
these is available, the width of each box will be calculated so that it touches
the adjacent boxes.

The box interiors are drawn using the current fillstyle.
Alternatively a fillstyle may be specified in the plot command.
See `set style fill`.
If no fillcolor is given in the plot command, the current line color is used.

Examples:

To plot a data file with solid filled boxes with a small vertical space
separating them (bargraph):

@example
      set boxwidth 0.9 relative
      set style fill solid 1.0
      plot 'file.dat' with boxes

@end example

To plot a sine and a cosine curve in pattern-filled boxes style
with explicit fill color:

@example
      set style fill pattern
      plot sin(x) with boxes fc 'blue', cos(x) with boxes fc 'gold'

@end example

The sin plot will use pattern 0; the cos plot will use pattern 1.
Any additional plots would cycle through the patterns supported by the
terminal driver.


@node 3D_boxes,  , 2D_boxes, boxes
@subsection 3D boxes

@c ?style boxes 3D
@c ?boxes 3D

@ref{boxes} requires at least 3 columns of input data.  Additional
input columns may be used to provide information such as box width or
fill color.

@example
     3 columns:  x  y  z
     4 columns:  x  y  z  [x_width or color]
     5 columns:  x  y  z  x_width  color

@end example

The last column is used as a color only if the splot command specifies a
variable color mode.  Examples

@example
     splot 'blue_boxes.dat' using 1:2:3 fc "blue"
     splot 'rgb_boxes.dat' using 1:2:3:4 fc rgb variable
     splot 'category_boxes.dat' using 1:2:3:4:5 lc variable

@end example

In the first example all boxes are blue and have the width previously set
by @ref{boxwidth}.  In the second example the box width is still taken from
@ref{boxwidth} because the 4th column is interpreted as a 24-bit RGB color.
The third example command reads box width from column 4 and interprets the
value in column 5 as an integer linetype from which the color is derived.

By default boxes have no thickness; they consist of a single rectangle parallel
to the xz plane at the specified y coordinate.  You can change this to a true
box with four sides and a top by setting a non-zero extent on y.
See @ref{boxdepth}.

3D boxes are processed as pm3d quadrangles rather than as surfaces. Because of
this the front/back order of drawing is not affected by @ref{hidden3d}.
See `set pm3d`.  In gnuplot version 6 the edges of the box are colored by
the border color of the plot's fill style; this is a change from version 5.
For best results use a combination of `set pm3d depthorder base` and
@ref{lighting}.


@node boxplot, boxxyerror, boxes, Plotting_styles
@section boxplot

@c ?plotting styles boxplot
@c ?style boxplot
@c ?with boxplot
@cindex boxplot

Boxplots are a common way to represent a statistical distribution of values.
Gnuplot boxplots are always vertical, showing a distribution of values along y.
Quartile boundaries are determined such that 1/4 of the points have a y value
equal or less than the first quartile boundary, 1/2 of the points have y value
equal or less than the second quartile (median) value, etc.  A box is drawn
around the region between the first and third quartiles with a horizontal line
at the median value.  Whiskers extend from the box to user-specified limits.
Points that lie outside these limits (outliers) are drawn individually.
The width of the boxplot can be controlled either by @ref{boxwidth} or by
providing it in a third field of the `using` specifier in the plot command.

Syntax

@example
     2 columns:   x-position        y-value
     3 columns:   x-position        y-value  boxwidth
     4 columns:   first-x-position  y-value  boxwidth  category

@end example

The horizontal position of a boxplot is usually given as a constant value
in the first field (x-position) of the `using` specifier in the plot command.
You can place an identifying label at this position under the boxplot by adding
an `xticlabel` specifier in the plot command (two or three column syntax) or
by providing it as a string in a separate data column (four column syntax).
Both examples below should produce a plot with layout similar to the one
in the boxplot example figure.

Examples

@example
     #
     # Compare distribution of y-values from two different files.
     set border 2                    # left-hand border only
     set xtics nomirror scale 0      # no tickmarks; only labels
     set ytics rangelimited nomirror
     plot 'dataset_A' using (1.):2:xticlabel('A') with boxplot, \
          'dataset_B' using (2.):2:xticlabel('B') with boxplot

     #
     # Compare y-values from two categories of data in the same file.
     # Each line contains a category string ("A" or "B") in column 1 and
     # a data value in column 2.  Labels auto-generated from category string.
     start_x = 1.0
     boxwidth = 0.5
     plot 'mixeddata' using (start_x):2:(boxwidth):1 with boxplot

@end example

By default a single boxplot is produced from all y values found in the column
specified by the second field of the using specification.
If a fourth field is given in the `using` specification the content of that
input column will be used as a string that identifies a discrete category.
A separate boxplot will be drawn for each category found in the input.
The horizontal separation between these boxplots is 1.0 by default;, it can be
changed by `set style boxplot separation`.  By default the category identifier
is shown as a tic label below each boxplot.  Note that if category column
contains numerical values they are nevertheless treated as strings and thus
do not usually correspond to the x coordinate of the boxplot.

The order of data points in the input file is not important. If there are
multiple blocks of data in the input file separated by two blank lines,
individual blocks may be selected with the @ref{index} keyword or by using the
the data block number (`column(-2)`) as a level value in the fourth column.
See `pseudocolumns`, @ref{index}.

By default the whiskers extend vertically from the ends of the box to the most
distant point whose y value lies within 1.5 times the interquartile range.
By default outliers are drawn as circles (point type 7).  The width of bars at
the end of the whiskers may be controlled using `set bars` or @ref{errorbars}.
Multiple outliers with the same y value are displaced horizontally by one
character width.  This spacing can be controlled by @ref{jitter}.

These default properties may be changed using the @ref{boxplot} command.
See @ref{boxplot}, `bars`, @ref{boxwidth}, `fillstyle`, @ref{candlesticks}.

@node boxxyerror, candlesticks, boxplot, Plotting_styles
@section boxxyerror

@c ?plotting styles boxxyerror
@c ?style boxxyerror
@c ?with boxxyerror
@cindex boxxyerror

The @ref{boxxyerror} plot style is only relevant to 2D data plotting.
It is similar to the @ref{xyerrorbars} style except that it draws rectangular areas
rather than crosses.  It uses either 4 or 6 basic columns of input data.
An additional (5th or 7th) input column may be used to provide variable
(per-datapoint) color information (see `linecolor` and `rgbcolor variable`).

@example
     4 columns:  x  y  xdelta  ydelta
     6 columns:  x  y  xlow  xhigh  ylow  yhigh

@end example

The box width and height are determined from the x and y errors in the same
way as they are for the @ref{xyerrorbars} style---either from xlow to xhigh and
from ylow to yhigh, or from x-xdelta to x+xdelta and from y-ydelta to
y+ydelta, depending on how many data columns are provided.

The 6 column form of the command provides a convenient way to plot rectangles
with arbitrary x and y bounds.

The interior of the boxes is drawn according to the current fillstyle.
See `set style fill` and @ref{boxes} for details.  Alternatively a new fillstyle
may be specified in the plot command.

@node candlesticks, circles, boxxyerror, Plotting_styles
@section candlesticks

@c ?plotting styles candlesticks
@c ?style candlesticks
@c ?with candlesticks
@cindex candlesticks

The @ref{candlesticks} style can be used for 2D data plotting of financial
data or for generating box-and-whisker plots of statistical data.
The symbol is a rectangular box, centered horizontally at the x
coordinate and limited vertically by the opening and closing prices.  A
vertical line segment at the x coordinate extends up from the top of the
rectangle to the high price and another down to the low.  The vertical line
will be unchanged if the low and high prices are interchanged.

Five columns of basic data are required:

@example
      financial data:   date  open  low  high  close
      whisker plot:     x  box_min  whisker_min  whisker_high  box_high

@end example

The width of the rectangle can be controlled by the @ref{boxwidth} command.
For backwards compatibility with earlier gnuplot versions, when the
boxwidth parameter has not been set then the width of the candlestick
rectangle is taken from `set errorbars <width>`.

Alternatively, an explicit width for each box-and-whiskers grouping may be
specified in an optional 6th column of data.  The width must be given in the
same units as the x coordinate.

An additional (6th, or 7th if the 6th column is used for width data)
input column may be used to provide variable (per-datapoint) color
information (see `linecolor` and `rgbcolor variable`).

By default the vertical line segments have no crossbars at the top and
bottom. If you want crossbars, which are typically used for box-and-whisker
plots, then add the keyword `whiskerbars` to the plot command.  By default
these whiskerbars extend the full horizontal width of the candlestick, but
you can modify this by specifying a fraction of the full width.

The usual convention for financial data is that the rectangle is empty
if (open < close) and solid fill if (close < open). This is the behavior you
will get if the current fillstyle is set to "empty". See `fillstyle`.
If you set the fillstyle to solid or pattern, then this will be used for
all boxes independent of open and close values.
See also @ref{errorbars} and @ref{financebars}.  See also the
@uref{http://www.gnuplot.info/demo/candlesticks.html,candlestick
}
and
@uref{http://www.gnuplot.info/demo/finance.html,finance
}
demos.

Note: To place additional symbols or lines on a box-and-whisker plot requires
additional plot components. The first example below uses a second component
that squashes the candlestick onto a single line placed at the median value.

@example
  # Data columns:X Min 1stQuartile Median 3rdQuartile Max
  set errorbars 4.0
  set style fill empty
  plot 'stat.dat' using 1:3:2:6:5 with candlesticks title 'Quartiles', \
       ''         using 1:4:4:4:4 with candlesticks lt -1 notitle

@end example

@example
  # Plot with crossbars on the whiskers, crossbars are 50% of full width
  plot 'stat.dat' using 1:3:2:6:5 with candlesticks whiskerbars 0.5

@end example

See @ref{boxwidth}, @ref{errorbars}, `set style fill`, and @ref{boxplot}.

@node circles, contourfill, candlesticks, Plotting_styles
@section circles

@c ?plotting styles circles
@c ?style circles
@c ?with circles
@cindex circles

The @ref{circles} style plots a circle with an explicit radius at each data point.
The radius is always interpreted in the units of the plot's horizontal axis
(x or x2).  The scale on y and the aspect ratio of the plot are both ignored.
If the radius is not given in a separate column for each point it is taken from
`set style circle`.  In this case the radius may use graph or screen coordinates.

Many combinations of per-point and previously set properties are possible.
For 2D plots these include

@example
    using x:y
    using x:y:radius
    using x:y:color
    using x:y:radius:color
    using x:y:radius:arc_begin:arc_end
    using x:y:radius:arc_begin:arc_end:color

@end example

By default a full circle will be drawn.
The result is similar to using a `points` plot with variable size points and
pointtype 7, except that the circles scale with the x axis range.
It is possible to instead plot arc segments by specifying a start and end angle
(in degrees) in columns 4 and 5.

A per-circle color may be provided in the last column of the using specifier.
In this case the plot command must include a corresponding variable color
term such as `lc variable` or `fillcolor rgb variable`.

See `set style circle`, `set object circle`, and `set style fill`.

For 3D plots the using specifier must contain

@example
    splot DATA using x:y:z:radius:color

@end example

where the variable color column is optional.

Examples:

@example
    # draws circles whose area is proportional to the value in column 3
    set style fill transparent solid 0.2 noborder
    plot 'data' using 1:2:(sqrt($3)) with circles, \
         'data' using 1:2 with linespoints

@end example

@example
    # draws Pac-men instead of circles
    plot 'data' using 1:2:(10):(40):(320) with circles

@end example

@cindex piechart


@example
    # draw a pie chart with inline data
    set xrange [-15:15]
    set style fill transparent solid 0.9 noborder
    plot '-' using 1:2:3:4:5:6 with circles lc var
    0    0    5    0    30    1
    0    0    5   30    70    2
    0    0    5   70   120    3
    0    0    5  120   230    4
    0    0    5  230   360    5
    e

@end example


@node contourfill, dots, circles, Plotting_styles
@section contourfill

@c ?plotting styles contourfill
@c ?style contourfill
@c ?with contourfill
@cindex contourfill
@opindex contourfill


Syntax:
@example
     splot f(x,y) with contourfill @{at base@} @{fillstyle <style>@}

@end example

Contourfill is a 3D plotting style used to color a pm3d surface in slices
along the z axis.  It can be used in 2D projection (`set view map`) to create
2D contour plots with solid color between contour lines.
The slice boundaries and the assigned colors are both controlled using
@ref{contourfill}.  See also `pm3d`, `zclip`.

This style can be combined with `set contours` to superimpose contour
lines that bound the slices.  Care must be taken that the slice boundaries
from @ref{contourfill} match the contour boundaries from @ref{cntrparam}.

@example
     # slice boundaries determined by ztics
     # coloring set by palette mapping the slice midpoint z value
     set pm3d border retrace
     set contourfill ztics
     set ztics -20, 5, 20
     set contour
     set cntrparam cubic levels increment -20, 5, 20
     set cntrlabel onecolor
     set view map
     splot g(x,y) with contourfill, g(x,y) with lines nosurface

@end example


@node dots, ellipses, contourfill, Plotting_styles
@section dots

@c ?plotting styles dots
@c ?style dots
@c ?with dots
@cindex dots

The @ref{dots} style plots a tiny dot at each point; this is useful for scatter
plots with many points.  Either 1 or 2 columns of input data are required in
2D.  Three columns are required in 3D.

For some terminals (post, pdf) the size of the dot can be controlled by
changing the linewidth.

@example
     1 column    y         # x is row number
     2 columns:  x  y
     3 columns:  x  y  z   # 3D only (splot)

@end example


@node ellipses, filledcurves, dots, Plotting_styles
@section ellipses

@c ?plotting styles ellipses
@c ?style ellipses
@c ?with ellipses
@cindex ellipses

Syntax:
@example
     plot <data> with ellipses @{units [xx|xy|yy]@}

@end example

The @ref{ellipses} style plots an ellipse at each data point.  This style is
only relevant for 2D plotting.  Each ellipse is described in terms of its
center, major and minor diameters, and the angle between its major diameter
and the x axis.

@example
     2 columns: x y
     3 columns: x y diam  (used for both major and minor axes)
     4 columns: x y major_diam minor_diam
     5 columns: x y major_diam minor_diam angle

@end example

If only two input columns are present, they are taken as the coordinates of
the centers, and the ellipses will be drawn with the default extent
(see `set style ellipse`).  The orientation of the ellipse, which is
defined as the angle between the major diameter and the plot's x axis,
is taken from the default ellipse style (see `set style ellipse`).

If three input columns are provided, the third column is used for both
diameters.  The orientation angle defaults to zero.

If four columns are present, they are interpreted as x, y, major diameter,
minor diameter.  Note that these are diameters, not radii.
If either diameter is negative, both diameters will be taken from the
default set by `set style ellipse`.

An optional 5th column may specify the orientation angle in degrees.
The ellipses will also be drawn with their default extent if either of the
supplied diameters in the 3-4-5 column form is negative.

In all of the above cases, optional variable color data may be given in an
additional last (3th, 4th, 5th or 6th) column. See @ref{colorspec}.

`units keyword:` If `units xy` is included in the plot specification,
the major diameter is interpreted in the units of the plot's horizontal axis
(x or x2) while the minor diameter in that of the vertical axis (y or y2).
If the x and y axis scales are not equal, the major/minor diameter ratio will
no longer be correct after rotation.
`units xx` interprets both diameters in units of the x axis.
`units yy` interprets both diameters in units of the y axis.
In the latter two cases the ellipses will have the correct aspect ratio even
if the plot is resized.  If `units` is omitted from the plot command,
the setting from `set style ellipse` will be used.

Example (draws ellipses, cycling through the available line types):

@example
    plot 'data' using 1:2:3:4:(0):0 with ellipses

@end example

See also `set object ellipse`, `set style ellipse` and `fillstyle`.


@node filledcurves, financebars, ellipses, Plotting_styles
@section filledcurves

@c ?plotting styles filledcurves
@c ?style filledcurves
@c ?with filledcurves
@cindex filledcurves

The @ref{filledcurves} style is available in both 2D and (since version 6.1) 3D.

The 2D style has three variants.  The first two variants require either a
single function or two columns (x,y) of input data.

Syntax for 2D:

@example
    plot f(x) with filledcurves [option]
    plot DATA using 1:2    with filledcurves [option]
    plot DATA using 1:2:3  with filledcurves [option]

@end example

where the option can be one of the following

@example
    closed
    @{above|below@} x1 x2  y r=<a> xy=<x>,<y>
    between

@end example

The first variant, `closed`, treats the curve itself as a closed polygon.
This is the default if there are two columns of input data.

@example
    filledcurves closed   ... just filled closed curve,

@end example

The second variant is to fill the area between the curve and a given axis,
a horizontal or vertical line, or a point. This can be further restricted
to filling the area above or below the specified line.

@example
    filledcurves x1       ... x1 axis,
    filledcurves x2       ... x2 axis, etc for y1 and y2 axes,
    filledcurves y=42     ... line at y=42, i.e. parallel to x axis,
    filledcurves xy=10,20 ... point 10,20 of x1,y1 axes (arc-like shape).
    filledcurves above r=1.5  the area of a polar plot outside radius 1.5

@end example

The third variant fills the area between two curves sampled at the same set of
x coordinates.  It requires three columns of input data (x, y1, y2).
This is the default if there are three or more columns of input data.
If you have a y value in column 2 and an associated error value in column 3
the three column variant can be used in combination with a solid line to show
the area of uncertainty on either side of that line.
See also the similar 3D plot style `zerrorfill`.

@example
    plot $DAT using 1:($2-$3):($2+$3) with filledcurves, \
         $DAT using 1:2 smooth mcs with lines

@end example


@menu
* above/below::
* 3D_waterfall_plots::
* fill_properties::
@end menu

@node above/below, 3D_waterfall_plots, filledcurves, filledcurves
@subsection above/below

@c ?filledcurves above
@c ?filledcurves below
The `above` and `below` options apply both to commands of the form
@example
    plot f(x) with filledcurves @{above|below@} @{y|r@}=<val>
@end example

and to commands of the form
@example
    plot DATA with filledcurves using 1:2:3 with filledcurves @{above|below@}
@end example

In either case the option limits the filled area to one side of the bounding
line or curve.

Zooming a filled curve drawn from a datafile may produce empty or incorrect
areas because gnuplot is clipping points and lines, and not areas.

If the values <x>, <y>, or <a> are outside the drawing boundary they are
moved to the graph boundary. Then the actual fill area in the case
of option xy=<x>,<y> will depend on xrange and yrange.


@node 3D_waterfall_plots, fill_properties, above/below, filledcurves
@subsection 3D waterfall plots

@c ?filledcurves 3D
@c ?filledcurves waterfall
@cindex waterfallplots

@example
     set style fill solid border lc "black"
     splot for [scan=N:1:-1] DATA index scan \
           using x:y:z with filledcurves fc background

@end example

In gnuplot 6.1 the 3D @ref{filledcurves} plot style is designed to display a
set of two-dimensional curves that are incrementally displaced along an
orthogonal axis.  Normally x or y is a fixed value for each curve so that
the lines either represent z=f(x) at sequential y values or z=f(y) at
sequential x values.  This is convenient for drawing waterfall plots.

In order to ensure that foreground curves occlude more distant ones it is
important to order the sequence of curves from back to front.

See also `fenceplots`.
D waterfallplot 1


@node fill_properties,  , 3D_waterfall_plots, filledcurves
@subsection fill properties

@c ?filledcurves border
@cindex border
@opindex border


Plotting @ref{filledcurves} can be further customized by giving a fillstyle
(solid/transparent/pattern) or a fillcolor.  If no fillstyle (`fs`)
is given in the plot command then the current default fill style is used.
See `set style fill`.  If no fillcolor (`fc`) is given in the plot command,
the current line color is used.

The @{@{no@}border@} property of the fillstyle is honored by filledcurves mode
`closed`, the default.  It is ignored by all other filledcurves modes.
Example:
@example
     plot 'data' with filledcurves fc "cyan" fs solid 0.5 border lc "blue"

@end example

@node financebars, fillsteps, filledcurves, Plotting_styles
@section financebars

@c ?plotting styles financebars
@c ?style financebars
@c ?with financebars
@cindex financebars

The @ref{financebars} style is only relevant for 2D data plotting of financial
data.  It requires 1 x coordinate (usually a date) and 4 y values (prices).

@example
     5 columns:   date  open  low  high  close

@end example

An additional (6th) input column may be used to provide variable
(per-record) color information (see `linecolor` and `rgbcolor variable`).

The symbol is a vertical line segment, located horizontally at the x
coordinate and limited vertically by the high and low prices.  A horizontal
tic on the left marks the opening price and one on the right marks the
closing price.  The length of these tics may be changed by @ref{errorbars}.
The symbol will be unchanged if the high and low prices are interchanged.
See @ref{errorbars} and @ref{candlesticks}, and also the
@uref{http://www.gnuplot.info/demo/finance.html,finance demo.
}


@node fillsteps, fsteps, financebars, Plotting_styles
@section fillsteps

@c ?style fillsteps
@c ?with fillsteps
@cindex fillsteps

@example
     plot <data> with fillsteps @{above|below@} @{y=<baseline>@}

@end example

The @ref{fillsteps} style is only relevant to 2D plotting.
It is exactly like the style @ref{steps} except that the area between
the curve and the baseline (default y=0) is filled in the current fill style.
The options `above` and `below` fill only the portion to one side of the
baseline.  Note that in moving from one data point to the next, both @ref{steps}
and @ref{fillsteps} first trace the change in x coordinate and then the change
in y coordinate.  See @ref{steps}.
@example
   1 column:   y     # implicit x from line number (column 0)
   2 columns:  x y

@end example

@node fsteps, histeps, fillsteps, Plotting_styles
@section fsteps

@c ?plotting styles fsteps
@c ?style fsteps
@c ?with fsteps
@cindex fsteps

The @ref{fsteps} style is only relevant to 2D plotting.  It connects consecutive
points with two line segments: the first from (x1,y1) to (x1,y2) and the
second from (x1,y2) to (x2,y2).  The input column requires are the same as for
plot styles `lines` and `points`.  The difference between @ref{fsteps} and @ref{steps}
is that @ref{fsteps} traces first the change in y and then the change in x.
@ref{steps} traces first the change in x and then the change in y.

See also
@uref{http://www.gnuplot.info/demo/steps.html,steps demo.
}
@example
   1 column:   y     # implicit x from line number (column 0)
   2 columns:  x y

@end example

@node histeps, heatmaps, fsteps, Plotting_styles
@section histeps

@c ?plotting styles histeps
@c ?style histeps
@c ?with histeps
@cindex histeps

The @ref{histeps} style is only relevant to 2D plotting.  It is intended for
plotting histograms.  Y-values are assumed to be centered at the x-values;
the point at x1 is represented as a horizontal line from ((x0+x1)/2,y1) to
((x1+x2)/2,y1).  The lines representing the end points are extended so that
the step is centered on at x.  Adjacent points are connected by a vertical
line at their average x, that is, from ((x1+x2)/2,y1) to ((x1+x2)/2,y2).
The input column requires are the same as for plot styles `lines` and `points`.

If @ref{autoscale} is in effect, it selects the xrange from the data rather than
the steps, so the end points will appear only half as wide as the others.
See also
@uref{http://www.gnuplot.info/demo/steps.html,steps demo.
}
@example
   1 column:   y     # implicit x from line number (column 0)
   2 columns:  x y

@end example


@node heatmaps, histograms, histeps, Plotting_styles
@section heatmaps

@cindex heatmaps

Several of gnuplot's plot styles can be used to create heat maps. The choice
of which style to use is dictated by the type of data.

Pixel-based heat maps all have the property that each pixel in the map
corresponds exactly to one original data value.
The pixel-based image styles require a regular rectangular grid of data values;
see `with image`.  However it is possible to handle missing grid values
(see `sparse`) and it is also possible to mask out only a portion of the grid
for display (see @ref{masking}).
Unless there are a large number of grid elements, it is usually good to
render each rectangular element separately (`with image pixels`) so that
smoothing or lossy compression is not applied to the resulting "image".

A polar equivalent to image pixel-based heat maps can be generated using 2D
plot style @ref{sectors}.  Each input point corresponds to exactly one annular
sector of a polar grid, equivalent to a pixel.  Unlike the polar grid surface
option described below, any number of individual grid sectors may be provided.
This plot style can be used in either polar or cartesian coordinate plots
to place polar sectors anywhere on the graph.  The figure here shows two halves
of a polar heat map displaced across the origin by +/- Δx on a cartesian
coordinate plot.  See @ref{sectors}.

If the data points do not constitute a regular rectangular grid, they can often
be used to fit a gridded surface by interpolation or by splines. Alternatively
a point-density function can be mapped onto a gridded plane or smooth surface.
See @ref{dgrid3d}.  The gridded surface can then be plotted as a pm3d surface
(see @ref{masking} example). In this case the points on the heat map do not retain
a one-to-one correspondence with the input data.  I.e. the validity of the heat
map represenation is only as good as the gridded approximation.
The demo collection has examples of generating 2D heatmaps from a set of points
@uref{http://www.gnuplot.info/demo/heatmap_points.html,heatmap_points.dem
}

If your copy of gnuplot was built with the --enable-polar-grid option,
polar coordinate data points can be used to generate a 2D polar heat map in
which each "pixel" corresponded to a pre-determined range of theta and r.
See `set polar grid` and `with surface`.  This process is exactly analogous
to the use of @ref{dgrid3d} and `with pm3d` except that it operates in
2D polar coordinate space.


@node histograms, hsteps, heatmaps, Plotting_styles
@section histograms

@c ?style histograms
@c ?with histograms
@c ?set style histogram
@c ?plotting styles histograms
@cindex histograms

The @ref{histograms} style is only relevant to 2D plotting.  It produces a bar
chart from a sequence of parallel data columns. Each element of the `plot`
command must specify a single input data source (e.g. one column of the input
file), possibly with associated tic values or key titles.
Four styles of histogram layout are currently supported.

@example
      set style histogram clustered @{gap <gapsize>@}
      set style histogram errorbars @{gap <gapsize>@} @{<linewidth>@}
      set style histogram rowstacked
      set style histogram columnstacked
      set style histogram @{title font "name,size" tc <colorspec>@}

@end example

The default style corresponds to `set style histogram clustered gap 2`.
In this style, each set of parallel data values is collected into a group of
boxes clustered at the x-axis coordinate corresponding to their sequential
position (row #) in the selected datafile columns.  Thus if <n> datacolumns are
selected, the first cluster is centered about x=1, and contains <n> boxes whose
heights are taken from the first entry in the corresponding <n> data columns.
This is followed by a gap and then a second cluster of boxes centered about x=2
corresponding to the second entry in the respective data columns, and so on.
The default gap width of 2 indicates that the empty space between clusters is
equivalent to the width of 2 boxes.  All boxes derived from any one column
are given the same fill color and/or pattern; however see the subsection
`histograms colors`.

Each cluster of boxes is derived from a single row of the input data file.
It is common in such input files that the first element of each row is a
label. Labels from this column may be placed along the x-axis underneath
the appropriate cluster of boxes with the `xticlabels` option to `using`.

The @ref{errorbars} style is very similar to the `clustered` style, except that it
requires additional columns of input for each entry. The first column holds
the height (y value) of that box, exactly as for the `clustered` style.
@example
     2 columns:        y yerr          bar extends from y-yerr to y+err
     3 columns:        y ymin ymax     bar extends from ymin to ymax
@end example

The appearance of the error bars is controlled by the current value of
@ref{errorbars} and by the optional <linewidth> specification.

Two styles of stacked histogram are supported, chosen by the command
`set style histogram @{rowstacked|columnstacked@}`.  In these styles the data
values from the selected columns are collected into stacks of boxes.
Positive values stack upwards from y=0; negative values stack downwards.
Mixed positive and negative values will produce both an upward stack and a
downward stack.  The default stacking mode is `rowstacked`.

The `rowstacked` style places a box resting on the x-axis for each
data value in the first selected column; the first data value results in
a box a x=1, the second at x=2, and so on.  Boxes corresponding to the
second and subsequent data columns are layered on top of these, resulting
in a stack of boxes at x=1 representing the first data value from each
column, a stack of boxes at x=2 representing the second data value from
each column, and so on.  All boxes derived from any one column are given the
same fill color and/or pattern (see `set style fill`).

The `columnstacked` style is similar, except that each stack of boxes is
built up from a single data column. Each data value from the first specified
data column yields a box in the stack at x=1, each data value from the second
specified data column yields a box in the stack at x=2, and so on.
In this style the color of each box is taken from the row number, rather than
the column number, of the corresponding data field.

Box widths may be modified using the @ref{boxwidth} command.
Box fill styles may be set using the `set style fill` command.

Histograms always use the x1 axis, but may use either y1 or y2.
If a plot contains both histograms and other plot styles, the non-histogram
plot elements may use either the x1 or the x2 axis.

One additional style option `set style histogram nokeyseparators`
is relevant only to plots that contain multiple histograms.
See @ref{newhistogram} for additional discussion of this case.

Examples:
Suppose that the input file contains data values in columns 2, 4, 6, ...
and error estimates in columns 3, 5, 7, ...  This example plots the values
in columns 2 and 4 as a histogram of clustered boxes (the default style).
Because we use iteration in the plot command, any number of data columns can
be handled in a single command. See `plot for`.

@example
      set boxwidth 0.9 relative
      set style data histograms
      set style histogram cluster
      set style fill solid 1.0 border lt -1
      plot for [COL=2:4:2] 'file.dat' using COL

@end example

This will produce a plot with clusters of two boxes (vertical bars) centered
at each integral value on the x axis.  If the first column of the input file
contains labels, they may be placed along the x-axis using the variant command

@example
      plot for [COL=2:4:2] 'file.dat' using COL:xticlabels(1)

@end example

If the file contains both magnitude and range information for each value,
then error bars can be added to the plot.  The following commands will add
error bars extending from (y-<error>) to (y+<error>), capped by horizontal bar
ends drawn the same width as the box itself. The error bars and bar ends are
drawn with linewidth 2, using the border linetype from the current fill style.

@example
      set errorbars fullwidth
      set style fill solid 1 border lt -1
      set style histogram errorbars gap 2 lw 2
      plot for [COL=2:4:2] 'file.dat' using COL:COL+1

@end example

This shows how to plot the same data as a rowstacked histogram.  Just to be
different, the plot command in this example lists the separate columns
individually rather than using iteration.

@example
      set style histogram rowstacked
      plot 'file.dat' using 2, '' using 4:xtic(1)

@end example

This will produce a plot in which each vertical bar corresponds to one row of
data.  Each vertical bar contains a stack of two segments, corresponding in
height to the values found in columns 2 and 4 of the datafile.
Finally, the commands

@example
      set style histogram columnstacked
      plot 'file.dat' using 2, '' using 4

@end example

will produce two vertical stacks, one for each column of data.  The stack at
x=1 will contain a box for each entry in column 2 of the datafile.  The stack
at x=2 will contain a box for each parallel entry in column 4 of the datafile.

Because this interchanges gnuplot's usual interpretation of input rows and
columns, the specification of key titles and x-axis tic labels must also be
modified accordingly. See the comments given below.

@example
      set style histogram columnstacked
      plot '' u 5:key(1)            # uses first column to generate key titles
      plot '' u 5 title columnhead  # uses first row to generate xtic labels

@end example

Note that the two examples just given present exactly the same data values,
but in different formats.

@menu
* newhistogram::
* automated_iteration_over_multiple_columns::
* histogram_color_assignments::
@end menu

@node newhistogram, automated_iteration_over_multiple_columns, histograms, histograms
@subsection newhistogram

@cindex newhistogram

@c ?with histograms newhistogram
@c ?histograms newhistogram
@c ?styles histograms newhistogram
@c ?plotting styles histograms newhistogram
Syntax:

@example
     newhistogram @{"<title>" @{font "name,size"@} @{tc <colorspec>@}@}
                  @{lt <linetype>@} @{fs <fillstyle>@} @{at <x-coord>@}

@end example

More than one set of histograms can appear in a single plot. In this case you
can force a gap between them, and a separate label for each set, by using the
@ref{newhistogram} command.
For example

@example
      set style histogram  cluster
      plot newhistogram "Set A", 'a' using 1, '' using 2, '' using 3, \
           newhistogram "Set B", 'b' using 1, '' using 2, '' using 3

@end example

The labels "Set A" and "Set B" will appear beneath the respective sets of
histograms, under the overall x axis label.

The newhistogram command can also be used to force histogram coloring to
begin with a specific color (linetype). By default colors will continue to
increment successively even across histogram boundaries. Here is an example
using the same coloring for multiple histograms
@example
      plot newhistogram "Set A" lt 4, 'a' using 1, '' using 2, '' using 3, \
           newhistogram "Set B" lt 4, 'b' using 1, '' using 2, '' using 3

@end example

Similarly you can force the next histogram to begin with a specified fillstyle.
If the fillstyle is set to `pattern`, then the pattern used for filling will
be incremented automatically.

Starting a new histogram will normally add a blank entry to the key, so that
titles from this set of histogram components will be separated from those of
the previous histogram.  This blank line may be undesirable if the components
have no individual titles.  It can be suppressed by modifying the style with
`set style histogram nokeyseparators`.

The `at <x-coord>` option sets the x coordinate position of the following
histogram to <x-coord>. For example

@example
       set style histogram cluster
       set style data histogram
       set style fill solid 1.0 border -1
       set xtic 1 offset character 0,0.3
       plot newhistogram "Set A", \
            'file.dat' u 1 t 1, '' u 2 t 2, \
            newhistogram "Set B" at 8, \
            'file.dat' u 2 t 2, '' u 2 t 2

@end example

will position the second histogram to start at x=8.

@node automated_iteration_over_multiple_columns, histogram_color_assignments, newhistogram, histograms
@subsection automated iteration over multiple columns

@cindex automated

@c ?with histograms automated
@c ?histograms automated
@c ?styles histograms automated
@c ?plotting styles histograms automated
If you want to create a histogram from many columns of data in a single file,
it is very convenient to use the plot iteration feature.  See `plot for`.
For example, to create stacked histograms of the data in columns 3 through 8

@example
      set style histogram columnstacked
      plot for [i=3:8] "datafile" using i title columnhead

@end example

@node histogram_color_assignments,  , automated_iteration_over_multiple_columns, histograms
@subsection histogram color assignments

@c ?with histograms colors
@c ?histograms colors
@c ?styles histograms colors
@c ?plotting styles histograms colors
The program assigns a color to each component box in a histogram
automatically such that equivalent data values maintain a consistent
color wherever they appear in the rows or columns of the histogram.
The colors are taken from successive linetypes, starting either with
the next unused linetype or an initial linetype provided in a
@ref{newhistogram} element.

In some cases this mechanism fails due to data sources that are not
truly parallel (i.e. some files contain incomplete data).  In other
cases there may be additional properties of the data that could be
visualized by, say, varying the intensity or saturation of their base
color.  As an alternative to the automatic color assignment, you can
provide an explicit color value for each data value in a second `using`
column via the `linecolor variable` or `rgb variable` mechanism.
See @ref{colorspec}. Depending on the layout of your data, the color category
might correspond to a row header or a column header or a data column.
Note that you will probably have to customize the key sample colors
to match (see `keyentry`).

Example: Suppose file_001.dat through file_008.dat contain one column with
a category identifier A, B, C, ... and a second column with a data value.
Not all of the files contain a line for every category, so they are not
truly parallel. The program would be wrong to assign the same color to the
value from line N in each file.  Instead we assign a color based on the
category in column 1.

@example
     file(i) = sprintf("file_%03d.dat",i)
     array Category = ["A", "B", "C", "D", "E", "F"]
     color(c) = index(Category, strcol(c))
     set style data histogram
     plot for [i=1:8] file(i) using 2:(color(1)) linecolor variable

@end example

A more complete example including generation of a custom key is in the
demo collection
@uref{http://www.gnuplot.info/demo/histogram_colors.html,histogram_colors.dem
}
D histogram_colors 1


@node hsteps, image, histograms, Plotting_styles
@section hsteps

@c ?plotting styles hsteps
@c ?style hsteps
@c ?with hsteps
@cindex hsteps

The 2D plotting style @ref{hsteps} renders a horizontal line segment ("step")
for each data point.  The step may extend to the left, to the right, or to
both sides of the point's x-coordinate.
Additional keywords control the lines connecting adjacent steps and option
area fill between the step and a baseline y value.

Syntax:
@example
     plot <data> with hsteps
                         @{forward|backward@}
                         @{baseline|pillars|link|nolink@}
                         @{@{above|below@} y=<baseline>@}
                         @{offset <y-offset>@}

@end example

@example
     2 columns:  x  y
     3 columns:  x  y  width

@end example

This plot style requires 2 or 3 columns of data.  Additional input columns can
be used to provide variable line or fill colors (see `rgbcolor variable`).
The x values of the input data are assumed to be monotonic.

If the width of each step is not explicitly given through a third input
column, each segment’s width is calculated so that it abuts the adjacent
horizontal segments.  A negative value in column 3 will be treated as a
request for a full-width step.

The `forward` and `backward` keywords can be used to specify the direction
in which the horizontal segment extends from the given x coordinate.
If neither is specified, the horizontal segment extends on both sides
of the given x-value halfway to the x-value of the next adjacent point.
However, for the first and last points, where there are no corresponding outer
adjacent points, the horizontal segments are extrapolated using distances to
the adjacent inner points (see @ref{histeps}, @ref{boxes}).

The default (`baseline`) and `pillar` variants employ a baseline y value.
If not provided in the plot command, the baseline is taken to be y=0.
If the plot command uses a fill style, the baseline also serves to
delimit one boundary of the fill area.
Four style variants are possible.

`baseline` (default): If there is no gap along x between adjacent steps,
they are connected by a vertical line segment between them.  This produces
a curve like the @ref{steps}, @ref{histeps}, or @ref{fsteps} styles.  If there is a gap
between steps, usually because the width is less than the point spacing,
the connecting line drops to the baseline and continues along it before
rising again.  This produces a sequence of rectangular pulses.

@example
     set xzeroaxis
     plot $data using 1:2 with hsteps
     plot $data using 1:2:(0.5) with hsteps

@end example

`pillar`: At each end of each step a vertical line is drawn to the baseline.
Note that no horizontal line segments are drawn at the baseline.

@example
     plot $data using 1:2       with hsteps pillar
     plot $data using 1:2:(0.5) with hsteps pillar
     plot $data using 1:2:(0.5) \
                with hsteps pillar above fc "blue", \
          $data using 1:2:(0.5) \
                with hsteps pillar below fc "red"

@end example


`nolink`: No connecting line is drawn between adjacent steps.
Baseline and fill properties are not relevant to this variant.

@example
    plot $data using 1:2 with hsteps nolink, \
         $data using 1:2 with hsteps nolink forward, \
         $data using 1:2 with hsteps nolink backward, \
         $data using 1:2 with points pt "|"

@end example


@ref{link}: Adjacent steps steps are connected by a single straight line segment.
Depending on the step widths, this line may be diagonal rather than vertical.

Example: The @ref{link} variant can be superimposed onto the `pillar` variant to
produce a stacked histogram plot in which category boundaries are connected.

@example
     set style line 11 lw 2 lc "gray" dt "."
     set style line 12 lw 2 lc variable
     plot $data using 1:3:(0.5)   ls 11 with hsteps link, \
          $data using 1:3:(0.5):1 ls 12 with hsteps pillar fs solid 0.7 border, \
          $data using 1:4:(0.5)   ls 11 with hsteps link, \
          $data using 1:4:(0.5):1 ls 12 with hsteps pillar fs transparent pattern 1 border

@end example


@menu
* offset::
* missing_data::
@end menu

@node offset, missing_data, hsteps, hsteps
@subsection offset

@c ?with hsteps offset
@c ?hsteps offset
The offset value modifies any of the @ref{hsteps} variants by adding an
increment to the y value of both the data point itself (column 2) and the
baseline of the plot it appears in.  An example of use is to draw a logic
circuit timing chart in which pulse waveforms are aligned vertically.
In general the offset can be used to stack plots from multiple data sets
that share a common range of y values.

@example
     # bit(k,char) is a function that returns 0 or 1
     # for the state of bit k in an ASCII character
     set style fill solid 0.2 border
     plot for [k=1:8] STR using 1:(bit(k,STR[$1])):(0.5) \
          with hsteps fillcolor "black" offset k

@end example


@node missing_data,  , offset, hsteps
@subsection missing data

@c ?with hsteps missing-data
@c ?hsteps missing-data
In the hsteps style, empty lines, NaN values, and missing data have distinct
meanings.  If an empty line is present in the data, the data series is reset
at that point.  This is analogous to a blank line causing a break to start a
new curve in the case of `with lines`.  If an x-value contains NaN, it is
processed in the same manner as an empty line.  If the x-value is valid but
the y-value contains NaN, no horizontal line is drawn for that particular data
point but the x-value is still used if needed to estimate the step width.


@node image, impulses, hsteps, Plotting_styles
@section image

@c ?plotting styles image
@c ?style image
@c ?with image
@cindex image

@cindex rgbimage

@cindex rgbalpha

The `image`, @ref{rgbimage}, and @ref{rgbalpha} plotting styles all project a
uniformly sampled grid of data values onto a plane in either 2D or 3D.
The input data may be an actual bitmapped image, perhaps converted from a
standard format such as PNG, or a simple array of numerical values.
These plot styles are often used to produce heatmaps.
For 2D heatmaps in polar coordinates, see `set polar grid`.

This figure illustrates generation of a heat map from an array of scalar values.
The current palette is used to map each value onto the color assigned to the
corresponding pixel. See also `sparse`.
@example
      plot '-' matrix with image
      5 4 3 1 0
      2 2 0 0 1
      0 0 0 1 0
      0 1 2 4 3
      e
      e

@end example

Each pixel (data point) of the input 2D image will become a rectangle or
parallelepiped in the plot. The coordinates of each data point will determine
the center of the parallelepiped.  That is, an M x N set of data will form an
image with M x N pixels.  This is different from the pm3d plotting style, where
an M x N set of data will form a surface of (M-1) x (N-1) elements.  The scan
directions for a binary image data grid can be further controlled by additional
keywords. See `binary keywords flipx`, `keywords center`, and `keywords rotate`.

Image data can be scaled to fill a particular rectangle within a 2D plot
coordinate system by specifying the x and y extent of each pixel.
See `binary keywords dx` and `dy`. To generate the figure at the right,
the same input image was placed multiple times, each with a specified dx, dy,
and origin. The input PNG image of a building is 50x128 pixels.  The tall
building was drawn by mapping this using `dx=0.5 dy=1.5`.  The short building
used a mapping `dx=0.5 dy=0.35`.

The `image` style handles input pixels containing a grayscale or color palette
value. Thus 2D plots (`plot` command) require 3 columns of data (x,y,value),
while 3D plots (`splot` command) require 4 columns of data (x,y,z,value).

The @ref{rgbimage} style handles input pixels that are described by three separate
values for the red, green, and blue components.  Thus 5D data (x,y,r,g,b) is
needed for `plot` and 6D data (x,y,z,r,g,b) for `splot`.  The individual red,
green, and blue components are assumed to lie in the range [0:255].
This matches the convention used in PNG and JPEG files (see @ref{filetype}).
However some data files use an alternative convention in which RGB components
are floating point values in the range [0:1]. To use the @ref{rgbimage} style with
such data, first use the command `set rgbmax 1.0`.

@cindex alpha channel

The @ref{rgbalpha} style handles input pixels that contain alpha channel
(transparency) information in addition to the red, green, and blue components.
Thus 6D data (x,y,r,g,b,a) is needed for `plot` and 7D data (x,y,z,r,g,b,a)
for `splot`.  The r, g, b, and alpha components are assumed to lie in the range
[0:255].  To plot data for which RGBA components are floating point values in
the range [0:1], first use the command `set rgbmax 1.0`.

If only a single data column is provided for the color components of either
rgbimage or rgbalpha plots, it is interpreted as containing 32 bit packed ARGB
data using the convention that alpha=0 means opaque and alpha=255 means fully
transparent. Note that this is backwards from the alpha convention if alpha
is supplied in a separate column, but matches the ARGB packing convention for
individual commands to set color. See @ref{colorspec}.

@menu
* transparency::
* image_pixels::
@end menu

@node transparency, image_pixels, image, image
@subsection transparency

@c ?image transparency
@cindex transparency

@c ?alpha channel
The @ref{rgbalpha} plotting style assumes that each pixel of input data contains
an alpha value in the range [0:255].  A pixel with alpha = 0 is purely
transparent and does not alter the underlying contents of the plot. A pixel
with alpha = 255 is purely opaque.  All terminal types can handle these two
extreme cases.  A pixel with 0 < alpha < 255 is partially transparent.
Terminal types that do not support partial transparency will round this value
to 0 or 255.
D argb_hexdata 2

@node image_pixels,  , transparency, image
@subsection image pixels

@c ?plotting styles image pixels
@c ?style image pixels
@c ?with image pixels
@c ?image pixels
@cindex pixels

@cindex heatmaps

Some terminals use device- or library-specific optimizations to render image
data within a rectangular 2D area. This sometimes produces undesirable output,
e.g. inter-pixel smoothing, bad clipping or missing edges. An example of this
is the smoothing applied by web browsers when rendering svg images.
The `pixels` keyword tells gnuplot to use generic code to render the image
pixel-by-pixel.  This rendering mode is slower and may result in larger output
files, but should produce a consistent rendered view on all terminals.
It may in particular be preferable for heatmaps with a small number of pixels.
Example:
@example
      plot 'data' with image pixels

@end example


@node impulses, labels, image, Plotting_styles
@section impulses

@c ?plotting styles impulses
@c ?style impulses
@c ?with impulses
@cindex impulses

The @ref{impulses} style displays a vertical line from y=0 to the y value of each
point (2D) or from z=0 to the z value of each point (3D).  Note that the y or z
values may be negative.  Data from additional columns can be used to control
the color of each impulse.  To use this style effectively in 3D plots, it is
useful to choose thick lines (linewidth > 1). This approximates a 3D bar chart.

@example
     1 column:   y
     2 columns:  x  y     # line from [x,0] to [x,y]  (2D)
     3 columns:  x  y  z  # line from [x,y,0] to [x,y,z] (3D)

@end example


@node labels, lines, impulses, Plotting_styles
@section labels

@c ?plotting styles labels
@c ?style labels
@c ?with labels
@cindex labels

The @ref{labels} style reads coordinates and text from a data file and places
the text string at the corresponding 2D or 3D position.  3 or 4 input columns
of basic data are required.  Additional input columns may be used to provide
properties that vary point by point such as text rotation angle (keywords
`rotate variable`) or color (see `textcolor variable`).

@example
     3 columns:  x  y  string    # 2D version
     4 columns:  x  y  z  string # 3D version

@end example

The font, color, rotation angle and other properties of the printed text
may be specified as additional command options (see `set label`). The example
below generates a 2D plot with text labels constructed from the city whose
name is taken from column 1 of the input file, and whose geographic coordinates
are in columns 4 and 5. The font size is calculated from the value in column 3,
in this case the population.

@example
  CityName(String,Size) = sprintf("@{/=%d %s@}", Scale(Size), String)
  plot 'cities.dat' using 5:4:(CityName(stringcolumn(1),$3)) with labels

@end example

If we did not want to adjust the font size to a different size for each city
name, the command would be much simpler:

@example
  plot 'cities.dat' using 5:4:1 with labels font "Times,8"

@end example

If the labels are marked as @ref{hypertext} then the text only appears if the
mouse is hovering over the corresponding anchor point.  See @ref{hypertext}.
In this case you must enable the label's `point` attribute so that there is
a point to act as the hypertext anchor:

@example
  plot 'cities.dat' using 5:4:1 with labels hypertext point pt 7

@end example

The @ref{labels} style can also be used in place of the `points` style when the
set of predefined point symbols is not suitable or not sufficiently flexible.
For example, here we define a set of chosen single-character symbols and assign
one of them to each point in a plot based on the value in data column 3:

@example
  set encoding utf8
  symbol(z) = "∙□+⊙♠♣♡♢"[int(z):int(z)]
  splot 'file' using 1:2:(symbol($3)) with labels

@end example

This example shows use of labels with variable rotation angle in column 4 and
textcolor ("tc") in column 5.  Note that variable color is always taken from
the last column in the `using` specifier.

@example
  plot $Data using 1:2:3:4:5 with labels tc variable rotate variable

@end example


@node lines, linespoints, labels, Plotting_styles
@section lines

@c ?plotting styles lines
@c ?style lines
@c ?with lines
@cindex lines

The `lines` style connects adjacent points with straight line segments.
It may be used in either 2D or 3D plots. The basic form requires 1, 2, or 3
columns of input data.
Additional input columns may be used to provide information such as
variable line color (see `rgbcolor variable`).

2D form (no "using" spec)
@example
   1 column:   y     # implicit x from row number
   2 columns:  x y
@end example

3D form (no "using" spec)
@example
   1 column:   z     # implicit x from row, y from index
   3 columns:  x y z

@end example

See also `linetypes`, `linewidth`, and `linestyle`.

@node linespoints, masking, lines, Plotting_styles
@section linespoints

@c ?plotting styles linespoints
@c ?style linespoints
@c ?with linespoints
@c ?style lp
@c ?with lp
@cindex linespoints

@cindex lp

@cindex pointinterval

@cindex pointnumber

The @ref{linespoints} style (short form `lp`) connects adjacent points with
straight line segments and then goes back to draw a small symbol at each point.
Points are drawn with the default size determined by @ref{pointsize} unless a
specific point size is given in the plot command or a variable point size is
provided in an additional column of input data.  Additional input columns may
also be used to provide information such as variable line color.
See `lines` and `points`.

Two keywords control whether or not every point in the plot is marked with a
symbol, `pointinterval` (short form `pi`) and `pointnumber` (short form `pn`).

`pi N` or `pi -N` tells gnuplot to only place a symbol on every Nth point.
A negative value for N will erase the portion of line segment that passes
underneath the symbol. The size of the erased portion is controlled by
@ref{pointintervalbox}.

`pn N` or `pn -N` tells gnuplot to label only N of the data points, evenly
spaced over the data set.  As with `pi`, a negative value for N will erase the
portion of line segment that passes underneath the symbol.


@node masking, parallelaxes, linespoints, Plotting_styles
@section masking

@c ?plotting styles mask
@c ?plot with mask
@c ?with mask
@cindex masking

The plotting style `with mask` is used to define a masking region that
can be applied to pm3d surfaces or to images specified later in the same
`plot` or `splot` command.  Input data is interpreted as a stream of [x,y]
or [x,y,z] coordinates defining the vertices of one or more polygons.
As in plotting style @ref{polygons}, polygons are separated by a blank line.
If the mask is part of a 3D (splot) command then a column of z values is
required on input but is currently not used for anything.

If a mask definition is present in the plot command, then any subsequent image
or pm3d surface in the same command can be masked by adding the keyword `mask`.
If no mask has been defined, this keyword is ignored.

This example illustrates using the convex hull circumscribing a set of points
to mask the corresponding region of a pm3d surface.
@c ^<p align="center"><picture>
@c ^   <source srcset="figure_mask.webp" type="image/webp">
@c ^   <img src="figure_mask.png" alt="figure_mask">
@c ^   </picture><p>
@example
   set table $HULL
   plot $POINTS using 1:2 convexhull
   unset table

@end example

@example
   set view map
   set multiplot layout 1,2
   splot $POINTS using 1:2:3 with pm3d, \
         $POINTS using 1:2:(0) nogrid with points
   splot $HULL using 1:2:(0) with mask, \
         $POINTS using 1:2:3 mask with pm3d
   unset multiplot
@end example

The `splot` command for the first panel renders the unmasked surface created by
dgrid3d from the original points and then the points themselves, in that order.
The `splot` command for the second panel renders the masked surface.  Note that
definition of the mask must come first (plot `with mask`), followed by the pm3d
surface it applies to (plot style `with pm3d` modified by the `mask` keyword).
A more complete version of this example is in the demo collection
@uref{http://www.gnuplot.info/demo/mask_pm3d.html,mask_pm3d.dem
}

Although it is not shown here, a single mask can include multiple polygonal
regions.

The masking commands are EXPERIMENTAL. Details may change in a future release.


@node parallelaxes, Polar_plots, masking, Plotting_styles
@section parallelaxes

@c ?plotting styles parallelaxes
@c ?plot with parallelaxes
@c ?with parallelaxes
@cindex parallelaxes

@cindex parallel

Parallel axis plots can highlight correlation in a multidimensional data set.
Individual columns of input data are each associated with a separately scaled
vertical axis.  If all columns are drawn from a single file then each line on
the plot represents values from a single row of data in that file.
It is common to use some discrete categorization to assign line colors,
allowing visual exploration of the correlation between this categorization and
the axis dimensions.

Syntax:

@example
    set style data parallelaxes
    plot $DATA using col1@{:varcol1@} @{at <xpos>@} @{<line properties@}, \
         $DATA using col2, ...

@end example

The `at` keyword allows explicit placement of the parallel vertical axes
along the x axis as in the example below.  If no explicit x coordinate is
provide axis N will be placed at x=N.

@example
     array xpos[5] = [1, 5, 6, 7, 11, 12]
     plot for [col=1:5] $DATA using col with parallelaxes at xpos[col]

@end example

By default gnuplot will automatically determine the range and scale of the
individual axes from the input data, but the usual `set axis range` commands
can be used to customize this.  See @ref{paxis}.

@node Polar_plots, points, parallelaxes, Plotting_styles
@section Polar plots

@cindex polar
@opindex polar


Polar plots are generated by changing the current coordinate system to
polar before issuing a plot command.  The option `set polar` tells gnuplot to
interpret input 2D coordinates as <angle>,<radius> rather than <x>,<y>.
Many, but not all, of the 2D plotting styles work in polar mode.
The figure shows a combination of plot styles `lines` and @ref{filledcurves}.
See `set polar`, @ref{rrange}, `set size square`, @ref{theta}, @ref{ttics}.

@c ?polar heatmap
Polar heatmaps can be generated using plot style `with surface` together with
`set polar grid`.
@example
     set size square
     set angle degrees
     set rtics
     set grid polar
     set palette cubehelix negative gamma 0.8
     set polar grid gauss kdensity scale 35
     set polar grid theta [0:190]
     plot DATA with surface, DATA with points pt 7

@end example


@node points, polygons, Polar_plots, Plotting_styles
@section points

@c ?plotting styles points
@c ?style points
@c ?with points
@cindex points

@c ?point type
@cindex pointtype

The `points` style displays a small symbol at each point. The command @ref{pointsize} may be used to change the default size of all points. The point type
defaults to that of the linetype. See `linetypes`.  If no `using` spec is found
in the plot command, input data columns are interpreted implicitly in the order
`x y pointsize pointtype color` as described below.

The first 8 point types are shared by all terminals. Individual terminals may
provide a much larger number of distinct point types. Use the `test` command
to show what is provided by the current terminal settings.

Alternatively any single printable character may be given instead of a
numerical point type, as in the example below.  You may use any unicode
character as the pointtype (assumes utf8 support). See `escape sequences`.
Longer strings may be plotted using plot style @ref{labels} rather than `points`.

@example
     plot f(x) with points pt "#"
     plot d(x) with points pt "\U+2299"

@end example


@menu
* variable_point_properties::
@end menu

@node variable_point_properties,  , points, points
@subsection variable point properties

@c ?points variable
@c ?with points variable
@cindex variable

@cindex variable

@c ?pointtype variable
@c ?pointsize variable
Plot styles that contain a point symbol optionally accept additional data
columns in the `using` specifier to control the appearance of that point.
This is indicated by modifying the keywords `pointtype`, @ref{pointsize}, or
`linecolor` in the plot command with the additional keyword `variable`
rather than providing a number.
Plot style @ref{labels} also accepts a variable text rotation angle.
Example:
@example
     # Input data provides [x,y] in columns 1:2
     # point size is given in column 5
     # RGB color is given as hexadecimal value in column 4
     # all points use pointtype 7
       plot DATA using 1:2:5:4 with points lc rgb variable ps variable pt 7

@end example

If more than one variable property is specified, columns are interpreted in
the order below regardless of the order of keywords in the plot command.

@example
    textrotation : pointsize : pointtype : color

@end example

Thus in the example above "lc rgb variable" appears first in the plot command
but the color is taken from the final column (4) given by `using`.
Variable color is always taken from the last additional column.
There are several methods of specifying variable color. See @ref{colorspec}.

Note: for information on user-defined program variables, see `variables`.

@node polygons, rgbalpha, points, Plotting_styles
@section polygons

@c ?plotting styles polygons
@c ?style polygons
@c ?with polygons
@cindex polygons

2D plots:

@example
     plot DATA @{using 1:2@} with polygons

@end example

@ref{polygons} is treated as `plot with filledcurves closed` except that
each polygon's border is rendered as a closed curve even if its first and last
points are not the same.  The border line type is taken from the fill style.
The input data file may contain multiple polygons separated by single blank
lines.  Each polygon can be assigned a separate fill color by providing a third
using specifier and the keywords `fc variable` (value is interpreted as a
linetype) or `fc rgb variable` (value is interpreted as a 24-bit RGB color).
Only the color value from the first vertex of the polygon is used.

3D plots:

@example
     splot DATA @{using x:y:z@} with polygons
           @{fillstyle <fillstyle spec>@}
           @{fillcolor <colorspec>@}

@end example

@ref{polygons} uses pm3d to render individual triangles, quadrangles,
and larger polygons in 3D.  These may be facets of a 3D surface or isolated
shapes. The code assumes that the vertices lie in a plane.
Vertices defining individual polygons are read from successive records of the
input file.  A blank line separates one polygon from the next.

The fill style and color may be specified in the splot command, otherwise the
global fillstyle from `set style fill` is used.  Due to limitations in the
pm3d code, a single border line style from @ref{border} is applied to all
3D polygons.  This restriction may be removed in a later gnuplot version,
which will impose a distinction between the linecolor and fillcolor properties.

Each polygon may be assigned a separate fill color by providing a fourth using
specifier and the keywords `fc variable` (value is interpreted as a linetype)
or `fc rgb variable` (value is interpreted as a 24-bit RGB color).
Only the color value from the first vertex of the polygon is used.

pm3d sort order and lighting are applied to the faces. It is probably always
desirable to use `set pm3d depthorder`.

@example
     set xyplane at 0
     set view equal xyz
     unset border
     unset tics
     set pm3d depth
     set pm3d border lc "black" lw 1.5
     splot 'icosahedron.dat' with polygons \
           fs transparent solid 0.8 fc bgnd

@end example


@node rgbalpha, rgbimage, polygons, Plotting_styles
@section rgbalpha

@c ?plotting styles rgbalpha
@c ?style rgbalpha
@c ?with rgbalpha
See `image`.

@node rgbimage, sectors, rgbalpha, Plotting_styles
@section rgbimage

@c ?plotting styles rgbimage
@c ?style rgbimage
@c ?with rgbimage
See `image`.


@node sectors, spiderplot, rgbimage, Plotting_styles
@section sectors

@c ?plotting styles sectors
@c ?with sectors
@cindex sectors

@cindex windrose

The 2D plotting style @ref{sectors} renders one annular segment ("sector")
for each line of input data.  The shape of each sector is described by four
required data values.  An additional pair of data values can be included to
specify the origin of the annulus this sector is taken from.
A per-sector color may be provided in an additional column.

The plot style itself can be used in either cartesian or polar mode
(`set polar`).  The units and interpretation for the azimuth and the
sector angle are controlled using @ref{angles} and @ref{theta}.

Columns 1 and 2 specify the azimuth (theta) and radius (r) of one corner
of the sector.
Columns 3 and 4 specify the angular and radial extents of the sector
("sector_angle" and "annular_width").
Columns 5 and 6, if present, specify the coordinates of the center of the
annulus (default [0,0]).  The interpretation is [x,y] in cartesian mode
and [theta,r] in polar mode.

Syntax:
@example
    plot DATA @{using specifier@} @{units xy | units xx | units yy@}

@end example

using specifier
@example
    4 columns: azimuth radius sector_angle annular_width
    5 columns: azimuth radius sector_angle annular_width color
    6 columnd: azimuth radius sector_angle annular_width center_x center_y
    7 columns: azimuth radius sector_angle annular_width center_x center_y color

@end example

Note that if the x and y axis scales are not equal, the envelope of the full
annulus in x/y coordinates will appear as an ellipse rather than a circle.
The annulus envelope and thus the apparent sector annular width can be adjusted
to correct for unequal axis scales using the same mechanism as for ellipses.
Adding `units xx` to the command line causes the sector to be rendered as if
the current x axis scale applied equally to both x and y.
Similarly `units yy` causes the sector to be rendered as if the current
y axis scale applied equally to both x and y.
See @ref{isotropic}, `set style ellipse`.

Plotting with sectors can provide polar coordinate equivalents for the
cartesian plot styles @ref{boxes} (see wind rose figure), @ref{boxxyerror} and
`image pixels` (see example in @ref{heatmaps}).  Because sector plots are
compatible with cartesian mode plot layout, multiple plots can be placed
at different places on a single graph, which would not be possible for
other polar mode plot styles.

An example of using sectors to create a wind rose in shown here.
Other applications include polar heatmaps, dial charts, pie/donut charts,
and annular error boxes for data points in polar coordinates.
Worked examples for all of these are given in the
@uref{http://www.gnuplot.info/demo/sectors.html,sectors demo.
}


@node spiderplot, steps, sectors, Plotting_styles
@section spiderplot

@c ?plotting styles spiderplot
@c ?with spiderplot
@cindex spiderplot
@opindex spiderplot


@c ?radar chart
Spider plots are essentially parallel axis plots in which the axes are arranged
radially rather than vertically. Such plots are sometimes called `radar charts`.
In gnuplot this requires working within a coordinate system established by the
command @ref{spiderplot}, analogous to `set polar` except that the angular
coordinate is determined implicitly by the parallel axis number. The appearance,
labelling, and tic placement of the axes is controlled by @ref{paxis}.
Further style choices are controlled using @ref{spiderplot}, `set grid`,
and the individual components of the plot command.

Because each spider plot corresponds to a row of data rather than a column,
it would make no sense to generate key entry titles in the normal way.
Instead, if a plot component contains a title the text is used to label the
corresponding axis. This overrides any previous `set paxis n label "Foo"`.
To place a title in the key, you can either use a separate `keyentry` command
or extract text from a column in the input file with the `key(column)`
using specifier.  See `keyentry`, `using key`.

In this figure a spiderplot with 5 axes is used to compare multiple entities
that are each characterized by five scores.  Each line (row) in $DATA
generates a new polygon on the plot.

@example
     $DATA << EOD
              A      B      C      D      E      F
     George  15     75     20     43     90     50
     Harriet 40     40     40     60     30     50
     EOD
     set spiderplot
     set style spiderplot fs transparent solid 0.2 border
     set for [p=1:5] paxis p range [0:100]
     set for [p=2:5] paxis p tics format ""
     set             paxis 1 tics font ",9"
     set for [p=1:5] paxis p label sprintf("Score %d",p)
     set grid spiderplot
     plot for [i=1:5] $DATA using i:key(1)

@end example


@menu
* newspiderplot::
@end menu

@node newspiderplot,  , spiderplot, spiderplot
@subsection newspiderplot

@cindex newspiderplot

@c ?spiderplot newspiderplot
Normally the sequential elements of a plot command @ref{spiderplot} each
correspond to one vertex of a single polygon.  In order to describe multiple
polygons in the same plot command, they must be separated by @ref{newspiderplot}.
Example:
@example
     # One polygon with 10 vertices
     plot for [i=1:5] 'A' using i, for [j=1:5] 'B' using j
     # Two polygons with 5 vertices
     plot for [i=1:5] 'A' using i, newspiderplot, for [j=1:5] 'B' using j

@end example


@node steps, surface, spiderplot, Plotting_styles
@section steps

@c ?plotting styles steps
@c ?style steps
@c ?with steps
@cindex steps

The @ref{steps} style is only relevant to 2D plotting.  It connects consecutive
points with two line segments: the first from (x1,y1) to (x2,y1) and the
second from (x2,y1) to (x2,y2).  The input column requires are the same as for
plot styles `lines` and `points`.  The difference between @ref{fsteps} and @ref{steps}
is that @ref{fsteps} traces first the change in y and then the change in x.
@ref{steps} traces first the change in x and then the change in y.  To fill the
area between the curve and the baseline at y=0, use @ref{fillsteps}.
See also
@uref{http://www.gnuplot.info/demo/steps.html,steps demo.
}
@example
   1 column:   y     # implicit x from line number (column 0)
   2 columns:  x y

@end example


@node surface, vectors, steps, Plotting_styles
@section surface

@c ?plotting styles surface
@c ?style surface
@c ?with surface
The plot style `with surface` has two uses.

In 3D plots, `with surface` always produces a surface.
If a 3D data set is recognizable as a mesh (grid) then by default the program
implicitly treats the plot style `with lines` as requesting a gridded surface,
making `with lines` a synonym for `with surface`.  However the command
`set surface explicit` suppresses this treatment, in which case `with surface`
and `with lines` become distinct styles that may be used in the same plot.

If you have points in 3D that are not recognized as a grid, you may be able
to fit a suitable grid first.  See @ref{dgrid3d}.

In 2D polar mode plots, `with surface` is used to produce a solid fill gridded
represention of the data. Generation of the surface is controlled using the
command `set polar grid`.


@node vectors, xerrorbars, surface, Plotting_styles
@section vectors

@c ?plotting styles vectors
@c ?style vectors
@c ?with vectors
@cindex vectors

The 2D @ref{vectors} style draws a vector from (x,y) to (x+xdelta,y+ydelta).
The 3D @ref{vectors} style is similar, but requires six columns of basic data.
In both cases, an additional input column (5th in 2D, 7th in 3D) may be used
to provide variable (per-datapoint) color information.
(see `linecolor` and `rgbcolor variable`).
A small arrowhead is drawn at the end of each vector.

@example
     4 columns:  x  y  xdelta  ydelta
     6 columns:  x  y  z  xdelta  ydelta  zdelta

@end example

The keywords "with vectors" may be followed by inline arrow style properties,
by reference to a predefined arrow style, or by a request to read the index
of the desired arrow style for each vector from a separate input column.
See the first three examples below.

Examples:

@example
     plot ... using 1:2:3:4 with vectors filled heads
     plot ... using 1:2:3:4 with vectors arrowstyle 3
     plot ... using 1:2:3:4:5 with vectors arrowstyle variable
     splot 'file.dat' using 1:2:3:(1):(1):(1) with vectors filled head lw 2

@end example

Notes:  You cannot mix the `arrowstyle` keyword with other line style
qualifiers in the plot command. An additional column of color values is
required if the arrow style includes `lc variable` or `lc rgb variable`.

splot with vectors is supported only for `set mapping cartesian`.
`set clip one` and `set clip two` affect vectors drawn in 2D.
See `set clip` and `arrowstyle`.

See also the 2D plot style `with arrows` that is identical to @ref{vectors}
except that each arrow is specified using x:y:length:angle.


@node xerrorbars, xyerrorbars, vectors, Plotting_styles
@section xerrorbars

@c ?plotting styles xerrorbars
@c ?style xerrorbars
@c ?with xerrorbars
@cindex xerrorbars

The @ref{xerrorbars} style is only relevant to 2D data plots.  @ref{xerrorbars} is
like `points`, except that a horizontal error bar is also drawn.  At each point
(x,y), a line is drawn from (xlow,y) to (xhigh,y) or from (x-xdelta,y) to
(x+xdelta,y), depending on how many data columns are provided.  The appearance
of the tic mark at the ends of the bar is controlled by @ref{errorbars}.
The clearance between the point and the error bars is controlled by
@ref{pointintervalbox}.  To have the error bars pass directly through the
point with no interruption, use @ref{pointintervalbox}.
The basic style requires either 3 or 4 columns:

@example
     3 columns:  x  y  xdelta
     4 columns:  x  y  xlow  xhigh

@end example

An additional input column (4th or 5th) may be used to provide variable color.
This style does not permit variable point properties.


@node xyerrorbars, xerrorlines, xerrorbars, Plotting_styles
@section xyerrorbars

@c ?plotting styles xyerrorbars
@c ?style xyerrorbars
@c ?with xyerrorbars
@cindex xyerrorbars

The @ref{xyerrorbars} style is only relevant to 2D data plots.  @ref{xyerrorbars} is
like `points`, except that horizontal and vertical error bars are also drawn.
At each point (x,y), lines are drawn from (x,y-ydelta) to (x,y+ydelta) and
from (x-xdelta,y) to (x+xdelta,y) or from (x,ylow) to (x,yhigh) and from
(xlow,y) to (xhigh,y), depending upon the number of data columns provided.
The appearance of the tic mark at the ends of the bar is controlled by
@ref{errorbars}.  The clearance between the point and the error bars is
controlled by @ref{pointintervalbox}. To have the error bars pass directly
through the point with no interruption, use @ref{pointintervalbox}.
Either 4 or 6 input columns are required.

@example
     4 columns:  x  y  xdelta  ydelta
     6 columns:  x  y  xlow  xhigh  ylow  yhigh

@end example

If data are provided in an unsupported mixed form, the `using` specifier of the
`plot` command should be used to set up the appropriate form.  For example,
if the data are of the form (x,y,xdelta,ylow,yhigh), then you can use

@example
      plot 'data' using 1:2:($1-$3):($1+$3):4:5 with xyerrorbars

@end example

An additional input column (5th or 7th) may be used to provide variable color.
This style does not permit variable point properties.


@node xerrorlines, xyerrorlines, xyerrorbars, Plotting_styles
@section xerrorlines

@c ?plotting styles xerrorlines
@c ?style xerrorlines
@c ?with xerrorlines
@cindex xerrorlines

The @ref{xerrorlines} style is only relevant to 2D data plots.
@ref{xerrorlines} is like @ref{linespoints}, except that a horizontal error line is
also drawn. At each point (x,y), a line is drawn from (xlow,y) to (xhigh,y)
or from (x-xdelta,y) to (x+xdelta,y), depending on how many data columns are
provided.  The appearance of the tic mark at the ends of the bar is controlled
by @ref{errorbars}.  The basic style requires either 3 or 4 columns:

@example
     3 columns:  x  y  xdelta
     4 columns:  x  y  xlow  xhigh

@end example

An additional input column (4th or 5th) may be used to provide variable color.
This style does not permit variable point properties.


@node xyerrorlines, yerrorbars, xerrorlines, Plotting_styles
@section xyerrorlines

@c ?plotting styles xyerrorlines
@c ?style xyerrorlines
@c ?with xyerrorlines
@cindex xyerrorlines

The @ref{xyerrorlines} style is only relevant to 2D data plots.
@ref{xyerrorlines} is like @ref{linespoints}, except that horizontal and vertical
error bars are also drawn. At each point (x,y), lines are drawn from
(x,y-ydelta) to (x,y+ydelta) and from (x-xdelta,y) to (x+xdelta,y) or from
(x,ylow) to (x,yhigh) and from (xlow,y) to (xhigh,y), depending upon the
number of data columns provided.  The appearance of the tic mark at the ends
of the bar is controlled by @ref{errorbars}.
Either 4 or 6 input columns are required.

@example
     4 columns:  x  y  xdelta  ydelta
     6 columns:  x  y  xlow  xhigh  ylow  yhigh

@end example

If data are provided in an unsupported mixed form, the `using` specifier of the
`plot` command should be used to set up the appropriate form.  For example,
if the data are of the form (x,y,xdelta,ylow,yhigh), then you can use

@example
      plot 'data' using 1:2:($1-$3):($1+$3):4:5 with xyerrorlines

@end example

An additional input column (5th or 7th) may be used to provide variable color.
This style does not permit variable point properties.


@node yerrorbars, yerrorlines, xyerrorlines, Plotting_styles
@section yerrorbars

@c ?plotting styles yerrorbars
@c ?plotting styles errorbars
@c ?style yerrorbars
@c ?with yerrorbars
@c ?style errorbars
@c ?with errorbars
@cindex yerrorbars

@cindex errorbars
@opindex errorbars


The @ref{yerrorbars} (or @ref{errorbars}) style is only relevant to 2D data plots.
@ref{yerrorbars} is like `points`, except that a vertical error bar is also drawn.
At each point (x,y), a line is drawn from (x,y-ydelta) to (x,y+ydelta) or
from (x,ylow) to (x,yhigh), depending on how many data columns are provided.
The appearance of the tic mark at the ends of the bar is controlled by
@ref{errorbars}.  The clearance between the point and the error bars is
controlled by @ref{pointintervalbox}.  To have the error bars pass directly
through the point with no interruption, use @ref{pointintervalbox}.

@example
     2 columns:  [implicit x] y ydelta
     3 columns:  x  y  ydelta
     4 columns:  x  y  ylow  yhigh

@end example

Additional input columns may be used to provide information such as variable
point size, point type, or color.

See also
@uref{http://www.gnuplot.info/demo/mgr.html,errorbar demo.
}


@node yerrorlines, 3D_plots, yerrorbars, Plotting_styles
@section yerrorlines

@c ?plotting styles yerrorlines
@c ?plotting styles errorlines
@c ?style yerrorlines
@c ?with yerrorlines
@c ?style errorlines
@c ?with errorlines
@cindex yerrorlines

@cindex errorlines

The @ref{yerrorlines} (or `errorlines`) style is only relevant to 2D data
plots. @ref{yerrorlines} is like @ref{linespoints}, except that a vertical error line
is also drawn. At each point (x,y), a line is drawn from (x,y-ydelta) to
(x,y+ydelta) or from (x,ylow) to (x,yhigh), depending on how many data columns
are provided.  The appearance of the tic mark at the ends of the bar is
controlled by @ref{errorbars}.  Either 3 or 4 input columns are required.

@example
     3 columns:  x  y  ydelta
     4 columns:  x  y  ylow  yhigh

@end example

Additional input columns may be used to provide information such as variable
point size, point type, or color.

See also
@uref{http://www.gnuplot.info/demo/mgr.html,errorbar demo.
}

@node 3D_plots, Fence_plots, yerrorlines, Plotting_styles
@section 3D plots

@c ?3D plots
@c ?plotting styles 3D plots
@cindex 3D

3D plots are generated using the command `splot` rather than `plot`.
Many of the 2D plot styles (points, images, impulse, labels, vectors) can also
be used in 3D by providing an extra column of data containing z coordinate.
Some plot types (pm3d coloring, surfaces, contours) must be generated using the
`splot` command even if only a 2D projection is wanted.

@menu
* surface_plots::
* 2D_projection_(set_view_map)::
* PM3D_plots::
@end menu

@node surface_plots, 2D_projection_(set_view_map), 3D_plots, 3D_plots
@subsection surface plots

@c ?surface plots
@cindex surface
@opindex surface


The styles `splot with lines` and `splot with surface` both generate a surface
made from a grid of lines.  Solid surfaces can be generated using the style
`splot with pm3d`.  Usually the surface is displayed at some convenient viewing
angle, such that it clearly represents a 3D surface.  See @ref{view}.
In this case the X, Y, and Z axes are all visible in the plot.
The illusion of 3D is enhanced by choosing hidden line removal. See @ref{hidden3d}.
The `splot` command can also calculate and draw contour lines corresponding
to constant Z values. These contour lines may be drawn onto the surface
itself, or projected onto the XY plane. See `set contour`.

@node 2D_projection_(set_view_map), PM3D_plots, surface_plots, 3D_plots
@subsection 2D projection (set view map)

@c ?2D projection (set view map)
An important special case of the `splot` command is to map the Z coordinate
onto a 2D surface by projecting the plot along the Z axis onto the xy plane.
See `set view map`.  This plot mode is useful for contour plots and heat maps.
This figure shows contours plotted once with plot style `lines` and once with
style @ref{labels}.

@node PM3D_plots,  , 2D_projection_(set_view_map), 3D_plots
@subsection PM3D plots

@c ?PM3D PLOTS
3D surfaces can also be drawn using solid pm3d quadrangles rather than
lines. In this case there is no hidden surface removal, but if the component
facets are drawn back-to-front then a similar effect is achieved.
See `set pm3d depthorder`. While pm3d surfaces are by default colored using a
smooth color palette (see @ref{palette}), it is also possible to specify a
solid color surface or to specify distinct solid colors for the top and bottom
surfaces as in the figure shown here.  See @ref{fillcolor}.
Unlike the line-trimming in hidden3d mode, pm3d surfaces can be smoothly
clipped to the current zrange.  See @ref{clipping}.


@node Fence_plots, isosurface, 3D_plots, Plotting_styles
@section Fence plots

@cindex fenceplots

@cindex zerrorfill

Fence plots combine several 2D plots by aligning their Y coordinates and
separating them from each other by a displacement along X. Filling the area
between a base value and each plot's series of Z values enhances the visual
impact of the alignment on Y and comparison on Z. There are several ways
such plots can be created in gnuplot. The simplest is to use the 5 column
variant of the `zerrorfill` style. Suppose there are separate curves z = Fi(y)
indexed by i. A fence plot is generated by `splot with zerrorfill` using
input columns
@example
     i y z_base z_base Fi(y)

@end example


@node isosurface, Zerrorfill, Fence_plots, Plotting_styles
@section isosurface

@c ?plotting styles isosurface
@c ?style isosurface
@c ?with isosurface
@cindex isosurface
@opindex isosurface


This 3D plot style requires a populated voxel grid (see @ref{vgrid}, @ref{vfill}).
Linear interpolation of voxel grid values is used to estimate fractional grid
coordinates corresponding to the requested isolevel.  These points are then
used to generate a tessellated surface.  The facets making up the surface are
rendered as pm3d polygons, so the surface coloring, transparency, and border
properties are controlled by `set pm3d`.  In general the surface is easier to
interpret visually if facets are given a thin border that is darker than the
fill color.  By default the tessellation uses a mixture of quadrangles and
triangles.  To use triangle only, see @ref{isosurface}.
Example:
@example
     set style fill solid 0.3
     set pm3d depthorder border lc "blue" lw 0.2
     splot $helix with isosurface level 10 fc "cyan"

@end example


@node Zerrorfill, Animation, isosurface, Plotting_styles
@section Zerrorfill

@c ?plotting styles zerrorfill
@c ?style zerrorfill
@c ?with zerrorfill
@cindex zerrorfill

Syntax:

@example
     splot DATA using 1:2:3:4[:5] with zerrorfill @{fc|fillcolor <colorspec>@}
                @{lt|linetype <n>@} @{<line properties>@}

@end example

The `zerrorfill` plot style is similar to one variant of the 2D plot style
@ref{filledcurves}.  It fills the area between two functions or data lines that
are sampled at the same x and y points.  It requires 4 or 5 input columns:

@example
     4 columns:  x  y  z  zdelta
     5 columns:  x  y  z  zlow  zhigh

@end example

The area between zlow and zhigh is filled and then a line is drawn through the
z values. By default both the line and the fill area use the same color, but
you can change this in the splot command.  The fill area properties are also
affected by the global fill style; see `set style fill`.

If there are multiple curves in the splot command each new curve may occlude
all previous curves.  To get proper depth sorting so that curves can only be
occluded by curves closer to the viewer, it is best to order the curves from
back to front.  Alternatively you can use `set pm3d depthorder base` to sort
them automatically, but unfortunately this causes all the filled areas to be
drawn after all of the corresponding lines of z values. In order to see both
the lines and the depth-sorted fill areas you probably will need to make the
fill areas partially transparent.

The fill area in the first two examples below is the same.

@example
     splot 'data' using 1:2:3:4 with zerrorfill fillcolor "grey" lt black
     splot 'data' using 1:2:3:($3-$4):($3+$4) with zerrorfill
     splot '+' using 1:(const):(func1($1)):(func2($1)) with zerrorfill
     splot for [k=1:5] datafile[k] with zerrorfill lt black fc lt (k+1)

@end example

This plot style can also be used to create fence plots. See `fenceplots`.
See also `waterfallplots`.


@node Animation,  , Zerrorfill, Plotting_styles
@section Animation

@cindex animation

Any of gnuplot's interactive terminals (qt win wxt x11 aqua) can be used
to display an animation by plotting successive frames from the command line
or from a script.

Several non-mousing terminals also support some form of animation.
See `term sixelgd`, `term kittycairo`.

Two terminals can save an animation to a file for later playback locally
or by embedding it a web page.  See `term gif animate`, `term webp`.

@c ^    <p align="center">
@c ^	<picture>
@c ^	  <source srcset="figure_spinning_d20.webp" type="image/webp">
@c ^	  <img src="figure_static_d20.png">
@c ^	</picture>

Example:

@example
     unset border; unset tics; unset key; set view equal xyz
     set pm3d border linecolor "black"

@end example

@example
     set term webp animate delay 50
     set output 'spinning_d20.webp'
     do for [ang=1:360:2] @{
         set view 60, ang
         splot 'icosahedron.dat' with polygons fc "gold"
     @}
     unset output

@end example


@node Commands, Terminal_types, Plotting_styles, Top
@chapter Commands

@cindex commands

This section lists the commands acceptable to `gnuplot` in alphabetical
order.  Printed versions of this document contain all commands; the text
available interactively may not be complete.  Indeed, on some systems there may
be no commands at all listed under this heading.

Note that in most cases unambiguous abbreviations for command names and their
options are permissible, i.e., "`p f(x) w li`" instead of "`plot f(x) with
lines`".

In the syntax descriptions, braces (@{@}) denote optional arguments and a
vertical bar (|) separates mutually exclusive choices.

@menu
* Break::
* cd::
* call::
* clear::
* Continue::
* Do::
* evaluate::
* exit::
* fit::
* function_blocks::
* help::
* history::
* if::
* for::
* import::
* load::
* local::
* lower::
* pause::
* plot::
* print::
* printerr::
* pwd::
* quit::
* raise::
* refresh::
* remultiplot::
* replot::
* reread::
* reset::
* return::
* save::
* set-show::
* shell::
* show::
* splot::
* stats_(Statistical_Summary)::
* system_::
* test::
* toggle::
* undefine::
* unset::
* update::
* vclear::
* vfill::
* warn::
* While::
@end menu

@node Break, cd, Commands, Commands
@section Break

@c ?commands break
@cindex break

The `break` command is only meaningful inside the bracketed iteration clause
of a `do` or `while` statement.  It causes the remaining statements inside the
bracketed clause to be skipped and iteration is terminated.  Execution resumes
at the statement following the closing bracket.  See also `continue`.

@node cd, call, Break, Commands
@section cd

@c ?commands cd
@cindex cd
@cmindex cd


The `cd` command changes the working directory.

Syntax:
@example
      cd '<directory-name>'

@end example

The directory name must be enclosed in quotes.

Examples:
@example
      cd 'subdir'
      cd ".."

@end example

It is recommended that Windows users use single-quotes, because backslash [\]
has special significance inside double-quotes and has to be escaped.
For example,
@example
      cd "c:\newdata"
@end example

fails, but
@example
      cd 'c:\newdata'
      cd "c:\\newdata"
@end example

work as expected.

@node call, clear, cd, Commands
@section call

@c ?commands call
@cindex call
@cmindex call


The @ref{call} command is identical to the `load` command with one exception:
the name of the file being loaded may be followed by up to nine parameters.

@example
     call "inputfile" <param-1> <param-2> <param-3> ... <param-9>

@end example

Gnuplot now provides a set of string variables ARG0, ARG1, ..., ARG9 and an
integer variable ARGC. When a @ref{call} command is executed ARG0 is set to the
name of the input file, ARGC is set to the number of parameters present, and
ARG1 to ARG9 are loaded from the parameters that follow it on the command line.
Any existing contents of the ARG variables are saved and restored across a
@ref{call} command.

Because the parameters ARG1 ... ARG9 are stored in ordinary string variables
they may be dereferenced by macro expansion.  However in many cases it is
more natural to use them as you would any other variable.

In parallel with the string representation of parameters ARG1 ... ARG9,
the parameters themselves are stored in an array ARGV[9].  See `ARGV`.

DEPRECATED: Versions prior to 5.0 performed macro-like substitution of the
special tokens $0, $1, ... $9 with the literal contents of <param-1> ...
That older mechanism is no longer supported.

EXPERIMENTAL:  Function blocks (new in this version) provide a more flexible
alternative to @ref{call}.  See `function blocks`.


@menu
* ARGV[_]::
* Example::
@end menu

@node ARGV[_], Example, call, call
@subsection ARGV[ ]

@cindex argv

@cindex ARGV

@c ?call argv
@c ?call ARGV
When a gnuplot script is entered via the @ref{call} command any parameters passed
by the caller are available via two mechanisms.  Each parameter is stored as a
string in variables ARG1, ARG2, ... ARG9.  Each parameter is also stored as one
element of the array ARGV[9]. Numerical values are stored as complex variables.
All other values are stored as strings.  ARGC holds the number of parameters.
Thus after a call

@example
     call 'routine_1.gp'  1 pi "title"

@end example

The three arguments are available inside routine_1.gp as follows

@example
     ARGC = 3
     ARG1 = "1"         ARGV[1] = 1.0
     ARG2 = "3.14159"   ARGV[2] = 3.14159265358979...
     ARG3 = "title"     ARGV[3] = "title"

@end example

In this example ARGV[1] and ARGV[2] have the full precision of a floating point
variable.  ARG2 lost precision in being stored as a string using format "%g".

ARGC and a corresponding array ARGV[ARGC] are also available to code inside a
function block call.  However invocation of a function block does not create
string variables ARG1,... .

@node Example,  , ARGV[_], call
@subsection Example

@c ?call example
@c ?commands call example
@example
     Call site
         MYFILE = "script1.gp"
         FUNC = "sin(x)"
         call MYFILE FUNC 1.23 "This is a plot title"
     Upon entry to the called script
         ARG0 holds "script1.gp"
         ARG1 holds the string "sin(x)"
         ARG2 holds the string "1.23"
         ARG3 holds the string "This is a plot title"
         ARGC is 3
     The script itself can now execute
         plot @@ARG1 with lines title ARG3
         print ARG2 * 4.56, @@ARG2 * 4.56
         print "This plot produced by script ", ARG0

@end example

Notice that because ARG1 is a string it must be dereferenced as a macro,
but ARG2 may be dereferenced either as a macro (yielding a numerical constant)
or a variable (yielding that same numerical value after auto-promotion of the
string "1.23" to a real).

The same result could be obtained directly from a shell script by invoking
gnuplot with the `-c` command line option:

@example
     gnuplot -persist -c "script1.gp" "sin(x)" 1.23 "This is a plot title"

@end example


@node clear, Continue, call, Commands
@section clear

@c ?commands clear
@cindex clear
@cmindex clear


@cindex inset

@cindex inset

The @ref{clear} command erases the current screen or output device as specified
by @ref{terminal} and @ref{output}.  This usually generates a formfeed on
hardcopy devices.

For some terminals @ref{clear} erases only the portion of the plotting surface
defined by @ref{size}, so for these it can be used in conjunction with @ref{multiplot} to create an inset.

Example:
@example
      set multiplot
      plot sin(x)
      set origin 0.5,0.5
      set size 0.4,0.4
      clear
      plot cos(x)
      unset multiplot

@end example

Please see @ref{multiplot}, @ref{size}, and @ref{origin} for details.

@node Continue, Do, clear, Commands
@section Continue

@c ?commands continue
@cindex continue

The `continue` command is only meaningful inside the bracketed iteration clause
of a `do` or `while` statement.  It causes the remaining statements inside the
bracketed clause to be skipped.  Execution resumes at the start of the next
iteration (if any remain in the loop condition).  See also `break`.

@node Do, evaluate, Continue, Commands
@section Do

@c ?commands do
@cindex do

Syntax:
@example
      do for <iteration-spec> @{
           <commands>
           <commands>
      @}
@end example

Execute a sequence of commands multiple times.  The commands must be enclosed
in curly brackets, and the opening "@{" must be on the same line as the `do`
keyword.  This command cannot be used with old-style (un-bracketed) if/else
statements.  See @ref{if}.  For examples of iteration specifiers, see @ref{iteration}.
Example:
@example
      set multiplot layout 2,2
      do for [name in "A B C D"] @{
          filename = name . ".dat"
          set title sprintf("Condition %s",name)
          plot filename title name
      @}
      unset multiplot
@end example

See also `while`, `continue`, `break`.

@node evaluate, exit, Do, Commands
@section evaluate

@c ?commands evaluate
@cindex evaluate
@cmindex evaluate


The @ref{evaluate} command executes gnuplot commands contained in a string
or in a function block.  Newline characters are not allowed within the string.

@example
     evaluate "commands in a string constant"
     evaluate string_valued_function( ... arguments ... )
     evaluate $functionblock( ... arguments ... )

@end example

This is especially useful for a repetition of similar commands.

Example:
@example
      set_label(x, y, text) \
        = sprintf("set label '%s' at %f, %f point pt 5", text, x, y)
      eval set_label(1., 1., 'one/one')
      eval set_label(2., 1., 'two/one')
      eval set_label(1., 2., 'one/two')

@end example

Please see `function blocks` and @ref{macros} for other mechanisms
that construct or execute strings containing gnuplot commands.

@node exit, fit, evaluate, Commands
@section exit

@c ?commands exit
@cindex exit
@cmindex exit


@example
     exit
     exit message "error message text"
     exit status <integer error code>

@end example

The commands @ref{exit} and @ref{quit}, as well as the END-OF-FILE character (usually
Ctrl-D) terminate input from the current input stream: terminal session, pipe,
or file input (pipe).  If input streams are nested (inherited `load` scripts),
then reading will continue in the parent stream. When the top level stream is
closed, the program itself will exit.

The command `exit gnuplot` will immediately and unconditionally cause gnuplot
to exit even if the input stream is multiply nested.  In this case any open
output files may not be completed cleanly. Example of use:

@example
      bind "ctrl-x" "unset output; exit gnuplot"

@end example

The command `exit error "error message"` simulates a program error.
In interactive mode it prints the error message and returns to the command
line, breaking out of all nested loops or calls.  In non-interactive mode
the program will exit.

When gnuplot exits to the controlling shell, the return value is not usually
informative. This variant of the command allows you to return a specific value.

@example
     exit status <value>

@end example

See help for `batch/interactive` for more details.

@node fit, function_blocks, exit, Commands
@section fit

@c ?commands fit
@cindex fit
@cmindex fit


@cindex least-squares

@cindex Marquardt

The @ref{fit} command fits a user-supplied real-valued expression to a set of
data points, using the nonlinear least-squares Marquardt-Levenberg
algorithm. There can be up to 12 independent variables, there is always 1
dependent variable, and any number of parameters can be fitted.
Optionally, error estimates can be input for weighting the data points.

The basic use of @ref{fit} is best explained by a simple example where a set of
measured x and y values read from a file are used to be modeled by a
function y = f(x).

@example
      f(x) = a + b*x + c*x**2
      fit f(x) 'measured.dat' using 1:2 via a,b,c
      plot 'measured.dat' u 1:2, f(x)

@end example

Syntax:
@example
      fit @{<ranges>@} <expression>
          '<datafile>' @{datafile-modifiers@}
          @{@{unitweights@} | @{y|xy|z@}error | errors <var1>@{,<var2>,...@}@}
          via '<parameter file>' | <var1>@{,<var2>,...@}

@end example

Ranges may be specified to filter the data used in fitting.
Out-of-range data points are ignored. The syntax is
@example
      [@{dummy_variable=@}@{<min>@}@{:<max>@}],
@end example

analogous to `plot`; see @ref{ranges}.

<expression> can be any valid `gnuplot` expression, although the most common is
a previously user-defined function of the form f(x) or f(x,y). It must be
real-valued.
The names of the independent variables are set by the @ref{dummy} command,
or in the <ranges> part of the command (see below); by default, the first
two are called x and y.
Furthermore, the expression should depend on one or more variables whose
value is to be determined by the fitting procedure.

<datafile> is treated as in the `plot` command.  All the @ref{datafile}
modifiers (`using`, @ref{every},...) except @ref{smooth} are applicable to @ref{fit}.
See @ref{datafile}.

The datafile contents can be interpreted flexibly by providing a `using`
qualifier as with plot commands. For example to generate the independent
variable x as the sum of columns 2 and 3, while taking z from column 6 and
requesting equal weights:

@example
      fit ... using ($2+$3):6

@end example

In the absence of a `using` specification, the fit implicitly assumes
there is only a single independent variable. If the file itself, or the
using specification, contains only a single column of data, the line
number is taken as the independent variable.
If a `using` specification is given, there can be up to 12 independent
variables (and more if specially configured at compile time).

The `unitweights` option, which is the default, causes all data points to be
weighted equally. This can be changed by using the `errors` keyword to read
error estimates of one or more of the variables from the data file. These
error estimates are interpreted as the standard deviation s of the
corresponding variable value and used to compute a weight for the datum as
1/s**2.

In case of error estimates of the independent variables, these weights are
further multiplied by fitting function derivatives according to the
"effective variance method" (Jay Orear, Am. J. Phys., Vol. 50, 1982).

The `errors` keyword is to be followed by a comma-separated list of one or
more variable names for which errors are to be input; the dependent variable
z must always be among them, while independent variables are optional.
For each variable in this list, an additional column will be read from the
file, containing that variable's error estimate. Again, flexible
interpretation is possible by providing the `using` qualifier.
Note that the number of independent variables is thus implicitly given by the
total number of columns in the `using` qualifier, minus 1 (for the dependent
variable), minus the number of variables in the `errors` qualifier.

As an example, if one has 2 independent variables, and errors for the
first independent variable and the dependent variable, one uses
the `errors x,z` qualifier, and a `using` qualifier with 5 columns,
which are interpreted as x:y:z:sx:sz (where x and y are the independent
variables, z the dependent variable, and sx and sz the standard
deviations of x and z).

A few shorthands for the `errors` qualifier are available:
`yerrors` (for fits with 1 column of independent variable), and
`zerrors` (for the general case) are all equivalent to `errors z`,
indicating that there is a single extra column with errors of the
dependent variable.

`xyerrors`, for the case of 1 independent variable, indicates that there
are two extra columns, with errors of both the independent and the
dependent variable.  In this case the errors on x and y are treated by
Orear's effective variance method.

Note that `yerror` and `xyerror` are similar in both form and interpretation
to the @ref{yerrorlines} and @ref{xyerrorlines} 2D plot styles.

With the command `set fit v4` the fit command syntax is compatible with
`gnuplot` version 4.  In this case there must be two more `using`
qualifiers (z and s) than there are independent variables, unless there is
only one variable.  `gnuplot` then uses the following formats, depending on
the number of columns given in the `using` specification:

@example
      z                           # 1 independent variable (line number)
      x:z                         # 1 independent variable (1st column)
      x:z:s                       # 1 independent variable (3 columns total)
      x:y:z:s                     # 2 independent variables (4 columns total)
      x1:x2:x3:z:s                # 3 independent variables (5 columns total)
      x1:x2:x3:...:xN:z:s         # N independent variables (N+2 columns total)

@end example

Please beware that this means that you have to supply z-errors s in a fit with
two or more independent variables. If you want unit weights you need to supply
them explicitly by using e.g. then format x:y:z:(1).

The dummy variable names may be changed when specifying a range as noted above.
The first range corresponds to the first `using` spec, and so on.  A range may
also be given for z (the dependent variable), in which case data points for
which f(x,...) is out of the z range will not contribute to the residual being
minimized.

Multiple datasets may be simultaneously fit with functions of one
independent variable by making y a 'pseudo-variable', e.g., the dataline
number, and fitting as two independent variables.  See @ref{multi-branch}.

The `via` qualifier specifies which parameters are to be optimized, either
directly, or by referencing a parameter file.

Examples:
@example
      f(x) = a*x**2 + b*x + c
      g(x,y) = a*x**2 + b*y**2 + c*x*y
      set fit limit 1e-6
      fit f(x) 'measured.dat' via 'start.par'
      fit f(x) 'measured.dat' using 3:($7-5) via 'start.par'
      fit f(x) './data/trash.dat' using 1:2:3 yerror via a, b, c
      fit g(x,y) 'surface.dat' using 1:2:3 via a, b, c
      fit a0 + a1*x/(1 + a2*x/(1 + a3*x)) 'measured.dat' via a0,a1,a2,a3
      fit a*x + b*y 'surface.dat' using 1:2:3 via a,b
      fit [*:*][yaks=*:*] a*x+b*yaks 'surface.dat' u 1:2:3 via a,b

@end example

@example
      fit [][][t=*:*] a*x + b*y + c*t 'foo.dat' using 1:2:3:4 via a,b,c

@end example

@example
      set dummy x1, x2, x3, x4, x5
      h(x1,x2,x3,x4,s5) = a*x1 + b*x2 + c*x3 + d*x4 + e*x5
      fit h(x1,x2,x3,x4,x5) 'foo.dat' using 1:2:3:4:5:6 via a,b,c,d,e

@end example

After each iteration step, detailed information about the current state
of the fit is written to the display.  The same information about the
initial and final states is written to a log file, "fit.log".  This file
is always appended to, so as to not lose any previous fit history;  it
should be deleted or renamed as desired. By using the command
`set fit logfile`, the name of the log file can be changed.

If activated by using `set fit errorvariables`, the error for each fitted
parameter will be stored in a variable named like the parameter, but with
"_err" appended.  Thus the errors can be used as input for further
computations.

If `set fit prescale` is activated, fit parameters are prescaled by
their initial values. This helps the Marquardt-Levenberg routine
converge more quickly and reliably in cases where parameters differ
in size by several orders of magnitude.

The fit may be interrupted by pressing Ctrl-C (Ctrl-Break in wgnuplot).
After the current iteration completes, you have the option to
(1) stop the fit and accept the current parameter values,
(2) continue the fit,
(3) execute a `gnuplot` command as specified by `set fit script` or the
environment variable `FIT_SCRIPT`.  The default is @ref{replot}, so if you
had previously plotted both the data and the fitting function in one graph,
you can display the current state of the fit.

Once @ref{fit} has finished, the @ref{fit} command may be used to store final
values in a file for subsequent use as a parameter file.   See @ref{fit}
for details.

@menu
* adjustable_parameters::
* short_introduction::
* error_estimates::
* control::
* error_recovery::
* multi-branch::
* starting_values::
* time_data::
* tips::
@end menu

@node adjustable_parameters, short_introduction, fit, fit
@subsection adjustable parameters

@c ?commands fit parameters
@c ?fit parameters
@c ?commands fit adjustable_parameters
@c ?fit adjustable_parameters
@cindex fit_parameters

There are two ways that `via` can specify the parameters to be adjusted,
either directly on the command line or indirectly, by referencing a
parameter file.  The two use different means to set initial values.

Adjustable parameters can be specified by a comma-separated list of variable
names after the `via` keyword.  Any variable that is not already defined
is created with an initial value of 1.0.  However, the fit is more likely
to converge rapidly if the variables have been previously declared with more
appropriate starting values.

In a parameter file, each parameter to be varied and a corresponding initial
value are specified, one per line, in the form
@example
      varname = value

@end example

Comments, marked by '#', and blank lines are permissible.  The
special form
@example
      varname = value       # FIXED

@end example

means that the variable is treated as a 'fixed parameter', initialized by the
parameter file, but not adjusted by @ref{fit}.  For clarity, it may be useful to
designate variables as fixed parameters so that their values are reported by
@ref{fit}.  The keyword `# FIXED` has to appear in exactly this form.


@node short_introduction, error_estimates, adjustable_parameters, fit
@subsection short introduction

@c ?commands fit beginners_guide
@c ?fit beginners_guide
@c ?fit guide
@cindex fitting

@ref{fit} is used to find a set of parameters that 'best' fits your data to your
user-defined function.  The fit is judged on the basis of the sum of the
squared differences or 'residuals' (SSR) between the input data points and
the function values, evaluated at the same places.  This quantity is often
called 'chisquare' (i.e., the Greek letter chi, to the power of 2).  The
algorithm attempts to minimize SSR, or more precisely the weighted sum of
squared residuals (WSSR), for which the residuals are weighted by the input
data errors before being squared; see `fit error_estimates` for details.

That's why it is called 'least-squares fitting'.  Let's look at an example
to see what is meant by 'non-linear', but first we had better go over some
terms.  Here it is convenient to use z as the dependent variable for
user-defined functions of either one independent variable, z=f(x), or two
independent variables, z=f(x,y).  A parameter is a user-defined variable
that @ref{fit} will adjust, i.e., an unknown quantity in the function
declaration.  Linearity/non-linearity refers to the relationship of the
dependent variable, z, to the parameters which @ref{fit} is adjusting, not of
z to the independent variables, x and/or y.  (To be technical, the
second @{and higher@} derivatives of the fitting function with respect to
the parameters are zero for a linear least-squares problem).

For linear least-squares the user-defined function will be a sum of simple
functions, not involving any parameters, each multiplied by one parameter.
Nonlinear least-squares handles more complicated functions in which parameters
can be used in a large number of ways.  An example that illustrates the
difference between linear and nonlinear least-squares is the Fourier series.
One member may be written as
@example
     z=a*sin(c*x) + b*cos(c*x).
@end example

If a and b are the unknown parameters and c is constant, then estimating
values of the parameters is a linear least-squares problem.  However, if
c is an unknown parameter, the problem is nonlinear.

In the linear case, parameter values can be determined by comparatively
simple linear algebra, in one direct step.  However the linear special case
is also solved along with more general nonlinear problems by the iterative
procedure that `gnuplot` uses.  @ref{fit} attempts to find the minimum by doing
a search.  Each step (iteration) calculates WSSR with a new set of parameter
values.  The Marquardt-Levenberg algorithm selects the parameter values for
the next iteration.  The process continues until a preset criterion is met,
either (1) the fit has "converged" (the relative change in WSSR is less than
a certain limit, see `set fit limit`), or (2) it reaches a preset iteration
count limit (see `set fit maxiter`).  The fit may also be interrupted
and subsequently halted from the keyboard (see @ref{fit}).  The user variable
FIT_CONVERGED contains 1 if the previous fit command terminated due to
convergence; it contains 0 if the previous fit terminated for any other
reason. FIT_NITER contains the number of iterations that were done during the last fit.

Often the function to be fitted will be based on a model (or theory) that
attempts to describe or predict the behaviour of the data.  Then @ref{fit} can
be used to find values for the free parameters of the model, to determine
how well the data fits the model, and to estimate an error range for each
parameter.  See `fit error_estimates`.

Alternatively, in curve-fitting, functions are selected independent of
a model (on the basis of experience as to which are likely to describe
the trend of the data with the desired resolution and a minimum number
of parameters*functions.)  The @ref{fit} solution then provides an analytic
representation of the curve.

However, if all you really want is a smooth curve through your data points,
the @ref{smooth} option to `plot` may be what you've been looking for rather
than @ref{fit}.

@node error_estimates, control, short_introduction, fit
@subsection error estimates

@c ?commands fit error_estimates
@c ?fit error_estimates
@c ?fit errors
In @ref{fit}, the term "error" is used in two different contexts, data error
estimates and parameter error estimates.

Data error estimates are used to calculate the relative weight of each data
point when determining the weighted sum of squared residuals, WSSR or
chisquare.  They can affect the parameter estimates, since they determine
how much influence the deviation of each data point from the fitted function
has on the final values.  Some of the @ref{fit} output information, including
the parameter error estimates, is more meaningful if accurate data error
estimates have been provided.

The `statistical overview` describes some of the @ref{fit} output and gives some
background for the 'practical guidelines'.

@menu
* statistical_overview::
* practical_guidelines::
@end menu

@node statistical_overview, practical_guidelines, error_estimates, error_estimates
@subsubsection statistical overview

@c ?commands fit error statistical_overview
@cindex statistical_overview

The theory of non-linear least-squares is generally described in terms
of a normal distribution of errors, that is, the input data is assumed to be
a sample from a population having a given mean and a Gaussian (normal)
distribution about the mean with a given standard deviation.  For a sample of
sufficiently large size, and knowing the population standard deviation, one
can use the statistics of the chisquare distribution to describe a "goodness
of fit" by looking at the variable often called "chisquare".  Here, it is
sufficient to say that a reduced chisquare (chisquare/degrees of freedom,
where degrees of freedom is the number of datapoints less the number of
parameters being fitted) of 1.0 is an indication that the weighted sum of
squared deviations between the fitted function and the data points is the
same as that expected for a random sample from a population characterized by
the function with the current value of the parameters and the given standard
deviations.

If the standard deviation for the population is not constant, as in counting
statistics where variance = counts, then each point should be individually
weighted when comparing the observed sum of deviations and the expected sum
of deviations.

At the conclusion @ref{fit} reports 'stdfit', the standard deviation of the fit,
which is the rms of the residuals, and the variance of the residuals, also
called 'reduced chisquare' when the data points are weighted.  The number of
degrees of freedom (the number of data points minus the number of fitted
parameters) is used in these estimates because the parameters used in
calculating the residuals of the datapoints were obtained from the same data.
If the data points have weights, `gnuplot` calculates the so-called p-value,
i.e. one minus the cumulative distribution function of the
chisquare-distribution for the number of degrees of freedom and the resulting
chisquare, see `fit practical_guidelines`.
These values are exported to the variables
@example
      FIT_NDF = Number of degrees of freedom
      FIT_WSSR = Weighted sum-of-squares residual
      FIT_STDFIT = sqrt(WSSR/NDF)
      FIT_P = p-value

@end example

To estimate confidence levels for the parameters, one can use the minimum
chisquare obtained from the fit and chisquare statistics to determine the
value of chisquare corresponding to the desired confidence level, but
considerably more calculation is required to determine the combinations of
parameters which produce such values.

Rather than determine confidence intervals, @ref{fit} reports parameter error
estimates which are readily obtained from the variance-covariance matrix
after the final iteration.  By convention, these estimates are called
"standard errors" or "asymptotic standard errors", since they are calculated
in the same way as the standard errors (standard deviation of each parameter)
of a linear least-squares problem, even though the statistical conditions for
designating the quantity calculated to be a standard deviation are not
generally valid for a nonlinear least-squares problem.  The asymptotic
standard errors are generally over-optimistic and should not be used for
determining confidence levels, but are useful for qualitative purposes.

The final solution also produces a correlation matrix indicating correlation of
parameters in the region of the solution; The main diagonal elements,
autocorrelation, are always 1; if all parameters were independent, the
off-diagonal elements would be nearly 0.  Two variables which completely
compensate each other would have an off-diagonal element of unit magnitude,
with a sign depending on whether the relation is proportional or inversely
proportional.  The smaller the magnitudes of the off-diagonal elements, the
closer the estimates of the standard deviation of each parameter would be to
the asymptotic standard error.

@node practical_guidelines,  , statistical_overview, error_estimates
@subsubsection practical guidelines

@c ?commands fit error practical_guidelines
@c ?fit practical_guidelines
@c ?fit guidelines
If you have a basis for assigning weights to each data point, doing so lets
you make use of additional knowledge about your measurements, e.g., take into
account that some points may be more reliable than others.  That may affect
the final values of the parameters.

Weighting the data provides a basis for interpreting the additional @ref{fit}
output after the last iteration.  Even if you weight each point equally,
estimating an average standard deviation rather than using a weight of 1
makes WSSR a dimensionless variable, as chisquare is by definition.

Each fit iteration will display information which can be used to evaluate
the progress of the fit.  (An '*' indicates that it did not find a smaller
WSSR and is trying again.)  The 'sum of squares of residuals', also called
'chisquare', is the WSSR between the data and your fitted function; @ref{fit}
has minimized that.  At this stage, with weighted data, chisquare is expected
to approach the number of degrees of freedom (data points minus parameters).
The WSSR can be used to calculate the reduced chisquare (WSSR/ndf) or stdfit,
the standard deviation of the fit, sqrt(WSSR/ndf).  Both of these are
reported for the final WSSR.

If the data are unweighted, stdfit is the rms value of the deviation of the
data from the fitted function, in user units.

If you supplied valid data errors, the number of data points is large enough,
and the model is correct, the reduced chisquare should be about unity.  (For
details, look up the 'chi-squared distribution' in your favorite statistics
reference.)  If so, there are additional tests, beyond the scope of this
overview, for determining how well the model fits the data.

A reduced chisquare much larger than 1.0 may be due to incorrect data error
estimates, data errors not normally distributed, systematic measurement
errors, 'outliers', or an incorrect model function.  A plot of the residuals,
e.g., `plot 'datafile' using 1:($2-f($1))`, may help to show any systematic
trends.  Plotting both the data points and the function may help to suggest
another model.

Similarly, a reduced chisquare less than 1.0 indicates WSSR is less than that
expected for a random sample from the function with normally distributed
errors.  The data error estimates may be too large, the statistical
assumptions may not be justified, or the model function may be too general,
fitting fluctuations in a particular sample in addition to the underlying
trends.  In the latter case, a simpler function may be more appropriate.

The p-value of the fit is one minus the cumulative distribution function of
the chisquare-distribution for the number of degrees of freedom and the
resulting chisquare.  This can serve as a measure of the goodness-of-fit.
The range of the p-value is between zero and one.  A very small or large
p-value indicates that the model does not describe the data and its errors
well.  As described above, this might indicate a problem with the data, its
errors or the model, or a combination thereof.  A small p-value might
indicate that the errors have been underestimated and the errors of the
final parameters should thus be scaled. See also `set fit errorscaling`.

You'll have to get used to both @ref{fit} and the kind of problems you apply it
to before you can relate the standard errors to some more practical estimates
of parameter uncertainties or evaluate the significance of the correlation
matrix.

Note that @ref{fit}, in common with most nonlinear least-squares implementations,
minimizes the weighted sum of squared distances (y-f(x))**2.  It does not
provide any means to account for "errors" in the values of x, only in y.
Also, any "outliers" (data points outside the normal distribution of the model)
will have an exaggerated effect on the solution.

@node control, error_recovery, error_estimates, fit
@subsection control

@c ?commands fit control
@c ?fit control
@cindex FIT_LOG

@cindex FIT_SCRIPT

There are two environment variables that can be defined to affect @ref{fit}.
The environment variables must be defined before `gnuplot` is executed;
how to do so depends on your operating system.

@example
      FIT_LOG
@end example

changes the name (and/or path) of the file to which the fit log will be
written. The default is to write "fit.log" in the current working directory.
This can be overwritten at run time using the command `set fit logfile`.

@example
      FIT_SCRIPT
@end example

specifies a command that may be executed after an user interrupt. The default
is @ref{replot}, but a `plot` or `load` command may be useful to display a plot
customized to highlight the progress of the fit.
This can be changed at run time using `set fit script`.

For many other run time adjustments to way fit works, see @ref{fit}.

@node error_recovery, multi-branch, control, fit
@subsection error recovery

@c ?commands fit error_recovery
@c ?fit error_recovery
Starting with gnuplot version 6, the @ref{fit} command always returns to the
next command input line regardless of the success or failure of fitting.
This allows scripted recovery from fit errors.  The variable FIT_ERROR is
set to 0 on success, non-zero on error.  This example plots however many
of five data sets can be successfully fit.  Failure for data set 2 would
not prevent fitting data sets 3 through 5.

@example
     do for [i=1:5] @{
         DATA = sprintf("Data_%05d.dat", i)
         fit f(x) DATA via a,b,c
         if (FIT_ERROR || !FIT_CONVERGED) @{
             print "Fit failed for ", DATA
             continue
         @}
         set output sprintf("dataset_%05.png", i)
         plot DATA, f(x)
         unset output
     @}

@end example


@node multi-branch, starting_values, error_recovery, fit
@subsection multi-branch

@c ?commands fit multi-branch
@c ?fit multi-branch
@cindex multi-branch

@cindex branch

In multi-branch fitting, multiple data sets can be simultaneously fit with
functions of one independent variable having common parameters by minimizing
the total WSSR.  The function and parameters (branch) for each data set are
selected by using a 'pseudo-variable', e.g., either the dataline number (a
'column' index of -1) or the datafile index (-2), as the second independent
variable.

Example:  Given two exponential decays of the form, z=f(x), each describing
a different data set but having a common decay time, estimate the values of
the parameters.  If the datafile has the format x:z:s, then
@example
     f(x,y) = (y==0) ? a*exp(-x/tau) : b*exp(-x/tau)
     fit f(x,y) 'datafile' using  1:-2:2:3  via a, b, tau

@end example

For a more complicated example, see the file "hexa.fnc" used by the
"fit.dem" demo.

Appropriate weighting may be required since unit weights may cause one
branch to predominate if there is a difference in the scale of the dependent
variable.  Fitting each branch separately, using the multi-branch solution
as initial values, may give an indication as to the relative effect of each
branch on the joint solution.

@node starting_values, time_data, multi-branch, fit
@subsection starting values

@c ?commands fit starting_values
@c ?fit starting_values
@cindex starting_values

Nonlinear fitting is not guaranteed to converge to the global optimum (the
solution with the smallest sum of squared residuals, SSR), and can get stuck
at a local minimum.  The routine has no way to determine that;  it is up to
you to judge whether this has happened.

@ref{fit} may, and often will get "lost" if started far from a solution, where
SSR is large and changing slowly as the parameters are varied, or it may
reach a numerically unstable region (e.g., too large a number causing a
floating point overflow) which results in an "undefined value" message
or `gnuplot` halting.

To improve the chances of finding the global optimum, you should set the
starting values at least roughly in the vicinity of the solution, e.g.,
within an order of magnitude, if possible.  The closer your starting values
are to the solution, the less chance of stopping at a false minimum.  One way
to find starting values is to plot data and the fitting function on the same
graph and change parameter values and @ref{replot} until reasonable similarity
is reached.  The same plot is also useful to check whether the fit found a
false minimum.

Of course finding a nice-looking fit does not prove there is no "better" fit
(in either a statistical sense, characterized by an improved goodness-of-fit
criterion, or a physical sense, with a solution more consistent with the
model.)  Depending on the problem, it may be desirable to @ref{fit} with various
sets of starting values, covering a reasonable range for each parameter.

@node time_data, tips, starting_values, fit
@subsection time data

@c ?commands fit time_data
@c ?fit time_data
In fitting time data it is important to remember that gnuplot represents
time as seconds since 1 January 1970.  For example if you wanted to fit a
quadratic model for the time dependence of something measured over the course
of one day in 2023, you might expect that it could be done using
@example
     T(x) = a + b*x + c*x*x
     set xdata time
     fit T(x) 'hits.dat' using 1:3 via a,b,c

@end example

This will probably fail, because internally the x values corresponding to
that one day will have a range something like [1.67746e+09 : 1.67754e+09].
The fractional change in x across the measured data will be only about
1.e-05 and to guarantee convergence you would probably need many
decimal places of accuracy in the initial parameter estimates.

One solution is to recast the problem as change in time since the start
of measurement.
@example
     set xdata time       # data format "27-02-2023 12:00:00 measurement"
     timefmt  = "%d-%m-%Y %H:%M:%S"
     set timefmt timefmt
     t0 = strptime( timefmt, "27-02-2023 00:00:00" )
     fit T(x) 'temperature.dat' using ($1-t0):3 via a,b,c

@end example

This shifts the range of the data to [0 : 86400], which is more tractable.
Another possibility in this case is to ignore the date in column 1 and use
relative time formats (tH/tM/tS) applied to column 2.
@example
     set timefmt "%tH:%tM:%tS"
     fit T(x) 'temperature.dat' using 2:3 via a,b,c

@end example


@node tips,  , time_data, fit
@subsection tips

@c ?commands fit tips
@c ?fit tips
@cindex tips

Here are some tips to keep in mind to get the most out of @ref{fit}.  They're not
very organized, so you'll have to read them several times until their essence
has sunk in.

The two forms of the `via` argument to @ref{fit} serve two largely distinct
purposes.  The `via "file"` form is best used for (possibly unattended) batch
operation, where you supply the starting parameter values in a file.

The `via var1, var2, ...` form is best used interactively, where the command
history mechanism may be used to edit the list of parameters to be fitted or
to supply new startup values for the next try.  This is particularly useful
for hard problems, where a direct fit to all parameters at once won't work
without good starting values.  To find such, you can iterate several times,
fitting only some of the parameters, until the values are close enough to the
goal that the final fit to all parameters at once will work.

Make sure that there is no mutual dependency among parameters of the function
you are fitting.  For example, don't try to fit a*exp(x+b), because
a*exp(x+b)=a*exp(b)*exp(x).  Instead, fit either a*exp(x) or exp(x+b).

A technical issue: The larger the ratio of the largest and the
smallest absolute parameter values, the slower the fit will converge.
If the ratio is close to or above the inverse of the machine floating
point precision, it may take next to forever to converge, or refuse
to converge at all.  You will either have to adapt your function to avoid
this, e.g., replace 'parameter' by '1e9*parameter' in the function
definition, and divide the starting value by 1e9 or use `set fit prescale`
which does this internally according to the parameter starting values.

If you can write your function as a linear combination of simple functions
weighted by the parameters to be fitted, by all means do so.  That helps a
lot, because the problem is no longer nonlinear and should converge with only
a small number of iterations, perhaps just one.

Some prescriptions for analysing data, given in practical experimentation
courses, may have you first fit some functions to your data, perhaps in a
multi-step process of accounting for several aspects of the underlying
theory one by one, and then extract the information you really wanted from
the fitting parameters of those functions.  With @ref{fit}, this may often be
done in one step by writing the model function directly in terms of the
desired parameters.  Transforming data can also quite often be avoided,
though sometimes at the cost of a more difficult fit problem.  If you think
this contradicts the previous paragraph about simplifying the fit function,
you are correct.

A "singular matrix" message indicates that this implementation of the
Marquardt-Levenberg algorithm can't calculate parameter values for the next
iteration.  Try different starting values, writing the function in another
form, or a simpler function.

Finally, a nice quote from the manual of another fitting package (fudgit),
that kind of summarizes all these issues:  "Nonlinear fitting is an art!"

@node function_blocks, help, fit, Commands
@section function blocks

@c ?commands function
@c ?function blocks
@cindex functionblocks

The `function` command signals the definition of a here-document containing
a named block of gnuplot code that can be called as a function.
As with data blocks, the name of a function block must begin with a '$'.
Up to nine named parameters may be specified as part of the definition.
These names may be used inside the function block as local variables.
See `local` and `scope`.

Once the function block is defined, you can invoke it by name anywhere that
a normal function could be used.  If the return value is not relevant, the
function block may be invoked by an "evaluate" command rather than as part
of an assignment expression.

Example:
@example
     function $sinc(arg) << EOF
         if (arg == 0) @{ return 1.0 @}
         return sin(arg) / arg
     EOF

@end example

@example
     gnuplot> plot $sinc(x) with lines title "sinc(x) as a function block"

@end example

It is not necessary to specify a list of named arguments to a function block
at the time it is declared. The number and values of arguments to the function
passed from the command line can be be accessed from inside the function block
as an integer variable ARGC and a corresponding array ARGV[ARGC].  See `ARGV`.
This allows defining a function block that can operate on a variable number
of arguments.  Unlike loading a file via a @ref{call} statement, arguments are
not repackaged as string variables (e.g. ARG1).

Example:
@example
     function $max << EOF
         local max = real("-Inf")
         if (ARGC == 0) @{ return NaN @}
         do for [i=1:ARGC] @{
             if (max < ARGV[i]) @{
                 max = ARGV[i]
             @}
         @}
         return max
     EOF
     gnuplot> foo = $max( f(A), 2.0, C, Array[3] )
     gnuplot> baz = $max( foo, 100. )

@end example

The primary motivation for function block support is to allow definition of
complicated functions directly in gnuplot.  Execution is of course slower
than if the same function were coded in C or Fortran, but this is acceptable
for many purposes.  If execution speed matters then the function can be
implemented later as a plugin instead (see `plugins`).

A second use for function blocks is to allow execution of gnuplot commands in
a context they otherwise could not appear.  Suppose for example you want to
plot data from two csv files, but one file uses comma-separated fields while
the other uses semicolon-separated fields.  Normally this property would have
been set by a previous @ref{datafile} command and would have to match all
files used by the plot command.  However we can define a function block to
invoke as a definition immediately before each file is referenced in the plot.

@example
     function $set_csv(char) << EOF
         set datafile separator char
     EOF
     plot tmp=$set_csv(",") FILE1, tmp=$set_csv(";") FILE2

@end example

Limitations:
@itemize @bullet
@item
Data blocks and function blocks cannot be defined inside a function block.
@item
Pseudofile '-' cannot be used to read data inside a function block.
@item
These commands cannot be executed inside a function block:
@example
  @ref{reset}, @ref{shell}, `!<shell command>`.
@end example

@item
A `plot`, @ref{replot}, `splot`, @ref{refresh}, `stats`, @ref{vfill}, or @ref{fit} command
is accepted in a function block only if none of those commands is already
in progress.  E.g. you cannot use `stats` in a function block called by a
`plot` command, you cannot invoke `plot` from inside a @ref{fit} command, etc.
@end itemize

A non-trivial example of using function blocks to implement and plot
a 15-term Lanczos approximation for the complex lngamma function is
provided in the demo collection as
@uref{http://www.gnuplot.info/demo_6.0/function_block.html,function_block.dem
}
The function block implementation is slower by a factor of roughly 25 compared
to the built-in lnGamma function using the same algorithm coded directly in C.
Nevertheless it is still fast enough for 3D interactive rotation.

Use of function blocks is EXPERIMENTAL.
Details may change before inclusion in a release version.

@node help, history, function_blocks, Commands
@section help

@c ?commands help
@cindex help
@cmindex help


The @ref{help} command displays built-in help. To specify information on a
particular topic use the syntax:

@example
      help @{<topic>@}

@end example

If <topic> is not specified, a short message is printed about `gnuplot`.
After help for the requested topic is given, a menu of subtopics is given;
help for a subtopic may be requested by typing its name, extending the help
request.  After that subtopic has been printed, the request may be extended
again or you may go back one level to the previous topic.  Eventually, the
`gnuplot` command line will return.

If a question mark (?) is given as the topic, the list of topics currently
available is printed on the screen.

@node history, if, help, Commands
@section history

@c ?commands history
@cindex history
@cmindex history


The @ref{history} command prints or saves previous commands in the history list,
or reexecutes a previous entry in the list.  To modify the behavior of this
command or the location of the saved history file, see @ref{history}.

Input lines with @ref{history} as their first command are not stored in the
command history.

Examples:

@example
      history               # show the complete history
      history 5             # show last 5 entries in the history
      history quiet 5       # show last 5 entries without entry numbers
      history "hist.gp"     # write the complete history to file hist.gp
      history "hist.gp" append # append the complete history to file hist.gp
      history 10 "hist.gp"  # write last 10 commands to file hist.gp
      history 10 "|head -5 >>diary.gp" # write 5 history commands using pipe
      history ?load         # show all history entries starting with "load"
      history ?"set c"      # like above, several words enclosed in quotes
      hist !"set xr"        # like above, several words enclosed in quotes
      hist !55              # reexecute the command at history entry 55

@end example

@node if, for, history, Commands
@section if

@c ?commands if
@cindex if
@cmindex if


Syntax:
@example
      if (<condition>) @{ <commands>;
             <commands>
             <commands>
      @} else if (<condition>) @{
             <commands>
      @} else @{
             <commands>
      @}

@end example

This version of gnuplot supports block-structured if/else statements. If the
keyword @ref{if} or `else` is immediately followed by an opening "@{", then
conditional execution applies to all statements, possibly on multiple input
lines, until a matching "@}" terminates the block.  If commands may be nested.

Prior to gnuplot version 5 the scope of if/else commands was limited to a
single input line. Now a multi-line clause may be enclosed in curly brackets.
The old syntax is still honored but cannot be used inside a bracketed clause.

Old syntax:
@example
      if (<condition>) <command-line> [; else if (<condition>) ...; else ...]
@end example

If no opening "@{" follows the @ref{if} keyword, the command(s) in <command-line>
will be executed if <condition> is true (non-zero) or skipped if <condition> is
false (zero). Either case will consume commands on the input line until the
end of the line or an occurrence of `else`.  Note that use of `;` to allow
multiple commands on the same line will _not_ end the conditionalized commands.


@node for, import, if, Commands
@section for

@cindex for
@cmindex for


The `plot`, `splot`, `set` and @ref{unset} commands may optionally contain an
iteration clause.  This has the effect of executing the basic command
multiple times, each time re-evaluating any expressions that make use of the
iteration control variable.  Iteration of arbitrary command sequences can be
requested using the `do` command.
Two forms of iteration clause are currently supported:

@example
      for [intvar = start:end@{:increment@}]
      for [stringvar in "A B C D"]

@end example

Examples:

@example
      plot for [filename in "A.dat B.dat C.dat"] filename using 1:2 with lines
      plot for [basename in "A B C"] basename.".dat" using 1:2 with lines
      set for [i = 1:10] style line i lc rgb "blue"
      unset for [tag = 100:200] label tag

@end example

Nested iteration is supported:

@example
      set for [i=1:9] for [j=1:9] label i*10+j sprintf("%d",i*10+j) at i,j

@end example

See additional documentation for @ref{iteration}, `do`.

@node import, load, for, Commands
@section import

@c ?commands import
@cindex import
@cmindex import


@cindex plugins

The @ref{import} command associates a user-defined function name with a function
exported by an external shared object.  This constitutes a plugin mechanism
that extends the set of functions available in gnuplot.

Syntax:
@example
      import func(x[,y,z,...]) from "sharedobj[:symbol]"

@end example

Examples:
@example
      # make the function myfun, exported by "mylib.so" or "mylib.dll"
      # available for plotting or numerical calculation in gnuplot
      import myfun(x) from "mylib"
      import myfun(x) from "mylib:myfun"    # same as above

@end example

@example
      # make the function theirfun, defined in "theirlib.so" or "theirlib.dll"
      # available under a different name
      import myfun(x,y,z) from "theirlib:theirfun"

@end example

The program extends the name given for the shared object by either ".so" or
".dll" depending on the operating system, and searches for it first as a full
path name and then as a path relative to the current directory. The operating
system itself may also search any directories in LD_LIBRARY_PATH or
DYLD_LIBRARY_PATH.  See `plugins`.


@node load, local, import, Commands
@section load

@c ?commands load
@cindex load
@cmindex load


The `load` command executes each line of the specified input file as if it
had been typed in interactively.  Files created by the @ref{save} command can
later be `load`ed.  Any text file containing valid gnuplot commands can be
executed by a `load` command.  Files being loaded may themselves contain
`load` or @ref{call} commands.  To pass arguments to a loaded file, see @ref{call}.

Syntax:
@example
      load "<input-file>"
      load $datablock

@end example

The name of the input file must be enclosed in quotes.

The special filename "-" may be used to `load` commands from standard input.
This allows a `gnuplot` command file to accept some commands from standard
input.  Please see help for `batch/interactive` for more details.

On systems that support a popen function, the load file can be read from
a pipe by starting the file name with a '<'.

Examples:
@example
      load 'work.gnu'
      load "func.dat"
      load "< loadfile_generator.sh"

@end example

The `load` command is performed implicitly on any file names given as
arguments to `gnuplot`.  These are loaded in the order specified, and
then `gnuplot` exits.

EXPERIMENTAL:  It is also possible to execute commands from lines of text
stored internally. See `function blocks`. A function block may be defined
in-line or in an external file. Once the function block has been defined
the commands may be executed repeatedly using @ref{evaluate} on the internal
copy rather than reloading the file.


@node local, lower, load, Commands
@section local

@cindex local
@cmindex local


@c ?commands local
Syntax:
@example
     local foo = <expression>
     local array foo[size]

@end example

The `local` keyword introduces declaration of a variable whose scope
is limited to the execution of the code block in which it is declared.
Declaration is optional, but without it all variables are global.
If the name of a local variable duplicates the name of a global variable,
the global variable is shadowed until exit from the local scope.
See `scope`.

Local declarations may be used to prevent a global variable from being
unintentionally overwritten by a @ref{call} or `load` statement.  They are
particularly useful inside a function block. The `local` command is also
valid inside the code block in curly brackets following an @ref{if}, `else`,
`do for`, or `while` statement.

Example: Suppose you want to write a script "plot_all_data.gp" containing
commands that plot a bunch of data sets.  You want to call this convenience
script from the command line or from other scripts without worrying that it
trashes any variables with names "file" or "files" or "dataset" or "outfile".
The variable "file" is inherently local because it is an iteration variable
(see `scope`) but the other three names need keyword `local` to protect them.

plot_all_data.gp:
@example
     local files = system("ls -1 *.dat")
     do for [file in files] @{
        local dataset = file[1:strstrt(file,".dat")-1]
        local outfile = dataset . ".png"
        set output outfile
        plot file with lines title dataset
     @}
     unset output

@end example


@node lower, pause, local, Commands
@section lower

See @ref{raise}.

@node pause, plot, lower, Commands
@section pause

@c ?commands pause
@cindex pause
@cmindex pause


@c ?pause mouse
The `pause` command displays any text associated with the command and then
waits a specified amount of time or until the carriage return is pressed.
`pause` is especially useful in conjunction with `load` files.

Syntax:
@example
      pause <time> @{"<string>"@}
      pause mouse @{<endcondition>@}@{, <endcondition>@} @{"<string>"@}
      pause mouse close

@end example

<time> may be any constant or floating-point expression.  `pause -1` will wait
until a carriage return is hit, zero (0) won't pause at all, and a positive
number will wait the specified number of seconds.

If the current terminal supports `mousing`, then `pause mouse` will terminate
on either a mouse click or on ctrl-C.  For all other terminals, or if mousing
is not active, `pause mouse` is equivalent to `pause -1`.

If one or more end conditions are given after `pause mouse`, then any one of
the conditions will terminate the pause. The possible end conditions are
`keypress`, `button1`, `button2`, `button3`, `close`, and `any`.
If the pause terminates on a keypress, then the ascii value of the key pressed
is returned in MOUSE_KEY.  The character itself is returned as a one character
string in MOUSE_CHAR. Hotkeys (bind command) are disabled if keypress is one of
the end conditions.  Zooming is disabled if button3 is one of the end
conditions.

In all cases the coordinates of the mouse are returned in variables MOUSE_X,
MOUSE_Y, MOUSE_X2, MOUSE_Y2.  See `mouse variables`.

Note: Since `pause` communicates with the operating system rather than the
graphics, it may behave differently with different device drivers (depending
upon how text and graphics are mixed).

Examples:
@example
      pause -1    # Wait until a carriage return is hit
      pause 3     # Wait three seconds
      pause -1  "Hit return to continue"
      pause 10  "Isn't this pretty?  It's a cubic spline."
      pause mouse "Click any mouse button on selected data point"
      pause mouse keypress "Type a letter from A-F in the active window"
      pause mouse button1,keypress
      pause mouse any "Any key or button will terminate"

@end example

The variant "pause mouse key" will resume after any keypress in the active
plot window. If you want to wait for a particular key to be pressed, you can
use a loop such as:

@example
      print "I will resume after you hit the Tab key in the plot window"
      plot <something>
      pause mouse key
      while (MOUSE_KEY != 9) @{
          pause mouse key
      @}

@end example

@menu
* pause_mouse_close::
* pseudo-mousing_during_pause::
@end menu

@node pause_mouse_close, pseudo-mousing_during_pause, pause, pause
@subsection pause mouse close

@c ?commands pause mouse close
@c ?pause mouse close
@c ?pause close
The command `pause mouse close` is a specific example of pausing to wait for
an external event.  In this case the program waits for a "close" event from
the plot window.  Exactly how to generate such an event varies with your
desktop environment and configuration, but usually you can close the plot
window by clicking on some widget on the window border or by typing
a hot-key sequence such as <alt><F4> or <ctrl>q.  If you are unsure whether
a suitable widget or hot-key is available to the user, you may also want to
define a hot-key sequence using gnuplot's own mechanism. See `bind`.

The command sequence below may be useful when running gnuplot from a script
rather than from the command line.

@example
     plot <...whatever...>
     bind all "alt-End" "exit gnuplot"
     pause mouse close

@end example


@node pseudo-mousing_during_pause,  , pause_mouse_close, pause
@subsection pseudo-mousing during pause

@c ?commands pause pseudo-mousing
@cindex pseudo-mousing

Some terminals use the same window for text entry and graphical display,
including terminal types `dumb`, `sixel`, `kitty`, and `domterm`.  These
terminals do not currently support mousing per se, but during a `pause mouse`
command they interpret keystrokes in the same way that a mousing terminal
would.  E.g. left/right/up/down arrow keys change the view angle of 3D plots
and perform incremental pan/zoom for 2D plots, `l` toggles log-scale axes,
`a` autoscales the current plot, `h` displays a list of key bindings.
A carriage return terminates the `pause` and restores normal command line
processing.


@node plot, print, pause, Commands
@section plot

@c ?commands plot
@cindex plot
@cmindex plot


`plot` and `splot` are the primary commands for drawing plots with `gnuplot`.
They offer many different graphical representations for functions and data.
`plot` is used to draw 2D functions and data.
`splot` draws 2D projections of 3D surfaces and data.

Syntax:
@example
      plot @{<ranges>@} <plot-element> @{, <plot-element>, <plot-element>@}

@end example

Each plot element consists of a definition, a function, or a data source
together with optional properties or modifiers:
@example
      plot-element:
           @{<iteration>@}
           <definition> | @{sampling-range@} <function> | <data source>
                        | keyentry
           @{axes <axes>@} @{<title-spec>@}
           @{with <style>@}

@end example

The graphical representation of each plot element is determined by the keyword
`with`, e.g. `with lines` or @ref{boxplot}.   See `plotting styles`.

The data to be plotted is either generated by a function (two functions if in
parametric mode), read from a data file, read from a named data block that
was defined previously, or extracted from an array.  Multiple datafiles,
data blocks, arrays, and/or functions may be plotted in a single plot command
separated by commas.

Many additional keywords are specific to data plots.
See @ref{datafile}.
Also see `data`, `inline data`, @ref{functions}.

A plot-element that contains the definition of a function or variable does not
create any visible output, see third example below.

Examples:
@example
      plot sin(x)
      plot sin(x), cos(x)
      plot f(x) = sin(x*a), a = .2, f(x), a = .4, f(x)
      plot "datafile.1" with lines, "datafile.2" with points
      plot [t=1:10] [-pi:pi*2] tan(t), \
           "data.1" using (tan($2)):($3/$4) smooth csplines \
                    axes x1y2 notitle with lines 5
      plot for [datafile in "spinach.dat broccoli.dat"] datafile

@end example

See also `show plot`.

@menu
* axes::
* binary::
* data::
* functions::
* parametric::
* ranges::
* sampling::
* for_loops_in_plot_command::
* title::
* with::
@end menu

@node axes, binary, plot, plot
@subsection axes

@c ?commands plot axes
@c ?plot axes
@cindex axes

There are four possible sets of axes available; the keyword <axes> is used to
select the axes for which a particular line should be scaled.  `x1y1` refers
to the axes on the bottom and left; `x2y2` to those on the top and right;
`x1y2` to those on the bottom and right; and `x2y1` to those on the top and
left.  Ranges specified on the `plot` command apply only to the first set of
axes (bottom left).

@node binary, data, axes, plot
@subsection binary

@cindex binary

@c ?data binary
@c ?datafile binary
@c ?plot datafile binary
BINARY DATA FILES:

It is necessary to provide the keyword @ref{binary} after the filename.
Adequate details of the file format must be given on the command line or
extracted from the file itself for a supported binary @ref{filetype}.
In particular, there are two structures for binary files,  binary matrix
format and binary general format.

The @ref{matrix} format contains a two dimensional array of 32 bit IEEE
float values plus an additional column and row of coordinate values.  In the
`using` specifier of a plot command, column 1 refers to the matrix row
coordinate, column 2 refers to the matrix column coordinate, and column 3
refers to the value stored in the array at those coordinates.

The @ref{general} format contains an arbitrary number of columns for which
information must be specified at the command line.  For example, `array`,
@ref{record}, `format` and `using` can indicate the size, format and dimension
of data.  There are a variety of useful commands for skipping file headers
and changing endianess.  There are a set of commands for positioning and
translating data since often coordinates are not part of the file when uniform
sampling is inherent in the data.  Unlike reading from a text or matrix binary
file, general binary does not treat the generated columns as 1, 2 or 3 in the
`using` list. Instead column 1 refers to column 1 of the file, or as specified
in the `format` list.

There are global default settings for the various binary options which may
be set using the same syntax as the options when used as part of the `(s)plot
<filename> binary ...` command.  This syntax is `set datafile binary ...`.
The general rule is that common command-line specified parameters override
file-extracted parameters which override default parameters.

@ref{matrix} is the default binary format when no keywords specific to
@ref{general} are given, i.e., `array`, @ref{record}, `format`, @ref{filetype}.

General binary data can be entered at the command line via the special file
name '-'.  However, this is intended for use through a pipe where programs
can exchange binary data, not for keyboards.  There is no "end of record"
character for binary data.  Gnuplot continues reading from a pipe until it
has read the number of points declared in the `array` qualifier.
See @ref{matrix} or @ref{general} for more details.

The @ref{index} keyword is not supported, since the file format allows only one
surface per file.  The @ref{every} and `using` specifiers are supported.
`using` operates as if the data were read in the above triplet form.
@uref{http://www.gnuplot.info/demo/binary.html,Binary File Splot Demo.
}

@menu
* general::
* array::
* record::
* skip::
* format::
* blank::
* endian::
* filetype::
* keywords::
@end menu

@node general, array, binary, binary
@subsubsection general

@c ?commands plot binary general
@c ?commands splot binary general
@c ?plot binary general
@c ?splot binary general
@c ?datafile binary general
@c ?data binary general
@c ?binary general
The @ref{binary} keyword appearing alone indicates a binary data file that
contains both coordinate information describing a non-uniform grid and
the value of each grid point (see @ref{matrix}).  Binary data in any other
format requires additional keywords to describe the layout of the data.
Unfortunately the syntax of these required additional keywords is convoluted.
Nevertheless the general binary mode is particularly useful for application
programs sending large amounts of data to gnuplot.

Syntax:
@example
      plot '<file_name>' @{binary <binary list>@} ...
      splot '<file_name>' @{binary <binary list>@} ...

@end example

General binary format is activated by keywords in <binary list> pertaining
to information about file structure, i.e., `array`, @ref{record}, `format` or
@ref{filetype}.  Otherwise, non-uniform matrix binary format is assumed.
(See @ref{matrix} for more details.)

Gnuplot knows how to read a few standard binary file types that are fully
self-describing, e.g. PNG images.  Type @ref{binary} at the
command line for a list. Apart from these, you can think of binary data
files as conceptually the same as text data.  Each point has columns of
information which are selected via the `using` specification.  If no `format`
string is specified, gnuplot will read in a number of binary values equal
to the largest column given in the `<using list>`.  For example, `using 1:3`
will result in three columns being read, of which the second will be ignored.
Certain plot types have an associated default using specification.
For example, `with image` has a default of `using 1`, while @ref{rgbimage}
has a default of `using 1:2:3`.

@node array, record, general, binary
@subsubsection array

@c ?binary array
@c ?binary general array
Describes the sampling array dimensions associated with the binary file.
The coordinates will be generated by gnuplot.  A number must be specified
for each dimension of the array.  For example, `array=(10,20)` means the
underlying sampling structure is two-dimensional with 10 points along the
first (x) dimension and 20 points along the second (y) dimension.
A negative number indicates that data should be read until the end of file.
If there is only one dimension, the parentheses may be omitted.
A colon can be used to separate the dimensions for multiple records.
For example, `array=25:35` indicates there are two one-dimensional records in
the file.

@node record, skip, array, binary
@subsubsection record

@c ?binary record
@c ?binary general record

The @ref{record} keyword provides array dimensions describing how data in
a binary file are to be arranged into an array.  A number must be specified
for each dimension of the array.  For example, `record=(10,20)` means the
underlying structure is two-dimensional with 10 points along the first (x)
dimension and 20 points along the second (y) dimension.  A negative number
indicates that data should be read until the end of file.

If there is only one dimension, the parentheses may be omitted.
A colon can be used to separate the dimensions for multiple records.
E.g. `record=25:35` describes a file containing two one-dimensional records.

This keyword serves the same function as `array` and has the same syntax.
However, `array` causes gnuplot to generate coordinate information while
@ref{record} does not.  Use @ref{record} when the coordinates are to be read from
columns of the binary data file records.

@node skip, format, record, binary
@subsubsection skip

@c ?binary skip
This keyword allows you to skip sections of a binary file. For instance, if the
file contains a 1024 byte header before the start of the data region you would
probably want to use
@example
      plot '<file_name>' binary skip=1024 ...
@end example

If there are multiple records in the file, you may specify a leading offset for
each. For example, to skip 512 bytes before the 1st record and 256 bytes before
the second and third records
@example
      plot '<file_name> binary record=356:356:356 skip=512:256:256 ...

@end example

@node format, blank, skip, binary
@subsubsection format

@c ?binary format
@c ?binary general format
The default binary format is a float.  For more flexibility, the format can
include details about variable sizes.  For example, `format="%uchar%int%float"`
associates an unsigned character with the first using column, an int with the
second column and a float with the third column.  If the number of size
specifications is less than the greatest column number, the size is implicitly
taken to be similar to the last given variable size.

Furthermore, similar to the `using` specification, the format can include
discarded columns via the `*` character and have implicit repetition via a
numerical repeat-field.  For example, `format="%*2int%3float"` causes gnuplot
to discard two ints before reading three floats.  To list variable sizes, type
`show datafile binary datasizes`.  There are a group of names that are machine
dependent along with their sizes in bytes for the particular compilation.
There is also a group of names which attempt to be machine independent.

@node blank, endian, format, binary
@subsubsection blank

@c ?binary blank
@c ?binary general blank
Some plot styles expect a blank line to separate groups of data points read
from a text input file.  For instance the vertices of one polygon in an input
text data stream are separated from those of the next polygon by a blank line.
Since there are no actual blank lines in a binary file, this option allows
a special record in a general binary file to be interpreted as if it were a
blank line.  The only option currently supported is `blank=NaN`, which
means that a value of NaN in the first field of a record causes the entire
record to be treated as if it were a blank line.

Example:
@example
     plot DATA binary format="%2float" blank=NAN using 1:2 with polygons

@end example


@node endian, filetype, blank, binary
@subsubsection endian

@c ?binary endian
Often the endianess of binary data in the file does not agree with the
endianess used by the platform on which gnuplot is running.  Several words can
direct gnuplot how to arrange bytes.  For example `endian=little` means treat
the binary file as having byte significance from least to greatest. The options
are

@example
              little:  least significant to greatest significance
                 big:  greatest significance to least significance
             default:  assume file endianess is the same as compiler
         swap (swab):  Interchange the significance.  (If things
                       don't look right, try this.)

@end example

Gnuplot can support "middle" ("pdp") endian if it is compiled with that option.

@node filetype, keywords, endian, binary
@subsubsection filetype

@c ?binary filetype
@cindex filetype

For some standard binary file formats gnuplot can extract all the necessary
information from the file in question.  As an example, "format=edf" will read
ESRF Header File format files.  For a list of the currently supported file
formats, type `show datafile binary filetypes`.

There is a special file type called `auto` for which gnuplot will check if the
binary file's extension is a quasi-standard extension for a supported format.

Command line keywords may be used to override settings extracted from the file.
The settings from the file override any defaults.  See @ref{binary}.


@noindent --- AVS ---

@c ?binary filetype avs
@c ?filetype avs
@cindex avs

`avs` is one of the automatically recognized binary file types for images.
AVS is an extremely simple format, suitable mostly for streaming between
applications. It consists of 2 longs (xwidth, ywidth) followed by a stream
of pixels, each with four bytes of information alpha/red/green/blue.


@noindent --- EDF ---

@c ?binary filetype edf
@c ?filetype edf
@cindex edf

@c ?filetype ehf
@cindex ehf

`edf` is one of the automatically recognized binary file types for images.
EDF stands for ESRF Data Format, and it supports both edf and ehf formats
(the latter means ESRF Header Format).  More information on specifications
can be found at

@example
  http://www.edfplus.info/specs

@end example


@noindent --- PNG ---

@c ?binary filetype png
@c ?binary filetype gif
@c ?binary filetype jpeg
@c ?filetype png
@c ?filetype gif
@c ?filetype jpeg
If gnuplot was configured to use the libgd library for png/gif/jpeg output,
then it can also be used to read these same image types as binary files.
You can use an explicit command
@example
      plot 'file.png' binary filetype=png
@end example

Or the file type will be recognized automatically from the extension if you
have previously requested
@example
      set datafile binary filetype=auto

@end example

@node keywords,  , filetype, binary
@subsubsection keywords

@c ?binary keywords
The following keywords apply only when generating coordinates from binary
data files.  That is, the control mapping the individual elements of a binary
array, matrix, or image to specific x/y/z positions.


@noindent --- SCAN ---

@c ?binary keywords scan
@cindex scan

A great deal of confusion can arise concerning the relationship between how
gnuplot scans a binary file and the dimensions seen on the plot.  To lessen
the confusion, conceptually think of gnuplot _always_ scanning the binary file
point/line/plane or fast/medium/slow.  Then this keyword is used to tell
gnuplot how to map this scanning convention to the Cartesian convention shown
in plots, i.e., x/y/z.  The qualifier for scan is a two or three letter code
representing where point is assigned (first letter), line is assigned (second
letter), and plane is assigned (third letter).  For example, `scan=yx` means
the fastest, point-by-point, increment should be mapped along the Cartesian
y dimension and the middle, line-by-line, increment should be mapped along the
x dimension.

When the plotting mode is `plot`, the qualifier code can include the two
letters x and y.  For `splot`, it can include the three letters x, y and z.

There is nothing restricting the inherent mapping from point/line/plane to
apply only to Cartesian coordinates.  For this reason there are cylindrical
coordinate synonyms for the qualifier codes where t (theta), r and z are
analogous to the x, y and z of Cartesian coordinates.


@noindent --- TRANSPOSE ---

@c ?binary keywords transpose
@cindex transpose

Shorthand notation for `scan=yx` or `scan=yxz`.  I.e. it affects the assignment
of pixels to scan lines during input.  To instead transpose an image when it is
displayed try
@example
     plot 'imagefile' binary filetype=auto flipx rotate=90deg with rgbimage

@end example


@noindent --- DX, DY, DZ ---

@c ?binary keywords dx
@c ?binary keywords dy
@cindex dx

@cindex dy

When gnuplot generates coordinates, it uses the spacing described by these
keywords.  For example `dx=10 dy=20` would mean space samples along the
x dimension by 10 and space samples along the y dimension by 20.  `dy` cannot
appear if `dx` does not appear.  Similarly, `dz` cannot appear if `dy` does not
appear.  If the underlying dimensions are greater than the keywords specified,
the spacing of the highest dimension given is extended to the other dimensions.
For example, if an image is being read from a file and only `dx=3.5` is given
gnuplot uses a delta x and delta y of 3.5.

The following keywords also apply only when generating coordinates.  However
they may also be used with matrix binary files.


@noindent --- FLIPX, FLIPY, FLIPZ ---

@c ?binary keywords flipx
@cindex flipx

@cindex flipy

@cindex flipz

Sometimes the scanning directions in a binary datafile are not consistent with
that assumed by gnuplot.  These keywords can flip the scanning direction along
dimensions x, y, z.


@noindent --- ORIGIN	 ---

@c ?binary keywords origin
@c ?binary origin
When gnuplot generates coordinates based upon transposition and flip, it
attempts to always position the lower left point in the array at the origin,
i.e., the data lies in the first quadrant of a Cartesian system after transpose
and flip.

To position the array somewhere else on the graph, the @ref{origin} keyword directs
gnuplot to position the lower left point of the array at a point specified by a
tuple.  The tuple should be a double for `plot` and a triple for `splot`.
For example, `origin=(100,100):(100,200)` is for two records in the file and
intended for plotting in two dimensions. A second example, `origin=(0,0,3.5)`,
is for plotting in three dimensions.


@noindent --- CENTER ---

@c ?binary keywords center
@c ?keywords center
@cindex center

Similar to @ref{origin}, this keyword will position the array such that its center
lies at the point given by the tuple.  For example, `center=(0,0)`.  Center
does not apply when the size of the array is `Inf`.


@noindent --- ROTATE ---

@c ?binary keywords rotate
@c ?keywords rotate
@cindex rotate

The transpose and flip commands provide some flexibility in generating and
orienting coordinates.  However, for full degrees of freedom, it is possible to
apply a rotational vector described by a rotational angle in two dimensions.

The `rotate` keyword applies to the two-dimensional plane, whether it be `plot`
or `splot`.  The rotation is done with respect to the positive angle of the
Cartesian plane.

The angle can be expressed in radians, radians as a multiple of pi, or degrees.
For example, `rotate=1.5708`, `rotate=0.5pi` and `rotate=90deg` are equivalent.

If @ref{origin} is specified, the rotation is done about the lower left sample
point before translation.  Otherwise, the rotation is done about the array
`center`.


@noindent --- PERPENDICULAR ---

@c ?binary keywords perpendicular
@cindex perpendicular

For `splot`, the concept of a rotational vector is implemented by a triple
representing the vector to be oriented normal to the two-dimensional x-y plane.
Naturally, the default is (0,0,1).  Thus specifying both rotate and
perpendicular together can orient data myriad ways in three-space.

The two-dimensional rotation is done first, followed by the three-dimensional
rotation.  That is, if R' is the rotational 2 x 2 matrix described by an angle,
and P is the 3 x 3 matrix projecting (0,0,1) to (xp,yp,zp), let R be
constructed from R' at the upper left sub-matrix, 1 at element 3,3 and zeros
elsewhere.  Then the matrix formula for translating data is v' = P R v, where v
is the 3 x 1 vector of data extracted from the data file.  In cases where the
data of the file is inherently not three-dimensional, logical rules are used to
place the data in three-space.  (E.g., usually setting the z-dimension value to
zero and placing 2D data in the x-y plane.)

@node data, functions, binary, plot
@subsection data

@c ?commands plot datafile
@c ?plot datafile
@cindex data-file

@cindex datafile
@opindex datafile


@cindex data

@cindex file

Data provided in a file can be plotted by giving the name of the file
(enclosed in single or double quotes) on the `plot` command line.
Data may also come from an input stream that is not a file.
See @ref{special-filenames}, @ref{piped-data}, `datablocks`.

Syntax:
@example
      plot '<file_name>' @{binary <binary list>@}
                         @{@{nonuniform|sparse@} matrix@}
                         @{index <index list> | index "<name>"@}
                         @{every <every list>@}
                         @{skip <number-of-lines>@}
                         @{using <using list>@}
                         @{convexhull@} @{concavehull@}
                         @{smooth <option>@}
                         @{bins <options>@}
                         @{mask@}
                         @{volatile@} @{zsort@} @{noautoscale@}

@end example

The modifiers @ref{binary}, @ref{index}, @ref{every}, @ref{skip}, `using`, @ref{smooth}, `bins`,
`mask`, `convexhull`, `concavehull`, and `zsort` are discussed separately.
In brief
@itemize @bullet
@item
`skip N` tells the program to ignore N lines at the start of the input file
@item
@ref{binary} indicates that the file contains binary data rather than text
@item
@ref{index} selects which data sets in a multi-data-set file are to be plotted
@item
@ref{every} specifies which points within a single data set are to be plotted
@item
`using` specifies which columns in the file are to be used in which order
@item
@ref{smooth} performs simple filtering, interpolation, or curve-fitting of the
data prior to plotting
@item
`convexhull` either alone or in combination with @ref{smooth} replaces the
points in the input data set with a new set of points that constitute the
vertices of a bounding polygon.
@item
`bins` sorts individual input points into equal-sized intervals along x and
plots a single accumulated value per interval
@item
`mask` filters the data through a previously defined mask to plot only a
selected subset of pixels in an image or a selected region of a pm3d surface.
@item
@ref{volatile} indicates that the content of the file may not be available to
reread later and therefore it should be retained internally for re-use.
@end itemize

`splot` has a similar syntax but does not support `bins` and supports only a
few @ref{smooth} options.

The `noautoscale` keyword means that the points making up this plot will be
ignored when automatically determining axis range limits.

TEXT DATA FILES:

Each non-empty line in a data file describes one data point, except that
records beginning with `#` will be treated as comments and ignored.

Depending on the plot style and options selected, from one to eight values
are read from each line and associated with a single data point.
See `using`.

The individual records on a single line of data must be separated by white
space (one or more blanks or tabs) or a special field separator character
which is specified by the @ref{datafile} command.  A single field may itself
contain white space characters if the entire field is enclosed in a pair of
double quotes, or if a field separator other than white space is in effect.
Whitespace inside a pair of double quotes is ignored when counting columns,
so the following datafile line has three columns:
@example
      1.0 "second column" 3.0

@end example

Data may be written in exponential format with the exponent preceded by the
letter e or E.  The fortran exponential specifiers d, D, q, and Q may also
be used if the command `set datafile fortran` is in effect.

Blank records in a data file are significant.
Single blank records designate discontinuities in a `plot`; no line will join
points separated by a blank records (if they are plotted with a line style).
Two blank records in a row indicate a break between separate data sets.
See @ref{index}.

If autoscaling has been enabled (@ref{autoscale}), the axes are automatically
extended to include all datapoints, with a whole number of tic marks if tics
are being drawn.  This has two consequences: i) For `splot`, the corner of
the surface may not coincide with the corner of the base.  In this case, no
vertical line is drawn.  ii) When plotting data with the same x range on a
dual-axis graph, the x coordinates may not coincide if the x2tics are not
being drawn.  This is because the x axis has been autoextended to a whole
number of tics, but the x2 axis has not.  The following example illustrates
the problem:

@example
      reset; plot '-', '-' axes x2y1
      1 1
      19 19
      e
      1 1
      19 19
      e

@end example

To avoid this, you can use the @ref{noextend} modifier of the @ref{autoscale}
or `set [axis]range` commands. This turns off extension of the axis range to
include the next tic mark.

Label coordinates and text can also be read from a data file (see @ref{labels}).

@menu
* columnheaders::
* csv_files::
* every::
* example_datafile::
* filters::
* index::
* skip_::
* smooth::
* special-filenames::
* piped-data::
* using::
* volatile::
@end menu

@node columnheaders, csv_files, data, data
@subsubsection columnheaders

@c ?commands plot datafile columnheaders
@c ?data-file columnheaders
@c ?datafile columnheaders
@cindex columnheaders

Extra lines at the start of a data file may be explicitly ignored using the
@ref{skip} keyword in the plot command. A single additional line containing text
column headers may be present.  It is skipped automatically if the plot command
refers explicitly to column headers, e.g. by using them for titles.
Otherwise you may need to skip it explicitly either by adding one to the skip
count or by setting the attribute @ref{columnheaders}.
See @ref{skip}, `columnhead`, `autotitle columnheader`, @ref{datafile}.

@node csv_files, every, columnheaders, data
@subsubsection csv files

@c ?csv files
@c ?datafile csv
Syntax:
@example
     set datafile separator @{whitespace | tab | comma | "chars"@}

@end example

"csv" is short for "comma-separated values". The term "csv file" is loosely
applied to files in which data fields are delimited by a specific character,
not necessarily a comma.  To read data from a csv file you must tell gnuplot
what the field-delimiting character is.  For instance to read from a file
using semicolon as a field delimiter:

@example
     set datafile separator ";"

@end example

See `set datafile separator`.  This applies only to files used for input.
To create a csv file on output, use the corresponding `separator` option to
@ref{table}.

@node every, example_datafile, csv_files, data
@subsubsection every

@c ?commands plot datafile every
@c ?plot datafile every
@c ?plot every
@c ?data-file every
@c ?datafile every
@cindex every

The @ref{every} keyword allows a periodic sampling of a data set to be plotted.

For ordinary files a "point" single record (line); a "block" of data is a set
of consecutive records with blank lines before and after the block.

For matrix data a "block" and "point" correspond to "row" and "column".
See @ref{every}.

Syntax:
@example
      plot 'file' every @{<point_incr>@}
                          @{:@{<block_incr>@}
                            @{:@{<start_point>@}
                              @{:@{<start_block>@}
                                @{:@{<end_point>@}
                                  @{:<end_block>@}@}@}@}@}

@end example

The data points to be plotted are selected according to a loop from
<`start_point`> to <`end_point`> with increment <`point_incr`> and the
blocks according to a loop from <`start_block`> to <`end_block`> with
increment <`block_incr`>.

The first datum in each block is numbered '0', as is the first block in the
file.

Note that records containing unplottable information are counted.

Any of the numbers can be omitted; the increments default to unity, the start
values to the first point or block, and the end values to the last point or
block. ':' at the end of the @ref{every} option is not permitted.
If @ref{every} is not specified, all points in all lines are plotted.

Examples:
@example
      every :::3::3    # selects just the fourth block ('0' is first)
      every :::::9     # selects the first 10 blocks
      every 2:2        # selects every other point in every other block
      every ::5::15    # selects points 5 through 15 in each block

@end example

See
@uref{http://www.gnuplot.info/demo/simple.html,simple plot demos (simple.dem)
}
,
@uref{http://www.gnuplot.info/demo/surface1.html,Non-parametric splot demos
}
, and
@uref{http://www.gnuplot.info/demo/surface2.html,Parametric splot demos
}
.

@node example_datafile, filters, every, data
@subsubsection example datafile

@c ?commands plot datafile example
@c ?plot datafile example
@c ?plot example
@c ?datafile example
@c ?data-file example
@cindex example

This example plots the data in the file "population.dat" and a theoretical
curve:

@example
      pop(x) = 103*exp((1965-x)/10)
      set xrange [1960:1990]
      plot 'population.dat', pop(x)

@end example

The file "population.dat" might contain:

@example
      # Gnu population in Antarctica since 1965
         1965   103
         1970   55
         1975   34
         1980   24
         1985   10

@end example

@cindex skip

Binary examples:

@example
      # Selects two float values (second one implicit) with a float value
      # discarded between them for an indefinite length of 1D data.
      plot '<file_name>' binary format="%float%*float" using 1:2 with lines

@end example

@example
      # The data file header contains all details necessary for creating
      # coordinates from an EDF file.
      plot '<file_name>' binary filetype=edf with image
      plot '<file_name>.edf' binary filetype=auto with image

@end example

@example
      # Selects three unsigned characters for components of a raw RGB image
      # and flips the y-dimension so that typical image orientation (start
      # at top left corner) translates to the Cartesian plane.  Pixel
      # spacing is given and there are two images in the file.  One of them
      # is translated via origin.
      plot '<file_name>' binary array=(512,1024):(1024,512) format='%uchar' \
           dx=2:1 dy=1:2 origin=(0,0):(1024,1024) flipy u 1:2:3 w rgbimage

@end example

@example
      # Four separate records in which the coordinates are part of the
      # data file.  The file was created with a endianess different from
      # the system on which gnuplot is running.
      splot '<file_name>' binary record=30:30:29:26 endian=swap u 1:2:3

@end example

@example
      # Same input file, but this time we skip the 1st and 3rd records
      splot '<file_name>' binary record=30:26 skip=360:348 endian=swap u 1:2:3

@end example


See also @ref{matrix}.

@node filters, index, example_datafile, data
@subsubsection filters

@c ?commands plot datafile filters
@c ?plot datafile filters
@c ?plot filters
@c ?data-file filters
@c ?datafile filters
@cindex filters

Filter operations are applied immediately after reading input data, before
applying any smoothing or style-specific processing options.
In general the purpose of a filter is to replace the original full set of
input points with a selected subset of points, possibly modified, regrouped,
or reordered,
The filters currently supported are `bins`, `convexhull`, `concavehull`,
`mask`, `sharpen`, and `zsort`.


@noindent --- BINS ---

@c ?commands plot datafile filters bins
@c ?plot datafile filters bins
@c ?plot filters bins
@c ?data-file filters bins
@c ?datafile filters bins
@c ?filters bins
@cindex bins

Syntax:
@example
     plot 'DATA' using <XCOL> @{:<YCOL>@} bins@{=<NBINS>@}
          @{binrange [<LOW>:<HIGH>]@} @{binwidth=<width>@}
          @{binvalue=@{sum|avg@}@}

@end example

The `bins` option to a `plot` command first assigns the original data to
equal width bins on x and then plots a single value per bin.  The default
number of bins is controlled by @ref{samples}, but this can be changed by
giving an explicit number of bins in the command.

If no binrange is given, the range is taken from the extremes of the x
values found in 'DATA'.

Given the range and the number of bins, bin width is calculated automatically
and points are assigned to bins 0 to NBINS-1
@example
     BINWIDTH = (HIGH - LOW) / (NBINS-1)
     xmin = LOW - BINWIDTH/2
     xmax = HIGH + BINWIDTH/2
     first bin holds points with (xmin <= x < xmin + BINWIDTH)
     last bin holds points with (xmax-BINWIDTH <= x < xman)
     each point is assigned to bin i = floor(NBINS * (x-xmin)/(xmax-xmin))

@end example

Alternatively you can provide a fixed bin width, in which case nbins is
calculated as the smallest number of bins that will span the range.

On output bins are plotted or tabulated by midpoint. E.g. if the program
calculates bin width as shown above, the x coordinate output for the first bin
is x=LOW (not x=xmin).

If only a single column is given in the using clause then each data point
contributes a count of 1 to the accumulation of total counts in the bin for
that x coordinate value.  If a second column is given then the value in that
column is added to the accumulation for the bin.  Thus the following two plot
commands are equivalent:
@example
     plot 'DATA" using N bins=20
     set samples 20
     plot 'DATA' using (column(N)):(1)

@end example

By default the y value plotted for each bin is the sum of the y values over all
points in that bin.  This corresponds to option `binvalue=sum`.
The alternative `binvalue=avg` plots the mean y value for points in that bin.

For related processing options see `smooth frequency` and `smooth kdensity`.


@noindent --- CONVEXHULL ---

@c ?commands plot datafile filters convexhull
@c ?commands plot datafile convexhull
@c ?plot datafile filters convexhull
@c ?datafile filters convexhull
@c ?plot filters convexhull
@c ?filters convexhull
@c ?plot convexhull
@cindex convexhull


Convexhull is not a plot style. It can appear either alone as a filter
keyword or in combination with `smooth path` and/or `expand <increment>`.

@example
     plot FOO using x:y convexhull
     plot FOO using x:y convexhull smooth path
     plot FOO using x:y convexhull expand <increment> @{smooth path@}

@end example

The points in FOO are replaced by a subset of the original points that
constitute the unique bounding convex polygon, the convex hull.
The vertices of this polygon are output in clockwise order to form a closed
curve.  The first and last points of the generated curve are equal, making it
suitable for plotting with styles `lines`, @ref{polygons}, or @ref{filledcurves}.
The convex hull may also be useful as a mask to selectively render the region
of an image or a pm3d surface that contains all the original data points.
See @ref{masking}.

If the keyword @ref{smooth} is present, the vertices are then used as guide
points to generate a smooth closed curve (see `smooth path`). By default
this smoothed curve runs through the bounding points.

The optional `expand` keyword and increment shift the edge segments of
the hull away from the interior by an incremental distance.
The displaced segments are then connected using miter joins; this means
that each vertex of the original hull is replaced by two vertices, since
there is now a gap between the to adjoining edges.



@noindent --- CONCAVEHULL ---

@c ?commands plot datafile filters concavehull
@c ?commands plot datafile concavehull
@c ?plot datafile filters concavehull
@c ?datafile filters concavehull
@c ?plot filters concavehull
@c ?filters concavehull
@cindex concavehull


Present only if your copy of gnuplot was configured --enable-chi-shapes.

Concavehull is not a plot style. It is a filter that finds a bounding
polygon, a "hull",  of the input data points and replaces the original points
with an ordered subset of points that lie along the perimeter of this polygon.
Unlike the convex hull, which is uniquely defined for any set of points, more
than one concave hull is possible.  Various schemes for selecting a concave
hull exist; gnuplot generates hulls that are χ-shapes as defined by
Duckham et al. (2008) Patttern Recognition 41:3224-3236.

For a given set of points, a χ-shape is generated by iterative removal of
triangles from the Delaunay triangulation.  Each iteration removes a single
triangle subject to the criteria: (1) A triangle is only eligible for
removal if this would not reduce the connectivity of the bounded shape to
contact at a single point; (2) one edge of the triangle is the longest segment
of the current perimeter; (3) this edge is longer than a pre-selected
characteristic length parameter that fully determines the χ-shape.
In gnuplot this characteristic length parameter is taken from user variable
`chi_length`.  Iteration stops when there are no remaining eligible triangles.
If `chi_length` is large, no triangles are removed and the χ-shape is the
original perimeter, i.e. the convex hull.  As `chi_length` is reduced,
more and more triangles are removed and the resulting shape becomes
increasingly less convex.  Too-small values of `chi_length` are undesirable.

Appropriate choice of `chi_length` depends strongly on the density and
distribution of the input data points.  If no value for `chi_length` has
been set by the user, gnuplot will choose one automatically but there is
no guarantee that this value is suitable for your data.  For the data used
in the figures shown here gnuplot would choose chi_length=22.6 by default,
which is 0.6 of the length of the longest edge in the convex hull.
You can change the fraction of the longest edge used as a default with the
command `set chi_shape fraction <value>`

The value of `chi_length` used in the current plot, whether provided by the
user or chosen by the program, is saved to variable GPVAL_CHI_LENGTH.

The optional `expand` keyword and increment shift each edge segment of the
hull away from the interior by a fixed distance.  This creates a new set of
points describing a closed curve that lies outside all of the original points.
It can be combined with `smooth path`.



@noindent --- MASK ---

@c ?commands plot datafile filters mask
@c ?plot datafile filters mask
@c ?plot filters mask
@c ?data-file filters mask
@c ?datafile filters mask
@c ?filters mask
@cindex mask

@example
     plot FOO using 1:2:3 mask with @{pm3d|image@}

@end example

Once a mask has been defined, you can use it as a filter to select a
subset of points from an image or pm3d plot.
See @ref{masking}.



@noindent --- SHARPEN ---

@c ?plot filters sharpen
@c ?filters sharpen
@cindex sharpen


The `sharpen` filter applies only to function plots.  It looks for extrema in
the function being plotted, which may not lie exactly at any of the x values
sampled to generate the component line segments making up the graph.
The true local extrema are found by bisection and added to the set of sampled
points.  This reduces but does not entirely eliminate truncation of sharp
peaks due to coarse sampling.

Example:
@example
     set samples 150
     set xrange [-8:8]
     plot abs(sqrt(sin(x))) sharpen

@end example

Without the "sharpen" keyword, the resulting graph shows a continuous curve
with minima at intervals of pi that should reach zero but are artefactually
truncated to apparent minimal y values between 0.02 and 0.20.
Adding the "sharpen" keyword produces instead a correct representation of
the function with periodic sharp minima that reach y=0.
D sharpen 1



@noindent --- ZSORT ---

@c ?commands plot datafile filters zsort
@c ?plot datafile filters zsort
@c ?plot filters zsort
@c ?data-file zsort
@c ?datafile zsort
@c ?filters zsort
@cindex zsort

@example
     plot FOO using x:y:z:color zsort with points lc palette

@end example

Input data is sorted immediately after input, prior to applying any
smoothing options.  Note that some smoothing options will re-sort the data,
in which case `zsort` has no effect on the plot.
If z is not auto-scaled, points with z value out of range are flagged
but not deleted.

The intended use is to filter presentation of 2D scatter plots with a
huge number of points so that the distribution of high-scoring points
remains evident. Sorting the points on z guarantees that points with
a high z-value will not be obscured by points with lower z-values.


@node index, skip_, filters, data
@subsubsection index

@c ?commands plot datafile index
@c ?plot datafile index
@c ?plot index
@c ?data-file index
@c ?datafile index
@cindex index

The @ref{index} keyword allows you to select specific data sets in a multi-data-set
file for plotting.  For array indexing please see @ref{arrays}.

Syntax:
@example
      plot 'file' index @{ <m>@{:<n>@{:<p>@}@} | "<name>" @}

@end example

Data sets are separated by pairs of blank records.  `index <m>` selects only
set <m>; `index <m>:<n>` selects sets in the range <m> to <n>; and `index
<m>:<n>:<p>` selects indices <m>, <m>+<p>, <m>+2<p>, etc., but stopping at
<n>.  Following C indexing, the index 0 is assigned to the first data set in
the file.  Specifying too large an index results in an error message.
If <p> is specified but <n> is left blank then every <p>-th dataset is read
until the end of the file.  If @ref{index} is not specified, the entire file is
plotted as a single data set.

Example:
@example
      plot 'file' index 4:5

@end example

For each point in the file, the index value of the data set it appears in is
available via the pseudo-column `column(-2)`.  This leads to an alternative way
of distinguishing individual data sets within a file as shown below.  This is
more awkward than the @ref{index} command if all you are doing is selecting one
data set for plotting, but is very useful if you want to assign different
properties to each data set.  See `pseudocolumns`, `lc variable`.

Example:
@example
      plot 'file' using 1:(column(-2)==4 ? $2 : NaN)        # very awkward
      plot 'file' using 1:2:(column(-2)) linecolor variable # very useful!

@end example

`index '<name>'` selects the data set with name '<name>'.  Names are assigned
to data sets in comment lines.  The comment character and leading white space
are removed from the comment line.  If the resulting line starts with <name>,
the following data set is now named <name> and can be selected.

Example:
@example
      plot 'file' index 'Population'

@end example

Please note that every comment that starts with <name> will name the following
data set.  To avoid problems it may be useful to choose a naming scheme like
'== Population ==' or '[Population]'.

@c ^ <p>See also web page
@uref{http://www.gnuplot.info/demo/multimsh.html, splot with indices demo.
}</p>

@node skip_, smooth, index, data
@subsubsection skip

@c ?plot datafile skip
@c ?data-file skip
@c ?datafile skip
@cindex skip

The @ref{skip} keyword tells the program to skip lines at the start of a text
(i.e. not binary) data file.  The lines that are skipped do not count toward
the line count used in processing the @ref{every} keyword.  Note that `skip N`
skips lines only at the start of the file, whereas `every ::N` skips lines at
the start of every block of data in the file.  See also @ref{skip} for a
similar option that applies to binary data files.

@node smooth, special-filenames, skip_, data
@subsubsection smooth

@c ?commands plot datafile smooth
@c ?plot datafile smooth
@c ?plot smooth
@c ?data-file smooth
@c ?datafile smooth
@cindex smooth

@cindex splines

`gnuplot` includes a few routines for interpolation and other operations
applied to data as it is input; these are grouped under the @ref{smooth} option.
More sophisticated data processing may be performed by preprocessing the data
externally or by using @ref{fit} with an appropriate model.
See also the discussion of @ref{filters}.

Syntax:
@example
      smooth @{unique | frequency | fnormal | cumulative | cnormal
             | csplines | acsplines | mcsplines  bezier | sbezier
             | path
             | kdensity @{bandwidth@} @{period@}
             | unwrap@}

@end example

The `unique`, `frequency`, `fnormal`, `cumulative` and `cnormal` options
sort the data on x and then plot some aspect of the distribution of x values.

The spline and Bezier options determine coefficients describing a continuous
curve between the endpoints of the data. This curve is then plotted in the same
manner as a function, that is, by finding its value at uniform intervals along
the abscissa (see @ref{samples}) and connecting these points with straight line
segments. If the data set is interrupted by blank lines or undefined values a
separate continuous curve is fit for each uninterrupted subset of the data.
Adjacent separately fit segments may be separated by a gap or discontinuity.

`unwrap` manipulates the data to avoid jumps of more than pi by adding or
subtracting multiples of 2*pi.

If @ref{autoscale} is in effect, axis ranges will be computed for the final curve
rather than for the original data.

If @ref{autoscale} is not in effect, and a spline curve is being generated,
sampling of the spline fit is done across the intersection of the x range
covered by the input data and the fixed abscissa range defined by @ref{xrange}.

If too few points are available to apply the requested smoothing operation
an error message is produced.

The @ref{smooth} options have no effect on function plots. Only `smooth path`
is possible in polar coordinate mode.

Smoothing in 3D plots (splot) is currently limited to generating a natural
cubic spline to pass through a set of 3D points.  In the general case
the splines are generated along a trajectory (`smooth path`).  For a 2D
projection of 3D data `smooth csplines` acts as it does in 2D.
Either keyword is accepted in an `splot` command.

@example
     splot $DATA using 1:2:3 smooth path with lines

@end example



@noindent --- ACSPLINES ---

@c ?commands plot datafile smooth acsplines
@c ?plot datafile smooth acsplines
@c ?data-file smooth acsplines
@c ?datafile smooth acsplines
@c ?plot smooth acsplines
@c ?plot acsplines
@c ?splot smooth acsplines
@c ?splot acsplines
@c ?smooth acsplines
@cindex acsplines

The `smooth acsplines` option approximates the data with a natural smoothing
spline.  After the data are made monotonic in x (see `smooth unique`), a curve
is piecewise constructed from segments of cubic polynomials whose coefficients
are found by fitting to the individual data points weighted by the value,
if any, given in the third column of the using spec.  The default is equivalent
to
@example
      plot 'data-file' using 1:2:(1.0) smooth acsplines

@end example

Qualitatively, the absolute magnitude of the weights determines the number
of segments used to construct the curve.  If the weights are large, the
effect of each datum is large and the curve approaches that produced by
connecting consecutive points with natural cubic splines.  If the weights are
small, the curve is composed of fewer segments and thus is smoother; the
limiting case is the single segment produced by a weighted linear least
squares fit to all the data.  The smoothing weight can be expressed in terms
of errors as a statistical weight for a point divided by a "smoothing factor"
for the curve so that (standard) errors in the file can be used as smoothing
weights.

Example:
@example
      sw(x,S)=1/(x*x*S)
      plot 'data_file' using 1:2:(sw($3,100)) smooth acsplines
      splot 'data_file' using 1:2:3:(sw($4,100)) smooth acsplines

@end example

`splot ... smooth acsplines with lines` fits splines to the x, y, and z
coordinates of successive data points.  Unlike the 2D case, the points are not
sorted first so it is possible to fit splines to a trajectory containing loops.
Caution: In the general 3D case there are many more spline terms fitted, so the
weight value must be larger to achieve a comparable effect.  Also note that
fractional path length is used as the implicit control variable and therefore
the intervals being weighted do not match the projections onto a single axis.



@noindent --- BEZIER ---

@c ?commands plot datafile smooth bezier
@c ?plot datafile smooth bezier
@c ?plot smooth bezier
@c ?data-file smooth bezier
@c ?datafile smooth bezier
@c ?plot bezier
@c ?smooth bezier
@cindex bezier

The `smooth bezier` option approximates the data with a Bezier curve of degree n
(the number of data points) that connects the endpoints.


@noindent --- BINS ---

@c ?data-file smooth bins
@c ?datafile smooth bins
@c ?smooth bins
`smooth bins` is the same as `bins`.
See `bins`.


@noindent --- CSPLINES ---

@c ?commands plot datafile smooth csplines
@c ?plot datafile smooth csplines
@c ?plot smooth csplines
@c ?data-file smooth csplines
@c ?datafile smooth csplines
@c ?plot csplines
@c ?smooth csplines
@cindex csplines

@c ?splot smooth csplines
The `smooth csplines` option connects consecutive points by natural cubic
splines after rendering the data monotonic on x (see `smooth unique`).
The smoothed curve always passes through the data points, so closely-spaced
points may generate local bumps and excursions in the smoothed curve.

`splot ... smooth csplines with lines` fits splines to the x, y, and z
coordinates of successive data points.  Unlike 2D csplines, the points are not
sorted first so it is possible to fit splines to a trajectory containing loops.
In the general case three separate sets of spline coefficients are generated,
each treating one coordinate x, y, or z as a function of a shared implicit
trajectory path parameter. This is equivalent to the 2D `plot ... smooth path`
option.

In the special case that the curve lies in the xz, yz, or xy plane then only a
single set of spline coefficients is generated.  This allows you to generate a
stack of smoothed curves in 3D where each one replicates the spline fit you
would have obtained from a 2D plot of the coordinates in projection.


@noindent --- MCSPLINES ---

@c ?commands plot datafile smooth mcsplines
@c ?plot datafile smooth mcsplines
@c ?plot smooth mcsplines
@c ?data-file smooth mcsplines
@c ?datafile smooth mcsplines
@c ?plot mcsplines
@c ?smooth mcsplines
@cindex mcsplines

The `smooth mcsplines` option connects consecutive points by cubic splines
constrained such that the smoothed function preserves the monotonicity and
convexity of the original data points.  This reduces the effect of outliers.
FN Fritsch & RE Carlson (1980) "Monotone Piecewise Cubic Interpolation",
SIAM Journal on Numerical Analysis 17: 238–246.



@noindent --- PATH ---

@c ?plot datafile smooth path
@c ?plot smooth path
@c ?smooth path
@c ?datafile smooth path
@cindex path

The `smooth path` option generates cubic splines to fit points in the order
they are presented in the input data; i.e. they are not first sorted on x.
This generates a smooth spline through a closed curve or along a trajectory
that contains loops. This smoothing mode is supported for both 2D and 3D
plot commands.  A separate curve is created for each set of points in the
input file, where a blank line separates the sets.
Plotting `smooth path with filledcurves closed` will guarantee that each set
of points creates a closed curve.  Plotting `smooth path with lines` will
generate a closed curve if the first and last points in the set overlap,
otherwise it will create an open-ended smooth path.  See
@uref{http://www.gnuplot.info/demo_6.0/smooth_path.html,smooth_path.dem
}


@noindent --- SBEZIER ---

@c ?commands plot datafile smooth sbezier
@c ?plot datafile smooth sbezier
@c ?plot smooth sbezier
@c ?data-file smooth sbezier
@c ?datafile smooth sbezier
@c ?plot sbezier
@c ?smooth sbezier
@cindex sbezier

The `smooth sbezier` option first renders the data monotonic (`unique`) and
then applies the `bezier` algorithm.


@noindent --- UNIQUE ---

@c ?commands plot datafile smooth unique
@c ?plot datafile smooth unique
@c ?plot smooth unique
@c ?data-file smooth unique
@c ?datafile smooth unique
@c ?plot unique
@c ?smooth unique
@cindex unique

The `smooth unique` option makes the data monotonic in x; points with the same
x-value are replaced by a single point having the average y-value.  The
resulting points are then connected by straight line segments.


@noindent --- UNWRAP ---

@c ?commands plot datafile smooth unwrap
@c ?plot datafile smooth unwrap
@c ?plot smooth unwrap
@c ?data-file smooth unwrap
@c ?datafile smooth unwrap
@c ?plot unwrap
@c ?smooth unwrap
@cindex unwrap

The `smooth unwrap` option modifies the input data so that any two successive
points will not differ by more than pi; a point whose y value is outside this
range will be incremented or decremented by multiples of 2pi until it falls
within pi of the previous point. This operation is useful for making wrapped
phase measurements continuous over time.


@noindent --- FREQUENCY ---

@c ?commands plot datafile smooth frequency
@c ?plot datafile smooth frequency
@c ?plot smooth frequency
@c ?data-file smooth frequency
@c ?datafile smooth frequency
@c ?plot frequency
@c ?smooth frequency
@cindex frequency

@cindex histogram

The `smooth frequency` option makes the data monotonic in x; points with the
same x-value are replaced by a single point having the summed y-values.
To plot a histogram of the number of data values in equal size bins,
set the y-value to 1.0 so that the sum is a count of occurrences in that bin.
This is done implicitly if only a single column is provided.
Example:
@example
     binwidth = <something>  # set width of x values in each bin
     bin(val) = binwidth * floor(val/binwidth)
     plot "datafile" using (bin(column(1))):(1.0) smooth frequency
     plot "datafile" using (bin(column(1))) smooth frequency  # same result
@end example

See also
@uref{http://www.gnuplot.info/demo/smooth.html,smooth.dem
}


@noindent --- FNORMAL ---

@c ?commands plot datafile smooth fnormal
@c ?plot datafile smooth fnormal
@c ?plot smooth fnormal
@c ?data-file smooth fnormal
@c ?datafile smooth fnormal
@c ?plot fnormal
@c ?smooth fnormal
@cindex fnormal

The `smooth fnormal` option work just like the `frequency` option, but produces
a normalized histogram. It makes the data monotonic in x and normalises the
y-values so they all sum to 1. Points with the same x-value are replaced by a
single point containing the sumed y-values. To plot a histogram of the number
of data values in equal size bins, set the y-value to 1.0 so that the sum is a
count of occurrences in that bin. This is done implicitly if only a single
column is provided.
See also
@uref{http://www.gnuplot.info/demo/smooth.html,smooth.dem
}


@noindent --- CUMULATIVE ---

@c ?commands plot datafile smooth cumulative
@c ?plot datafile smooth cumulative
@c ?plot smooth cumulative
@c ?data-file smooth cumulative
@c ?datafile smooth cumulative
@c ?plot cumulative
@c ?smooth cumulative
@cindex cumulative

The `smooth cumulative` option makes the data monotonic in x; points with the
same x-value are replaced by a single point containing the cumulative sum of
y-values of all data points with lower x-values (i.e. to the left of the
current data point). This can be used to obtain a cumulative distribution
function from data.
See also
@uref{http://www.gnuplot.info/demo/smooth.html,smooth.dem
}


@noindent --- CNORMAL ---

@c ?commands plot datafile smooth cnormal
@c ?plot datafile smooth cnormal
@c ?plot smooth cnormal
@c ?data-file smooth cnormal
@c ?datafile smooth cnormal
@c ?plot cnormal
@c ?smooth cnormal
@cindex cnormal

The `smooth cnormal` option makes the data monotonic in x and normalises the
y-values onto the range [0:1].  Points with the same x-value are replaced by
a single point containing the cumulative sum of y-values of all data points
with lower x-values (i.e. to the left of the current data point) divided by
the total sum of all y-values. This can be used to obtain a normalised
cumulative distribution function from data (useful when comparing sets of
samples with differing numbers of members).
See also
@uref{http://www.gnuplot.info/demo/smooth.html,smooth.dem
}



@noindent --- KDENSITY ---

@c ?commands plot datafile smooth kdensity
@c ?plot datafile smooth kdensity
@c ?plot smooth kdensity
@c ?data-file smooth kdensity
@c ?datafile smooth kdensity
@c ?plot kdensity
@c ?smooth kdensity period
@c ?smooth kdensity
@cindex kdensity

The `smooth kdensity` option generates and plots a kernel density estimate
using Gaussian kernels for the distribution from which a set of values was
drawn.  Values are taken from the first data column, optional weights are
taken from the second column.  A Gaussian is placed at the location of each
point and the sum of all these Gaussians is plotted as a function.
To obtain a normalized histogram, each weight should be 1/number-of-points.

Bandwidth:
By default gnuplot calculates and uses the bandwidth which would be optimal
for normally distributed data values.
@example
     default_bandwidth = sigma * (4/3N) ** (0.2)
@end example

This will usually be a very conservative, i.e. broad bandwidth.
Alternatively, you can provide an explicit bandwidth.
@example
     plot $DATA smooth kdensity bandwidth <value> with boxes
@end example

The bandwidth used in the previous plot is stored in GPVAL_KDENSITY_BANDWIDTH.

Period:
For periodic data individual Gaussian components should be treated as repeating
at intervals of one period.  One example is data measured as a function of
angle, where the period is 2pi.  Another example is data indexed by day-of-year
and measured over multiple years, where the period is 365.
In such cases the period should be provided in the plot command:
@example
     plot $ANGULAR_DAT smooth kdensity period 2*pi with lines

@end example


@node special-filenames, piped-data, smooth, data
@subsubsection special-filenames

@cindex special-filenames

@cindex special_filenames

@cindex pseudofiles

@c ?commands plot datafile special-filenames
@c ?plot datafile special-filenames
@c ?plot special-filenames
@c ?datafile special-filenames
@c ?data special-filenames
@c ?special-filenames ++
@c ?special-filenames +
@cindex '-'

@cindex '+'

@cindex '++'

There are a few filenames that have a special meaning:  '', '-', '+' and '++'.

The empty filename '' tells gnuplot to re-use the previous input file in the
same plot command. So to plot two columns from the same input file:

@example
      plot 'filename' using 1:2, '' using 1:3

@end example

The filename can also be reused over subsequent plot commands, however @ref{save}
then only records the name in a comment.

The special filenames '+' and '++' are a mechanism to allow the full range of
`using` specifiers and plot styles with inline functions.  Normally a function
plot can only have a single y (or z) value associated with each sampled point.
The pseudo-file '+' treats the sampled points as column 1, and allows
additional column values to be specified via a `using` specification, just as
for a true input file. The number of samples is controlled via @ref{samples}
or by giving an explicit sampling interval in the range specifier.
Samples are generated over the range given by @ref{trange} if it has been set,
otherwise over the full range of @ref{xrange}.

Note: The use of trange is a change from some earlier gnuplot versions.
It allows the sampling range to differ from the x axis range.

@example
      plot '+' using ($1):(sin($1)):(sin($1)**2) with filledcurves

@end example

An independent sampling range can be provided immediately before the '+'. As
in normal function plots, a name can be assigned to the independent variable.
If given for the first plot element, the sampling range specifier has to be
preceded by the `sample` keyword (see also @ref{sampling}).

@example
      plot sample [beta=0:2*pi] '+' using (sin(beta)):(cos(beta)) with lines

@end example

Here is an example where the sampling interval (1.5) is given as part of the
sampling range.  Samples will be generated at -3, -1.5, 0, 1.5, ..., 24.

@example
      plot $MYDATA, [t=-3:25:1.5] '+' using (t):(f(t))

@end example

The pseudo-file '++' returns 2 columns of data forming a regular grid of [u,v]
coordinates with the number of points along u controlled by @ref{samples} and
the number of points along v controlled by @ref{isosamples}.  You must set
urange and vrange before plotting '++'.  However the x and y ranges can be
autoscaled or can be explicitly set to different values than urange and vrange.
Examples:

@example
      splot '++' using 1:2:(sin($1)*sin($2)) with pm3d
      plot '++' using 1:2:(sin($1)*sin($2)) with image

@end example

The special filename `'-'` specifies that the data are inline; i.e., they
follow the command.  Only the data follow the command; `plot` options like
filters, titles, and line styles remain on the `plot` command line.  This is
similar to << in unix shell script.  The data are entered as though they
were being read from a file, one data point per record.
The letter "e" at the start of the first column terminates data entry.

`'-'` is intended for situations where it is useful to have data and commands
together, e.g. when both are piped to `gnuplot` from another application.
Some of the demos, for example, might use this feature.  While
`plot` options such as @ref{index} and @ref{every} are recognized, their use forces
you to enter data that won't be used.  For all but the simplest cases it is
probably easier to first define a datablock and then read from it rather than
from `'-'`.  See `datablocks`.

If you use `'-'` with @ref{replot}, you may need to enter the data more than once.
See @ref{replot}, @ref{refresh}.  Here again it may be better to use a datablock.

A blank filename ('') specifies that the previous filename should be reused.
This can be useful with things like

@example
      plot 'a/very/long/filename' using 1:2, '' using 1:3, '' using 1:4

@end example

If you use both `'-'` and `''` on the same `plot` command, you'll need to
provide two sets of inline data.  It will not reuse the first one.


@node piped-data, using, special-filenames, data
@subsubsection piped-data

@c ?commands plot datafile piped-data
@c ?plot datafile piped-data
@c ?datafile piped-data
@c ?data piped-data
@c ?plot piped-data
@cindex piped-data

@cindex pipes

@cindex pipes

On systems with a popen function, the datafile can be piped through a shell
command by starting the file name with a '<'.  For example,

@example
      pop(x) = 103*exp(-x/10)
      plot "< awk '@{print $1-1965, $2@}' population.dat", pop(x)

@end example

would plot the same information as the first population example but with
years since 1965 as the x axis.  If you want to execute this example, you
have to delete all comments from the data file above or substitute the
following command for the first part of the command above (the part up to
the comma):

@example
      plot "< awk '$0 !~ /^#/ @{print $1-1965, $2@}' population.dat"

@end example

While this approach is most flexible, it is possible to achieve simple
filtering with the `using` keyword.

On systems with an fdopen() function, data can be read from an arbitrary file
descriptor attached to either a file or pipe.  To read from file descriptor
`n` use `'<&n'`.  This allows you to easily pipe in several data files in a
single call from a POSIX shell:

@example
      $ gnuplot -p -e "plot '<&3', '<&4'" 3<data-3 4<data-4
      $ ./gnuplot 5< <(myprogram -with -options)
      gnuplot> plot '<&5'

@end example


@node using, volatile, piped-data, data
@subsubsection using

@c ?commands plot datafile using
@c ?plot datafile using
@c ?plot using
@c ?data-file using
@c ?datafile using
@cindex using

The most common datafile modifier is `using`.  It tells the program which
columns of data in the input file are to be plotted.

Syntax:
@example
      plot 'file' using <entry> @{:<entry> @{:<entry> ...@}@} @{'format'@}

@end example

Each <entry> may be a simple column number that selects the value from one
field of the input file, a string that matches a column label in the first
line of a data set, an expression enclosed in parentheses, or a special
function not enclosed in parentheses such as xticlabels(2).

If the entry is an expression in parentheses, then the function column(N) may
be used to indicate the value in column N. That is, column(1) refers to the
first item read, column(2) to the second, and so on.  The special symbols
$1, $2, ... are shorthand for column(1), column(2) ...

The special symbol $# evaluates to the total number of columns in the current
line of input, so column($#) or stringcolumn($#) always returns the content of
the final column even if the number of columns is unknown or different lines
in the file contain different numbers of columns.

The function `valid(N)` tests whether column N contains a valid number.
It returns 0 if the column value is missing, uninterpretable, or NaN.
@cindex column

@cindex columnheader

If each column of data in the input file contains a label in the first row
rather than a data value, this label can be used to identify the column on
input and/or in the plot legend. The column() function can be used to select
an input column by label rather than by column number.  For example,
if the data file contains
@example
      Height    Weight    Age
      val1      val1      val1
      ...       ...       ...
@end example

then the following plot commands are all equivalent
@example
      plot 'datafile' using 3:1, '' using 3:2
      plot 'datafile' using (column("Age")):(column(1)), \
                   '' using (column("Age")):(column(2))
      plot 'datafile' using "Age":"Height", '' using "Age":"Weight"

@end example

The full string must match. Comparison is case-sensitive.
To use column labels in the plot legend, use `set key autotitle columnhead`
or use function `columnhead(N)` when specifying an individual title.

In addition to the actual columns 1...N in the input data file, gnuplot
presents data from several "pseudo-columns" that hold bookkeeping information.
E.g. $0 or column(0) returns the sequence number of this data record within a
dataset.  Please see `pseudocolumns`.

An empty <entry> will default to its order in the list of entries.
For example, `using ::4` is interpreted as `using 1:2:4`.

If the `using` list has only a single entry, that <entry> will be used for y
and the data point number (pseudo-column $0) is used for x; for example,
"`plot 'file' using 1`" is identical to "`plot 'file' using 0:1`".
If the `using` list has two entries, these will be used for x and y.
See @ref{style} and @ref{fit} for details about plotting styles that make use of
data from additional columns of input.


@noindent --- FORMAT ---

@c ?using format
@c ?plot using format
If a format is specified, it is used to read in each datafile record using the
C library 'scanf' function.  Otherwise the record is interpreted as consisting
of columns (fields) of data separated by whitespace (spaces and/or tabs),
but see `datafile separator`.

'scanf' itself accepts several numerical specifications but `gnuplot` requires
all inputs to be double-precision floating-point variables, so "%lf" is
essentially the only permissible specifier.  The format string must contain at
least one such input specifier and no more than seven of them.
'scanf' expects to see white space -- a blank, tab ("\t"), newline ("\n"),
or formfeed ("\f") -- between numbers; anything else in the input stream must
be explicitly skipped.

Note that the use of "\t", "\n", or "\f" requires use of double-quotes
rather than single-quotes.


@noindent --- USING_EXAMPLES ---

@c ?commands plot datafile using examples
@c ?plot datafile using examples
@c ?datafile using examples
@c ?using examples
This creates a plot of the sum of the 2nd and 3rd data against the first:
The format string specifies comma- rather than space-separated columns.
The same result could be achieved by specifying `set datafile separator comma`.
@example
      plot 'file' using 1:($2+$3) '%lf,%lf,%lf'

@end example

In this example the data are read from the file "MyData" using a more
complicated format:
@example
      plot 'MyData' using "%*lf%lf%*20[^\n]%lf"

@end example

The meaning of this format is:

@example
      %*lf        ignore a number
      %lf         read a double-precision number (x by default)
      %*20[^\n]   ignore 20 non-newline characters
      %lf         read a double-precision number (y by default)

@end example

@cindex filter

@cindex NaN

One trick is to use the ternary `?:` operator to filter data:

@example
      plot 'file' using 1:($3>10 ? $2 : 1/0)

@end example

which plots the datum in column two against that in column one provided
the datum in column three exceeds ten.  `1/0` is undefined; `gnuplot`
quietly ignores undefined points, so unsuitable points are suppressed.
Or you can use the pre-defined variable NaN to achieve the same result.

In fact, you can use a constant expression for the column number, provided it
doesn't start with an opening parenthesis; constructs like `using
0+(complicated expression)` can be used.  The crucial point is that the
expression is evaluated once if it doesn't start with a left parenthesis, or
once for each data point read if it does.

If timeseries data are being used, the time can span multiple columns.  The
starting column should be specified.  Note that the spaces within the time
must be included when calculating starting columns for other data.  E.g., if
the first element on a line is a time with an embedded space, the y value
should be specified as column three.

It should be noted that (a) `plot 'file'`, (b) `plot 'file' using 1:2`, and
(c) `plot 'file' using ($1):($2)` can be subtly different.  See `missing`.

It is often possible to plot a file with lots of lines of garbage at
the top simply by specifying

@example
      plot 'file' using 1:2

@end example

However, if you want to leave text in your data files, it is safer to put the
comment character (#) in the first column of the text lines.


@noindent --- PSEUDOCOLUMNS ---

@cindex pseudocolumns

@c ?commands plot datafile using pseudocolumns
@c ?plot datafile using pseudocolumns
@c ?datafile using pseudocolumns
@c ?using pseudocolumns
Expressions in the `using` clause of a plot statement can refer to additional
bookkeeping values in addition to the actual data values contained in the input
file. These are contained in "pseudocolumns".
@example
      column(0)   The sequential order of each point within a data set.
                  The counter starts at 0, increments on each non-blank,
                  non-comment line, and is reset by two sequential blank
                  records. For data in non-uniform matrix format, column(0)
                  is the linear order of each matrix element.
                  The shorthand form $0 is available.
      column(-1)  This counter starts at 0, increments on a single blank line,
                  and is reset by two sequential blank lines.
                  This corresponds to the data line in array or grid data.
                  It can also be used to distinguish separate line segments
                  or polygons within a data set.
      column(-2)  Starts at 0 and increments on two sequential blank lines.
                  This is the index number of the current data set within a
                  file that contains multiple data sets.  See @ref{index}.
      column($#)  The special symbol $# evaluates to the total number of
                  columns available, so column($#) refers to the last
                  (rightmost) field in the current input line.
                  column($# - 1) would refer to the last-but-one column, etc.

@end example


@noindent --- ARRAYS ---

@c ?using arrays
@c ?plot using arrays
When the data source being plotted is an array or array-valued function,
the "columns" in a `using` specification are interpreted as below.
See @ref{arrays} for more detail.
@example
      column 1   the array index
      column 2   the real component of a numerical array entry
                 or the string value of a string array entry
      column 3   the imaginary part of a numerical array entry

@end example


@noindent --- KEY ---

@c ?using key
@c ?plot using key
The layout of certain plot styles (column-stacked histograms, spider plots)
is such that it would make no sense to generate plot titles from a data column
header. Also it would make no sense to generate axis tic labels from the
content of a data column (e.g. `using 2:3:xticlabels(1)`).  These plots styles
instead use the form `using 2:3:key(1)` to generate plot titles for the key
from the text content of a data column, usually a first column of row headers.
See the example given for @ref{spiderplot}.


@noindent --- XTICLABELS ---

@cindex xticlabels

@c ?using xticlabels
@c ?plot using xticlabels
Axis tick labels can be generated via a string function, usually taking a data
column as an argument. The simplest form uses the data column itself as a
string. That is,  xticlabels(N) is shorthand for xticlabels(stringcolumn(N)).
This example uses the contents of column 3 as x-axis tick labels.

@example
      plot 'datafile' using <xcol>:<ycol>:xticlabels(3) with <plotstyle>

@end example

Axis tick labels may be generated for any of the plot axes: x x2 y y2 z.
The `ticlabels(<labelcol>)` specifiers must come after all of the data
coordinate specifiers in the `using` portion of the command.
For each data point which has a valid set of X,Y[,Z] coordinates,
the string value given to xticlabels() is added to the list of xtic labels
at the same X coordinate as the point it belongs to. `xticlabels()`
may be shortened to `xtic()` and so on.

Example:

@example
      splot "data" using 2:4:6:xtic(1):ytic(3):ztic(6)

@end example

In this example the x and y axis tic labels are taken from different columns
than the x and y coordinate values. The z axis tics, however, are generated
from the z coordinate of the corresponding point.

Example:

@example
      plot "data" using 1:2:xtic( $3 > 10. ? "A" : "B" )

@end example

This example shows the use of a string-valued function to generate x-axis
tick labels. Each point in the data file generates a tick mark on x labeled
either "A" or "B" depending on the value in column 3.


@noindent --- X2TICLABELS ---

@c ?using x2ticlabels
@c ?plot using x2ticlabels
See `plot using xticlabels`.


@noindent --- YTICLABELS ---

@c ?using yticlabels
@c ?plot using yticlabels
See `plot using xticlabels`.


@noindent --- Y2TICLABELS ---

@c ?using y2ticlabels
@c ?plot using y2ticlabels
See `plot using xticlabels`.


@noindent --- ZTICLABELS ---

@c ?using zticlabels
@c ?plot using zticlabels
See `plot using xticlabels`.

@node volatile,  , using, data
@subsubsection volatile

@c ?datafile volatile
@c ?data volatile
@c ?plot datafile volatile
@c ?plot volatile
@cindex volatile

The @ref{volatile} keyword in a plot command indicates that the data previously
read from the input stream or file may not be available for re-reading.
This tells the program to use @ref{refresh} rather than @ref{replot} commands whenever
possible.  See @ref{refresh}.

@node functions, parametric, data, plot
@subsection functions

@c ?commands plot functions
@c ?plot functions
@cindex functions

Built-in or user-defined functions can be displayed by the `plot` and `splot`
commands in addition to, or instead of, data read from a file. The requested
function is evaluated by sampling at regular intervals spanning the independent
axis range[s]. See @ref{samples} and @ref{isosamples}.
Example:
@example
      approx(ang) = ang - ang**3 / (3*2)
      plot sin(x) title "sin(x)", approx(x) title "approximation"

@end example

To set a default plot style for functions, see `set style function`.
For information on built-in functions, see @ref{functions}.
For information on defining your own functions, see `user-defined`.

@node parametric, ranges, functions, plot
@subsection parametric

@c ?commands plot parametric
@c ?commands splot parametric
@c ?plot parametric
@c ?splot parametric
When in parametric mode (@ref{parametric}) mathematical expressions must be
given in pairs for `plot` and in triplets for `splot`.

Examples:
@example
      plot sin(t),t**2
      splot cos(u)*cos(v),cos(u)*sin(v),sin(u)

@end example

Data files are plotted as before, except any preceding parametric function
must be fully specified before a data file is given as a plot.  In other
words, the x parametric function (`sin(t)` above) and the y parametric
function (`t**2` above) must not be interrupted with any modifiers or data
functions; doing so will generate a syntax error stating that the parametric
function is not fully specified.

Other modifiers, such as `with` and @ref{title}, may be specified only after the
parametric function has been completed:

@example
      plot sin(t),t**2 title 'Parametric example' with linespoints

@end example

See also
@uref{http://www.gnuplot.info/demo/param.html,Parametric Mode Demos.
}

@node ranges, sampling, parametric, plot
@subsection ranges

@c ?commands plot ranges
@c ?commands splot ranges
@c ?plot ranges
@c ?splot ranges
@cindex ranges

This section describes only the optional axis ranges that may appear as the
very first items in a `plot` or `splot` command.  If present, these ranges
override any range limits established by a previous `set range` statement.
For optional ranges elsewhere in a `plot` command that limit sampling of an
individual plot component, see @ref{sampling}.

Syntax:
@example
      [@{<dummy-var>=@}@{@{<min>@}:@{<max>@}@}]
      [@{@{<min>@}:@{<max>@}@}]

@end example

The first form applies to the independent variable (@ref{xrange} or @ref{trange}, if
in parametric mode).  The second form applies to dependent variables.
<dummy-var> optionally establishes a new name for the independent variable.
(The default name may be changed with @ref{dummy}.)

In non-parametric mode, ranges must be given in the order
@example
      plot [<xrange>][<yrange>][<x2range>][<y2range>] ...

@end example

In parametric mode, ranges must be given in the order
@example
      plot [<trange>][<xrange>][<yrange>][<x2range>][<y2range>] ...
@end example

The following `plot` command shows setting @ref{trange} to [-pi:pi], @ref{xrange}
to [-1.3:1.3] and @ref{yrange} to [-1:1] for the duration of the graph:

@example
      plot [-pi:pi] [-1.3:1.3] [-1:1] sin(t),t**2

@end example

`*` can be used to allow autoscaling of either of min and max.
Use an empty range `[]` as a placeholder if necessary.

Ranges specified on the `plot` or `splot` command line affect only that one
graph; use the @ref{xrange}, @ref{yrange}, etc., commands to change the
default ranges for future graphs.

The use of on-the-fly range specifiers in a plot command may not yield
the expected result for linked axes (see @ref{link}).

For time data you must provide the range in quotes, using the same format
used to read time from the datafile.  See @ref{timefmt}.

Examples:

This uses the current ranges:
@example
      plot cos(x)

@end example

This sets the x range only:
@example
      plot [-10:30] sin(pi*x)/(pi*x)

@end example

This is the same, but uses t as the dummy-variable:
@example
      plot [t = -10 :30]  sin(pi*t)/(pi*t)

@end example

This sets both the x and y ranges:
@example
      plot [-pi:pi] [-3:3]  tan(x), 1/x

@end example

This sets only the y range:
@example
      plot [ ] [-2:sin(5)*-8] sin(x)**besj0(x)

@end example

This sets xmax and ymin only:
@example
      plot [:200] [-pi:]  $mydata using 1:2

@end example

This sets the x range for a timeseries:
@example
      set timefmt "%d/%m/%y %H:%M"
      plot ["1/6/93 12:00":"5/6/93 12:00"] 'timedata.dat'

@end example


@node sampling, for_loops_in_plot_command, ranges, plot
@subsection sampling

@cindex sampling

@c ?commands plot sample
@c ?plot sample
@c ?plot sampling
@cindex sample


@menu
* 1D_sampling_(x_or_t_axis)::
* 2D_sampling_(u_and_v_axes)::
@end menu

@node 1D_sampling_(x_or_t_axis), 2D_sampling_(u_and_v_axes), sampling, sampling
@subsubsection 1D sampling (x or t axis)

@c ?sampling 1D
@c ?plot sampling 1D
By default, computed functions are sampled over the entire range of the plot
as set by a prior @ref{xrange} command, by an x-axis range specifier at the
very start of the plot command, or by autoscaling the xrange to span data seen
in all the elements of this plot.  Points generated by the pseudo-file "+"
are sampled over the current range of the t axis, which may or may not be
the same as the range of the x axis.

Individual plot components can be assigned a more restricted sampling range.

Examples:

This establishes a total range on x running from 0 to 1000 and then plots
data from a file and two functions each spanning a portion of the total range:
@example
      set xrange [0:1000]
      plot 'datafile', [0:200] func1(x), [200:500] func2(x)

@end example

This is similar except that the total range is established by the contents
of the data file. In this case the sampled functions may or may not be
entirely contained in the plot:
@example
      set autoscale x
      plot 'datafile', [0:200] func1(x), [200:500] func2(x)

@end example

The plot command below is ambiguous. The initial range [0:10] will be
interpreted as applying to the entire plot, overriding the previous xrange
command, rather than applying solely to the sampling of the first function
as was probably the intent:
@example
      set xrange [0:50]
      plot [0:10] f(x), [10:20] g(x), [20:30] h(x)

@end example

To remove the ambiguity in the previous example, insert the keyword `sample`
to indicate that [0:10] is a sampling range applied to a single plot component
rather than a global x-axis range that would apply to the entire plot.
@example
      plot sample [0:10] f(x), [10:20] g(x), [20:30] h(x)

@end example

This example shows one way of tracing out a helix in a 3D plot
@example
      set xrange [-2:2]; set yrange [-2:2]
      splot sample [h=1:10] '+' using (cos(h)):(sin(h)):(h)

@end example


@node 2D_sampling_(u_and_v_axes),  , 1D_sampling_(x_or_t_axis), sampling
@subsubsection 2D sampling (u and v axes)

@c ?sampling 2D
@c ?plot sampling 2D
Computed functions or data generated for the pseudo-file '++' use samples
generated along the u and v axes.  See `special-filenames ++`.
2D sampling can be used in either `plot` or `splot` commands.

Example of 2D sampling in a 2D `plot` command.  These commands generated the
plot shown for plotstyle @ref{vectors}.  See @ref{vectors}.
@example
     set urange [ -2.0 : 2.0 ]
     set vrange [ -2.0 : 2.0 ]
     plot '++' using ($1):($2):($2*0.4):(-$1*0.4) with vectors

@end example

Example of 2D sampling in a 3D `splot` command. These commands are similar to
the ones used in `sampling.dem`. Note that the two surfaces are sampled over
u and v ranges smaller than the full x and y ranges of the resulting plot.
@example
     set title "3D sampling range distinct from plot x/y range"
     set xrange [1:100]
     set yrange [1:100]
     splot sample [u=30:70][v=0:50] '++' using 1:2:(u*v) lt 3, \
           [u=40:80][v=30:60] '++' using (u):(v):(u*sqrt(v)) lt 4

@end example

The range specifiers for sampling on u and v can include an explicit sampling
interval to control the number and spacing of samples:
@example
     splot sample [u=30:70:1][v=0:50:5] '++' using 1:2:(func($1,$2))

@end example


@node for_loops_in_plot_command, title, sampling, plot
@subsection for loops in plot command

@c ?commands plot for
@c ?commands splot for
@c ?plot for
@c ?splot for
@c ?for loops
@cindex iteration

If many similar files or functions are to be plotted together, it may be
convenient to do so by iterating over a shared plot command.

Syntax:
@example
      plot for [<variable> = <start> : <end> @{:<increment>@}]
      plot for [<variable> in "string of words"]

@end example

The scope of an iteration ends at the next comma or the end of the command,
whichever comes first.  An exception to this is that definitions are grouped
with the following plot item even if there is an intervening comma.
Note that iteration does not work for plots in parametric mode.

Example:
@example
      plot for [j=1:3] sin(j*x)

@end example

Example:
@example
      plot for [dataset in "apples bananas"] dataset."dat" title dataset

@end example

In this example iteration is used both to generate a file name and a
corresponding title.

Example:
@example
      file(n) = sprintf("dataset_%d.dat",n)
      splot for [i=1:10] file(i) title sprintf("dataset %d",i)

@end example

This example defines a string-valued function that generates file names,
and plots ten such files together. The iteration variable ('i' in this
example) is treated as an integer, and may be used more than once.

Example:
@example
      set key left
      plot for [n=1:4] x**n sprintf("%d",n)

@end example

This example plots a family of functions.

Example:
@example
      list = "apple banana cabbage daikon eggplant"
      item(n) = word(list,n)
      plot for [i=1:words(list)] item[i].".dat" title item(i)
      list = "new stuff"
      replot

@end example

This example steps through a list and plots once per item.
Because the items are retrieved dynamically, you can change the list
and then replot.

Example:
@example
      list = "apple banana cabbage daikon eggplant"
      plot for [i in list] i.".dat" title i
      list = "new stuff"
      replot

@end example

This example does exactly the same thing as the previous example, but uses
the string iterator form of the command rather than an integer iterator.

If an iteration is to continue until all available data is consumed, use the
symbol * instead of an integer <end>.  This can be used to process all columns
in a line,  all datasets (separated by 2 blank lines) in a file,  or all files
matching a template.

Examples:
@example
      plot for [file in "A.dat B.dat"] for [column=2:*] file using 1:column
      splot for [i=0:*] 'datafile' index i using 1:2:3 with lines
      plot for [i=1:*] file=sprintf("File_%03d.dat",i) file using 2 title file

@end example

Caveat:
You can nest iterations where one is open-ended, as in the first example above.
However nesting an open-ended iteration inside another open-ended iteration is
probably not useful, since both will terminate at the same time when no data is
found.  The program will issue a warning if this happens.


@node title, with, for_loops_in_plot_command, plot
@subsection title

@c ?commands plot title
@c ?commands splot title
@c ?plot title
@c ?splot title
@cindex columnheader

By default each plot is listed in the key by the corresponding function or file
name. You can give an explicit plot title instead using the @ref{title} option.

Syntax:
@example
      title <text> | notitle [<ignored text>]
      title columnheader | title columnheader(N)
            @{at @{beginning|end@}@} @{@{no@}enhanced@}

@end example

where <text> is a quoted string or an expression that evaluates to a string.
The quotes will not be shown in the key.

There is also an option that will interpret the first entry in a column of
input data (i.e. the column header) as a text field, and use it as the key
title.  See `datastrings`.  This can be made the default by specifying
`set key autotitle columnhead`.

The line title and sample can be omitted from the key by using the keyword
`notitle`.  A null title (`title ''`) is equivalent to `notitle`.  If only
the sample is wanted, use one or more blanks (`title ' '`).  If `notitle`
is followed by a string this string is ignored.

If `key autotitles` is set (which is the default) and neither @ref{title} nor
`notitle` are specified the line title is the function name or the file name as
it appears on the `plot` command.  If it is a file name, any datafile modifiers
specified will be included in the default title.

The layout of the key itself (position, title justification, etc.) can be
controlled using `set key`.

The `at` keyword allows you to place the plot title somewhere outside the
auto-generated key box. The title can be placed immediately before or after the
line in the graph itself by using `at @{beginning|end@}`.  This option may be
useful when plotting `with lines` but makes little sense for most other styles.

To place the plot title at an arbitrary location on the page, use the form
`at <x-position>,<y-position>`.  By default the position is interpreted in
screen coordinates; e.g. `at 0.5, 0.5` is always the middle of the screen
regardless of plot axis scales or borders.  The format of titles placed in
this way is still affected by key options.  See `set key`.

Examples:

This plots y=x with the title 'x':
@example
      plot x

@end example

This plots x squared with title "x^2" and file "data.1" with title
"measured data":
@example
      plot x**2 title "x^2", 'data.1' t "measured data"

@end example

Plot multiple columns of data, each of which contains its own title on the
first line of the file.  Place the titles after the corresponding lines rather
than in a separate key:
@example
      unset key
      set offset 0, graph 0.1
      plot for [i=1:4] 'data' using i with lines title columnhead at end

@end example

Create a single key area for two separate plots:
@example
      set key Left reverse
      set multiplot layout 2,2
      plot sin(x) with points pt 6 title "Left plot is sin(x)" at 0.5, 0.30
      plot cos(x) with points pt 7 title "Right plot is cos(x)" at 0.5, 0.27
      unset multiplot

@end example


@node with,  , title, plot
@subsection with

@c ?commands plot with
@c ?commands splot with
@c ?commands plot style
@c ?commands splot style
@c ?plot with
@c ?plot style
@c ?splot with
@c ?splot style
@cindex style
@opindex style


@cindex with

Functions and data may be displayed in one of a large number of styles.
The `with` keyword provides the means of selection.

Syntax:
@example
      with <style> @{ @{linestyle | ls <line_style>@}
                     | @{@{linetype  | lt <line_type>@}
                        @{linewidth | lw <line_width>@}
                        @{linecolor | lc <colorspec>@}
                        @{pointtype | pt <point_type>@}
                        @{pointsize | ps <point_size>@}
                        @{arrowstyle | as <arrowstyle_index>@}
                        @{fill | fs <fillstyle>@} @{fillcolor | fc <colorspec>@}
                        @{nohidden3d@} @{nocontours@} @{nosurface@}
                        @{palette@}@}
                   @}

@end example


where <style> is one of
@example
     lines        dots       steps     vectors      yerrorlines
     points       impulses   fsteps    xerrorbar    xyerrorbars
     linespoints  labels     histeps   xerrorlines  xyerrorlines
     financebars  surface    arrows    yerrorbar    parallelaxes
@end example

or
@example
     boxes         boxplot        ellipses       histograms  rgbalpha
     boxerrorbars  candlesticks   filledcurves   image       rgbimage
     boxxyerror    circles        fillsteps      pm3d        polygons
     isosurface    zerrorfill
@end example

or
@example
     table         mask

@end example

The first group of styles have associated line, point, and text properties.
The second group of styles also have fill properties.  See `fillstyle`.  Some
styles have further sub-styles.  See `plotting styles` for details of each.
Two special styles produce no immediate plot.  See @ref{table} and `with mask`.
The @ref{table} style produces tabular output to a text file or data block.
A plot component whose style is `with mask` defines a set of polygonal regions
that can be used to mask subsequent plot elements.

A default style may be chosen by `set style function` and `set style data`.

By default, each function and data file will use a different line type and
point type, up to the maximum number of available types.  All terminal
drivers support at least six different point types, and re-use them, in
order, if more are required.  To see the complete set of line and point
types available for the current terminal, type `test`.

If you wish to choose the line or point type for a single plot, <line_type>
and <point_type> may be specified.  These are positive integer constants (or
expressions) that specify the line type and point type to be used for the
plot.  Use `test` to display the types available for your terminal.

You may also scale the line width and point size for a plot by using
<line_width> and <point_size>, which are specified relative to the default
values for each terminal.  The pointsize may also be altered
globally---see @ref{pointsize} for details.  But note that both <point_size>
as set here and as set by @ref{pointsize} multiply the default point
size; their effects are  not cumulative.  That is,
`set pointsize 2; plot x with points ps 3` will use points three times the
default size, not six.

It is also possible to specify `pointsize variable` either as part of a
line style or for an individual plot. In this case one extra column of input
is required, i.e. 3 columns for a 2D plot and 4 columns for a 3D splot. The
size of each individual point is determined by multiplying the global
pointsize by the value read from the data file.

If you have defined specific line type/width and point type/size combinations
with `set style line`, one of these may be selected by setting <line_style> to
the index of the desired style.

Both 2D and 3D plots (`plot` and `splot` commands) can use colors from a
smooth palette set previously with the command @ref{palette}. The color value
corresponds to the z-value of the point itself or to a separate color
coordinate provided in an optional additional `using` column.
Color values may be treated either as a fraction of the palette range
(`palette frac`) or as a coordinate value mapped onto the colorbox range
(@ref{palette} or `palette z`).  See @ref{colorspec}, @ref{palette}, `linetypes`.

The keyword `nohidden3d` applies only to plots made with the `splot` command.
Normally the global option @ref{hidden3d} applies to all plots in the graph.
You can attach the `nohidden3d` option to any individual plots that you want
to exclude from the hidden3d processing.  The individual elements other than
surfaces (i.e. lines, dots, labels, ...) of a plot marked `nohidden3d` will all
be drawn, even if they would normally be obscured by other plot elements.

Similarly, the keyword `nocontours` will turn off contouring for an individual
plot even if the global property `set contour` is active.

Similarly, the keyword `nosurface` will turn off the 3D surface for an
individual plot even if the global property `set surface` is active.

The keywords may be abbreviated as indicated.

Note that the `linewidth`, @ref{pointsize} and @ref{palette} options are not supported
by all terminals.

Examples:

This plots sin(x) with impulses:
@example
      plot sin(x) with impulses

@end example

This plots x with points, x**2 with the default:
@example
      plot x w points, x**2

@end example

This plots tan(x) with the default function style, file "data.1" with lines:
@example
      plot tan(x), 'data.1' with l

@end example

This plots "leastsq.dat" with impulses:
@example
      plot 'leastsq.dat' w i

@end example

This plots the data file "population" with boxes:
@example
      plot 'population' with boxes

@end example

This plots "exper.dat" with errorbars and lines connecting the points
(errorbars require three or four columns):
@example
      plot 'exper.dat' w lines, 'exper.dat' notitle w errorbars

@end example

Another way to plot "exper.dat" with errorlines (errorbars require three
or four columns):
@example
      plot 'exper.dat' w errorlines

@end example

This plots sin(x) and cos(x) with linespoints, using the same line type but
different point types:
@example
      plot sin(x) with linesp lt 1 pt 3, cos(x) with linesp lt 1 pt 4

@end example

This plots file "data" with points of type 3 and twice usual size:
@example
      plot 'data' with points pointtype 3 pointsize 2

@end example

This plots file "data" with variable pointsize read from column 4
@example
      plot 'data' using 1:2:4 with points pt 5 pointsize variable

@end example

This plots two data sets with lines differing only by weight:
@example
      plot 'd1' t "good" w l lt 2 lw 3, 'd2' t "bad" w l lt 2 lw 1

@end example

This plots filled curve of x*x and a color stripe:
@example
      plot x*x with filledcurve closed, 40 with filledcurve y=10

@end example

This plots x*x and a color box:
@example
      plot x*x, (x>=-5 && x<=5 ? 40 : 1/0) with filledcurve y=10 lt 8

@end example

This plots a surface with color lines:
@example
      splot x*x-y*y with line palette

@end example

This plots two color surfaces at different altitudes:
@example
      splot x*x-y*y with pm3d, x*x+y*y with pm3d at t

@end example


@node print, printerr, plot, Commands
@section print

@c ?commands print
@cindex print
@cmindex print


Syntax:
@example
      print <expression> @{, <expression>, ...@}

@end example

The `print` command prints the value of one or more expressions.
Output is to the screen unless it has been redirected using the
`set print` command.  See `expressions`.  See also @ref{printerr}.

An <expression> may be any valid gnuplot expression, including numeric
or string constants, a function returning a number or string, an array,
or the name of a variable.  It is also possible to print a datablock.
The sprintf and gprintf functions can be used in conjunction with `print`
for additional flexibility in formatting the output.

You can use iteration within a print command to include multiple values
on a single line of output.

Examples:
@example
     print 123 + 456
     print sinh(pi/2)
     print "rms of residuals (FIT_STDFIT) is ", FIT_STDFIT
     print sprintf("rms of residuals is %.3f after fit", FIT_STDFIT)
     print "Array A: ", A
     print "Individual elements of array A: ", for [i=1:|A|] A[i]
     print $DATA

@end example


@node printerr, pwd, print, Commands
@section printerr

@c ?commands printerr
@cindex printerr
@cmindex printerr


@ref{printerr} is the same as `print` except that output is always sent to stderr
even while redirection from a prior `set print` command remains in effect.
Use the `warn` command instead if you want the output to include the current
filename (or function block name) and line number.

@node pwd, quit, printerr, Commands
@section pwd

@c ?commands pwd
@cindex pwd
@cmindex pwd


The @ref{pwd} command prints the name of the working directory to the screen.

Note that if you wish to store the current directory into a string variable
or use it in string expressions, then you can use variable GPVAL_PWD, see
`show variables all`.

@node quit, raise, pwd, Commands
@section quit

@c ?commands quit
@cindex quit
@cmindex quit


@ref{quit} is a synonym for the @ref{exit} command. See @ref{exit}.

@node raise, refresh, quit, Commands
@section raise

@c ?commands raise
@c ?commands lower
@cindex raise
@cmindex raise


@cindex lower
@cmindex lower


Syntax:
@example
      raise @{plot_window_id@}
      lower @{plot_window_id@}

@end example

The @ref{raise} and @ref{lower} commands function for only a few terminal types and
may depend also on your window manager and display preference settings.
@example
      set term wxt 123     # create first plot window
      plot $FOO
      lower                # lower the only plot window that exists so far
      set term wxt 456     # create 2nd plot window may occlude the first one
      plot $BAZ
      raise 123            # raise first plot window
@end example

These commands are known to be unreliable.

@node refresh, remultiplot, raise, Commands
@section refresh

@c ?commands refresh
@cindex refresh
@cmindex refresh


The @ref{refresh} command is similar to @ref{replot}, with two major differences.
@ref{refresh} reformats and redraws the current plot using the data already read
in. This means that you can use @ref{refresh} for plots with inline data
(pseudo-device '-') and for plots from datafiles whose contents are volatile.
You cannot use the @ref{refresh} command to add new data to an existing plot.

Mousing operations, in particular zoom and unzoom, will use @ref{refresh} rather
than @ref{replot} if appropriate.  Example:

@example
      plot 'datafile' volatile with lines, '-' with labels
      100 200 "Special point"
      e
      # Various mousing operations go here
      set title "Zoomed in view"
      set term post
      set output 'zoom.ps'
      refresh

@end example


@node remultiplot, replot, refresh, Commands
@section remultiplot

@c ?commands remultiplot
@cindex remultiplot
@cmindex remultiplot


@ref{remultiplot} replays a sequence of commands that were previously stored into
the datablock named $GPVAL_LAST_MULTIPLOT during generation of the previous
multiplot.  See `new multiplots`.

EXPERIMENTAL: @ref{remultiplot} is invoked implicitly from @ref{replot} if the
immediately preceding plot command was part of a completed multiplot.
@ref{remultiplot} is also invoked by hot keys and  mouse operations pan/zoom etc.
while a multiplot is displayed.


@node replot, reread, remultiplot, Commands
@section replot

@c ?commands replot
@cindex replot
@cmindex replot


The @ref{replot} command without arguments repeats the last `plot` or `splot`
command.  This can be useful for viewing a plot with different `set` options,
or when generating the same plot for several devices.

Arguments specified after a @ref{replot} command will be added onto the last
`plot` or `splot` command (with an implied ',' separator) before it is
repeated.  @ref{replot} accepts the same arguments as the `plot` and `splot`
commands except that ranges cannot be specified.  Thus you can use @ref{replot}
to plot a function against the second axes if the previous command was `plot`
but not if it was `splot`.

Note:

@example
      plot '-' ; ... ; replot

@end example

is not recommended, because it will require that you type in the data all
over again.  In most cases you can use the @ref{refresh} command instead, which
will redraw the plot using the data previously read in.

See also `command-line-editing` for ways to edit the last `plot` (`splot`)
command.

See also `show plot` to show the whole current plotting command, and the
possibility to copy it into the @ref{history}.

In previous gnuplot versions, a complete multiplot could not be redrawn.
The @ref{replot} command reproduced only the final component plot of the full set.
In gnuplot version 6 the commands used to generate a multiplot are stored into
a datablock $GPVAL_LAST_MULTIPLOT.  They can be replayed to regenerate the
entire multiplot using the new command @ref{remultiplot}.

EXPERIMENTAL (details may change in a subsequent gnuplot version):
If the previously drawn plot was part of a multiplot, the @ref{replot} command
is now automatically treated as @ref{remultiplot}.  Several caveats apply.
See `new multiplots`, @ref{remultiplot}.


@node reread, reset, replot, Commands
@section reread

@c ?commands reread
@cindex reread
@cmindex reread


[DEPRECATED in version 5.4]

This command is deprecated in favor of explicit iteration.
See `iterate`.
The @ref{reread} command causes execution from the current `gnuplot` input file,
as specified by a `load` command, to immediately restart from the beginning
of the file.  This essentially implements an endless loop of commands from the
beginning of the file to the @ref{reread} command.
@ref{reread} has no effect when reading commands from stdin.

@node reset, return, reread, Commands
@section reset

@c ?commands reset
@cindex reset
@cmindex reset


@example
     reset @{bind | errors | session@}

@end example

The @ref{reset} command causes all graph-related options that can be set with the
`set` command to return to their default values.  This command can be used to
restore the default settings after executing a loaded command file, or to
return to a defined state after lots of settings have been changed.

The following are _not_ affected by @ref{reset}:
@example
     `set term` @ref{output} @ref{loadpath} `set linetype` @ref{fit}
     @ref{encoding} @ref{decimalsign} @ref{locale} @ref{psdir}
     @ref{overflow} @ref{multiplot}

@end example

Note that @ref{reset} does not necessarily return settings to the state they
were in at program entry, because the default values may have been altered by
commands in the initialization files gnuplotrc, $HOME/.gnuplot, or
$XDG_CONFIG_HOME/gnuplot/gnuplotrc.  However, these commands can be
re-executed by using the variant command `reset session`.

@c ?reset session
@cindex session

`reset session` deletes any user-defined variables and functions, restores
default settings, and then re-executes the system-wide gnuplotrc initialization
file and any private $HOME/.gnuplot or $XDG_CONFIG_HOME/gnuplot/gnuplotrc
preferences file.  See `initialization`.

@c ?reset errors
@cindex error state

`reset errors` clears only the error state variables GPVAL_ERRNO and
GPVAL_ERRMSG.

@c ?reset bind
@cindex bind
@opindex bind


`reset bind` restores all hotkey bindings to their default state.

@node return, save, reset, Commands
@section return

@c ?commands return
@cindex return
@cmindex return


Syntax:
@example
     return <expression>

@end example

The @ref{return} command acts the same way as the @ref{exit} and @ref{quit} commands in
that it terminates execution of the current code block or input stream.
The return value is meaningful only in the context of executing code in a
function block.  See `function blocks`.

Example:
@example
     function $myfun << EOF
     local result = 0
     if (error-condition) @{ return -1 @}
     ... body of function ...
     return result
     EOF

@end example

@node save, set-show, return, Commands
@section save

@c ?commands save
@c ?save set
@cindex save
@cmindex save


@c ?save fit
Syntax:
@example
      save  @{functions | variables | terminal | set | fit | datablocks@}
            '<filename>' @{append@}

@end example

If no option is specified, `gnuplot` saves functions, user variables,
`set` options and the most recent `plot` or `splot` command.
The current status of `set term` and @ref{output} is written as a comment.

Saved files are written in text format and may be read by the
`load` command.

@ref{terminal} will write out just the @ref{terminal} status, without
the comment marker in front of it. This is mainly useful for
switching the @ref{terminal} setting for a short while, and getting back
to the previously set terminal, afterwards, by loading the saved
@ref{terminal} status. Note that for a single gnuplot session you may
rather use the other method of saving and restoring current terminal
by the commands `set term push` and `set term pop`, see `set term`.

`save variables` writes all user variables but not datablocks and
not internal variables GPVAL_* GPFUN_* MOUSE_* ARG*.

@ref{fit} saves only the variables used in the most recent @ref{fit} command.
The saved file may be used as a parameter file to initialize future fit
commands using the `via` keyword.

The filename must be enclosed in quotes.

The special filename "-" may be used to @ref{save} commands to standard output.
On systems which support a popen function (Unix), the output of save can be
piped through an external program by starting the file name with a '|'.
This provides a consistent interface to `gnuplot`'s internal settings to
programs which communicate with `gnuplot` through a pipe.  Please see
help for `batch/interactive` for more details.

Examples:
@example
      save 'work.gnu'
      save functions 'func.dat'
      save var 'state.dat'; save datablocks 'state.dat' append
      save set 'options.dat'
      save term 'myterm.gnu'
      save '-'
      save '|grep title >t.gp'

@end example

@node set-show, shell, save, Commands
@section set-show

@c ?commands set
@c ?commands show
@cindex set

@cindex show
@cmindex show


@c ?show all
The `set` command can be used to set _lots_ of options.  No new graph is
drawn, however, until a `plot`, `splot`, or @ref{replot} command is given.

For most options the corresponding `show` command reports the current setting.
A few `show` commands like @ref{palette} and @ref{colornames} are documented
separately.

Options changed using `set` can be returned to the default state by giving the
corresponding @ref{unset} command.  See also the @ref{reset} command, which returns
all settable parameters to default values.

@cindex iteration

The `set` and @ref{unset} commands may optionally contain an iteration clause.
See `plot for`.


@menu
* angles::
* arrow::
* autoscale::
* bind_::
* bmargin::
* border::
* boxwidth::
* boxdepth::
* chi_shapes::
* color::
* colormap::
* colorsequence::
* clabel::
* clip::
* cntrlabel::
* cntrparam::
* color_box::
* colornames::
* contour::
* cornerpoles::
* contourfill_::
* dashtype_::
* datafile::
* decimalsign::
* dgrid3d::
* dummy::
* encoding::
* errorbars::
* fit_::
* fontpath::
* format__::
* grid::
* hidden3d::
* history_::
* isosamples::
* isosurface_::
* isotropic::
* jitter::
* key_::
* label::
* linetype::
* link::
* lmargin::
* loadpath::
* locale::
* logscale::
* macros::
* mapping::
* margin::
* micro::
* minussign::
* monochrome::
* mouse::
* mttics::
* multiplot::
* mx2tics::
* mxtics::
* my2tics::
* mytics::
* mztics::
* nonlinear::
* object::
* offsets::
* origin::
* output::
* overflow::
* palette__::
* parametric_::
* paxis::
* pixmap::
* pm3d::
* pointintervalbox::
* pointsize::
* polar::
* print_::
* psdir::
* raxis::
* rgbmax::
* rlabel::
* rmargin::
* rrange::
* rtics::
* samples::
* size::
* spiderplot_::
* style::
* surface_::
* table::
* terminal::
* termoption::
* theta::
* tics::
* ticslevel::
* ticscale::
* timestamp::
* timefmt::
* title_::
* tmargin::
* trange::
* ttics::
* urange::
* version::
* vgrid::
* view::
* vrange::
* vxrange::
* vyrange::
* vzrange::
* walls::
* watchpoints::
* x2data::
* x2dtics::
* x2label::
* x2mtics::
* x2range::
* x2tics::
* x2zeroaxis::
* xdata::
* xdtics::
* xlabel::
* xmtics::
* xrange::
* xtics::
* xyplane::
* xzeroaxis::
* y2data::
* y2dtics::
* y2label::
* y2mtics::
* y2range::
* y2tics::
* y2zeroaxis::
* ydata::
* ydtics::
* ylabel::
* ymtics::
* yrange::
* ytics::
* yzeroaxis::
* zdata::
* zdtics::
* zzeroaxis::
* cbdata::
* cbdtics::
* zero::
* zeroaxis::
* zlabel::
* zmtics::
* zrange::
* ztics::
* cblabel::
* cbmtics::
* cbrange::
* cbtics::
@end menu

@node angles, arrow, set-show, set-show
@subsection angles

@c ?commands set angles
@c ?commands show angles
@c ?set angles
@c ?show angles
@cindex angles
@opindex angles


@c ?commands set angles degrees
@c ?set angles degrees
@c ?angles degrees
@cindex degrees

By default, `gnuplot` assumes the independent variable in polar graphs is in
units of radians.  If `set angles degrees` is specified before `set polar`,
then the default range is [0:360] and the independent variable has units of
degrees.  This is particularly useful for plots of data files.  The angle
setting also applies to 3D mapping as set via the @ref{mapping} command.

Syntax:
@example
      set angles @{degrees | radians@}
      show angles

@end example

The angle specified in `set grid polar` is also read and displayed in the
units specified by @ref{angles}.

@ref{angles} also affects the arguments of the machine-defined functions
sin(x), cos(x) and tan(x), and the outputs of asin(x), acos(x), atan(x),
atan2(x), and arg(x).  It has no effect on the arguments of hyperbolic
functions or Bessel functions.  However, the output arguments of inverse
hyperbolic functions of complex arguments are affected; if these functions
are used, `set angles radians` must be in effect to maintain consistency
between input and output arguments.

@example
      x=@{1.0,0.1@}
      set angles radians
      y=sinh(x)
      print y         #prints @{1.16933, 0.154051@}
      print asinh(y)  #prints @{1.0, 0.1@}
@end example

but
@example
      set angles degrees
      y=sinh(x)
      print y         #prints @{1.16933, 0.154051@}
      print asinh(y)  #prints @{57.29578, 5.729578@}
@end example

See also
@uref{http://www.gnuplot.info/demo/poldat.html,poldat.dem: polar plot using angles demo.
}

@node arrow, autoscale, angles, set-show
@subsection arrow

@c ?commands set arrow
@c ?commands unset arrow
@c ?commands show arrow
@c ?set arrow
@c ?unset arrow
@c ?show arrow
@cindex arrow
@opindex arrow


@cindex noarrow

Arbitrary arrows can be placed on a plot using the `set arrow` command.

Syntax:
@example
      set arrow @{<tag>@} from <position> to <position>
      set arrow @{<tag>@} from <position> rto <position>
      set arrow @{<tag>@} from <position> length <coord> angle <ang>
      set arrow <tag> arrowstyle | as <arrow_style>
      set arrow <tag> @{nohead | head | backhead | heads@}
                      @{size <headlength>,<headangle>@{,<backangle>@}@} @{fixed@}
                      @{filled | empty | nofilled | noborder@}
                      @{front | back@}
                      @{linestyle | ls <line_style>@}
                      @{linetype | lt <line_type>@}
                      @{linewidth | lw <line_width>@}
                      @{linecolor | lc <colorspec>@}
                      @{dashtype | dt <dashtype>@}

@end example

@example
      unset arrow @{<tag>@}
      show arrow @{<tag>@}

@end example

<tag> is an integer that identifies the arrow.  If no tag is given, the
lowest unused tag value is assigned automatically.  The tag can be used to
delete or change a specific arrow.  To change any attribute of an existing
arrow, use `set arrow` with the appropriate tag and specify the attributes
to be changed.

The position of the first end point of the arrow is always specified by "from".
The other end point can be specified using any of three different mechanisms.
The <position>s are specified by either x,y or x,y,z, and may be preceded by
`first`, `second`, `graph`, `screen`, or `character` to select the coordinate
system.  Unspecified coordinates default to 0. See `coordinates` for details.
A coordinate system specifier does not carry over from the first endpoint
description the second.

1) "to <position>" specifies the absolute coordinates of the other end.

2) "rto <position>" specifies an offset to the "from" position.  For linear
axes, `graph` and `screen` coordinates, the distance between the start and the
end point corresponds to the given relative coordinate.  For logarithmic axes,
the relative given coordinate corresponds to the factor of the coordinate
between start and end point.  Thus, a negative relative value or zero are
not allowed for logarithmic axes.

3) "length <coordinate> angle <angle>" specifies the orientation of the arrow
in the plane of the graph.  Again any of the coordinate systems can
be used to specify the length.  The angle is always in degrees.

Other characteristics of the arrow can either be specified as a pre-defined
arrow style or by providing them in `set arrow` command.  For a detailed
explanation of arrow characteristics, see `arrowstyle`.

Examples:

To set an arrow pointing from the origin to (1,2) with user-defined linestyle 5,
use:
@example
      set arrow to 1,2 ls 5

@end example

To set an arrow from bottom left of plotting area to (-5,5,3), and tag the
arrow number 3, use:
@example
      set arrow 3 from graph 0,0 to -5,5,3

@end example

To change the preceding arrow to end at 1,1,1, without an arrow head and
double its width, use:
@example
      set arrow 3 to 1,1,1 nohead lw 2

@end example

To draw a vertical line from the bottom to the top of the graph at x=3, use:
@example
      set arrow from 3, graph 0 to 3, graph 1 nohead

@end example

To draw a vertical arrow with T-shape ends, use:
@example
      set arrow 3 from 0,-5 to 0,5 heads size screen 0.1,90

@end example

To draw an arrow relatively to the start point, where the relative distances
are given in graph coordinates, use:
@example
      set arrow from 0,-5 rto graph 0.1,0.1

@end example

To draw an arrow with relative end point in logarithmic x axis, use:
@example
      set logscale x
      set arrow from 100,-5 rto 10,10
@end example

This draws an arrow from 100,-5 to 1000,5. For the logarithmic x axis, the
relative coordinate 10 means "factor 10" while for the linear y axis, the
relative coordinate 10 means "difference 10".

To delete arrow number 2, use:
@example
      unset arrow 2

@end example

To delete all arrows, use:
@example
      unset arrow

@end example

To show all arrows (in tag order), use:
@example
      show arrow

@end example

@uref{http://www.gnuplot.info/demo/arrowstyle.html,arrows demos.
}


@node autoscale, bind_, arrow, set-show
@subsection autoscale

@c ?commands set autoscale
@c ?commands unset autoscale
@c ?commands show autoscale
@c ?set autoscale
@c ?unset autoscale
@c ?show autoscale
@cindex autoscale
@opindex autoscale


@cindex noautoscale

Autoscaling may be set individually on the x, y or z axis or globally on all
axes. The default is to autoscale all axes.  If you want to autoscale based on
a subset of the plots in the figure, you can mark the ones to be omitted with
the flag `noautoscale` in the plot command.  See @ref{datafile}.

Syntax:
@example
      set autoscale @{<axis>@{|min|max|fixmin|fixmax|fix@} | fix | keepfix@}
      set autoscale noextend
      unset autoscale @{<axis>@}
      show autoscale

@end example

where <axis> is `x`, `y`, `z`, `cb`, `x2`, `y2`, `xy`, or `paxis <p>`.
Appending `min` or `max` to the axis name tells `gnuplot` to autoscale only
the minimum or maximum of that axis.

If no axis name is given, all axes are autoscaled.

Autoscaling the independent axes (x for `plot` and x,y for `splot`) adjusts
the axis range to match the data being plotted.  If the plot contains only
functions (no input data), autoscaling these axes has no effect.

Autoscaling the dependent axis (y for a `plot` and z for `splot`) adjusts the
axis range to match the data or function being plotted.

Adjustment of the axis range includes extending it to the next tic mark;
i.e. unless the extreme data coordinate exactly matches a tic mark, there
will be some blank space between the data and the plot border.
Addition of this extra space can be suppressed by @ref{noextend}.
It can be further increased by the command `set offset`.
Please see @ref{xrange} and @ref{offsets} for additional information.

The behavior of autoscaling remains consistent in parametric mode, (see
@ref{parametric}).  However, there are more dependent variables and hence more
control over x, y, and z axis scales.  In parametric mode, the independent or
dummy variable is t for `plot`s and u,v for `splot`s.  @ref{autoscale} in
parametric mode, then, controls all ranges (t, u, v, x, y, and z) and allows
x, y, and z to be fully autoscaled.

When tics are displayed on second axes but no plot has been specified for
those axes, x2range and y2range are inherited from xrange and yrange.  This
is done _before_ applying offsets or autoextending the ranges to a whole
number of tics, which can cause unexpected results.  To prevent this you can
explicitly link the secondary axis range to the primary axis range.
See @ref{link}.

@menu
* noextend::
* examples::
* polar_mode::
@end menu

@node noextend, examples, autoscale, autoscale
@subsubsection noextend

@c ?set autoscale noextend
@c ?set autoscale keepfix
@c ?set autoscale fix
@c ?autoscale noextend
@cindex noextend

@cindex keepfix

@cindex fix

@example
     set autoscale noextend

@end example

By default autoscaling sets the axis range limits to the nearest tic label
position that includes all the plot data. Keywords `fixmin`, `fixmax`, `fix`
or @ref{noextend} tell gnuplot to disable extension of the axis range to the next
tic mark position. In this case the axis range limit exactly matches the
coordinate of the most extreme data point.  @ref{noextend} is a
synonym for `set autoscale fix`.  Range extension for a single axis can be
disabled by appending the @ref{noextend} keyword to the corresponding range
command, e.g.
@example
     set yrange [0:*] noextend

@end example

`set autoscale keepfix` autoscales all axes while leaving the fix settings
unchanged.


@node examples, polar_mode, noextend, autoscale
@subsubsection examples

@c ?autoscale examples
@c ?set autoscale examples
Examples:

This sets autoscaling of the y axis (other axes are not affected):
@example
      set autoscale y

@end example

This sets autoscaling only for the minimum of the y axis (the maximum of the
y axis and the other axes are not affected):
@example
      set autoscale ymin

@end example

This disables extension of the x2 axis tics to the next tic mark,
thus keeping the exact range as found in the plotted data and functions:
@example
      set autoscale x2fixmin
      set autoscale x2fixmax

@end example

This sets autoscaling of the x and y axes:
@example
      set autoscale xy

@end example

This sets autoscaling of the x, y, z, x2 and y2 axes:
@example
      set autoscale

@end example

This disables autoscaling of the x, y, z, x2 and y2 axes:
@example
      unset autoscale

@end example

This disables autoscaling of the z axis only:
@example
      unset autoscale z

@end example

@node polar_mode,  , examples, autoscale
@subsubsection polar mode

@c ?commands set autoscale polar
@c ?set autoscale polar
When in polar mode (`set polar`), the xrange and the yrange may be left
in autoscale mode.  If @ref{rrange} is used to limit the extent of the polar
axis, then xrange and yrange will adjust to match this automatically.
However, explicit xrange and yrange commands can later be used to make
further adjustments.  See @ref{rrange}.

See also
@uref{http://www.gnuplot.info/demo/poldat.html,polar demos.
}

@node bind_, bmargin, autoscale, set-show
@subsection bind

@c ?commands show bind
@c ?show bind
@cindex bind
@opindex bind


`show bind` shows the current state of all hotkey bindings. See `bind`.

@node bmargin, border, bind_, set-show
@subsection bmargin

@c ?commands set bmargin
@c ?set bmargin
@cindex bmargin
@opindex bmargin


The command @ref{bmargin} sets the size of the bottom margin.
Please see @ref{margin} for details.

@node border, boxwidth, bmargin, set-show
@subsection border

@c ?commands set border
@c ?commands unset border
@c ?commands show border
@c ?set border
@c ?set border polar
@c ?unset border
@c ?show border
@cindex border
@opindex border


@cindex noborder

The @ref{border} and @ref{border} commands control the display of the graph
borders for the `plot` and `splot` commands.  Note that the borders do not
necessarily coincide with the axes; with `plot` they often do, but with
`splot` they usually do not.

Syntax:
@example
      set border @{<integer>@}
                 @{front | back | behind@}
                 @{linestyle | ls <line_style>@}
                 @{linetype | lt <line_type>@} @{linewidth | lw <line_width>@}
                 @{linecolor | lc <colorspec>@} @{dashtype | dt <dashtype>@}
                 @{polar@}
      unset border
      show border

@end example

With a `splot` displayed in an arbitrary orientation, like `set view 56,103`,
the four corners of the x-y plane can be referred to as "front", "back",
"left" and "right".  A similar set of four corners exist for the top surface,
of course.  Thus the border connecting, say, the back and right corners of the
x-y plane is the "bottom right back" border, and the border connecting the top
and bottom front corners is the "front vertical".  (This nomenclature is
defined solely to allow the reader to figure out the table that follows.)

The borders are encoded in a 12-bit integer: the four low bits control the
border for `plot` and the sides of the base for `splot`; the next four bits
control the verticals in `splot`; the four high bits control the edges on top
of an `splot`.  The border settings is thus the sum of the appropriate
entries from the following table:


@example
            Bit     plot        splot
              1   bottom      bottom left front
              2   left        bottom left back
              4   top         bottom right front
              8   right       bottom right back
             16   no effect   left vertical
             32   no effect   back vertical
             64   no effect   right vertical
            128   no effect   front vertical
            256   no effect   top left back
            512   no effect   top right back
           1024   no effect   top left front
           2048   no effect   top right front
           4096   polar       no effect

@end example


@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="right">
@c ^  <col align="center">
@c ^  <col align="center">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Bit</th>    <th>plot</th>    <th>splot</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td>1</td>    <td>bottom</td>    <td>bottom left front</td></tr>
@c ^<tr>    <td>2</td>    <td>left</td>    <td>bottom left back</td></tr>
@c ^<tr>    <td>4</td>    <td>top</td>    <td>bottom right front</td></tr>
@c ^<tr>    <td>8</td>    <td>right</td>    <td>bottom right back</td></tr>
@c ^<tr>    <td>16</td>    <td>no effect</td>    <td>left vertical</td></tr>
@c ^<tr>    <td>32</td>    <td>no effect</td>    <td>back vertical</td></tr>
@c ^<tr>    <td>64</td>    <td>no effect</td>    <td>right vertical</td></tr>
@c ^<tr>    <td>128</td>    <td>no effect</td>    <td>front vertical</td></tr>
@c ^<tr>    <td>256</td>    <td>no effect</td>    <td>top left back</td></tr>
@c ^<tr>    <td>512</td>    <td>no effect</td>    <td>top right back</td></tr>
@c ^<tr>    <td>1024</td>    <td>no effect</td>    <td>top left front</td></tr>
@c ^<tr>    <td>2048</td>    <td>no effect</td>    <td>top right front</td></tr>
@c ^<tr>    <td>4096</td>    <td>polar</td>    <td>no effect</td></tr>
@c ^</tbody>
@c ^</table>

The default setting is 31, which is all four sides for `plot`, and base and
z axis for `splot`.

Separate from the four vertical lines in a 3D border, the `splot` command
by default draws a vertical line each corner of a surface to the base plane
of the plot. These verticals are not controlled by @ref{border}.
Instead use @ref{cornerpoles}.

In 2D plots the border is normally drawn on top of all plots elements
(`front`). If you want the border to be drawn behind the plot elements,
use `set border back`.

In hidden3d plots the lines making up the border are normally subject to the
same hidden3d processing as the plot elements. `set border behind` will
override this default.

Using the optional <linestyle>, <linetype>, <linewidth>, <linecolor>, and
<dashtype> specifiers, the way the border lines are drawn can be influenced
(limited by what the current terminal driver supports).
Besides the border itself, this line style is used for the tics, independent
of whether they are plotted on the border or on the axes (see `set xtics`).

For `plot`, tics may be drawn on edges other than bottom and left by enabling
the second axes -- see `set xtics` for details.

If a `splot` draws only on the base, as is the case with "`unset surface; set
contour base`", then the verticals and the top are not drawn even if they are
specified.

The `set grid` options 'back', 'front' and 'layerdefault' also
control the order in which the border lines are drawn with respect to
the output of the plotted data.

The `polar` keyword enables a circular border for polar plots.

Examples:

Draw default borders:
@example
      set border

@end example

Draw only the left and bottom (`plot`) or both front and back bottom left
(`splot`) borders:
@example
      set border 3

@end example

Draw a complete box around a `splot`:
@example
      set border 4095

@end example

Draw a topless box around a `splot`, omitting the front vertical:
@example
      set border 127+256+512 # or set border 1023-128

@end example

Draw only the top and right borders for a `plot` and label them as axes:
@example
      unset xtics; unset ytics; set x2tics; set y2tics; set border 12

@end example


@node boxwidth, boxdepth, border, set-show
@subsection boxwidth

@c ?commands set boxwidth
@c ?commands show boxwidth
@c ?set boxwidth
@c ?show boxwidth
@cindex boxwidth
@opindex boxwidth


The @ref{boxwidth} command is used to set the default width of boxes in the
@ref{boxes}, @ref{boxerrorbars}, @ref{boxplot}, @ref{candlesticks} and @ref{histograms} styles.

Syntax:
@example
      set boxwidth @{<width>@} @{absolute|relative@}
      show boxwidth

@end example

By default, adjacent boxes are extended in width until they touch each other.
A different default width may be specified using the @ref{boxwidth} command.
`Relative` widths are interpreted as being a fraction of this default width.

An explicit value for the boxwidth is interpreted as being a number of units
along the current x axis (`absolute`) unless the modifier `relative` is given.
If the x axis is a log-scale (see `set log`) then the value of boxwidth is
truly "absolute" only at x=1; this physical width is maintained everywhere
along the axis (i.e. the boxes do not become narrower the value of x
increases). If the range spanned by a log scale x axis is far from x=1,
some experimentation may be required to find a useful value of boxwidth.

The default is superseded by explicit width information taken from an extra
data column in styles @ref{boxes} or @ref{boxerrorbars}.
See @ref{boxes} and @ref{boxerrorbars} for more details.

To set the box width to automatic use the command
@example
      set boxwidth

@end example

To set the box width to half of the automatic size use
@example
      set boxwidth 0.5 relative

@end example

To set the box width to an absolute value of 2 use
@example
      set boxwidth 2 absolute

@end example

@node boxdepth, chi_shapes, boxwidth, set-show
@subsection boxdepth

@c ?commands set boxdepth
@c ?commands show boxdepth
@c ?set boxdepth
@c ?show boxdepth
@cindex boxdepth
@opindex boxdepth


@example
     set boxdepth @{<y extent>@} | square
@end example

The @ref{boxdepth} command affects only 3D plots created by @ref{boxes}.
It sets the extent of each box along the y axis, i.e. its thickness.
`set boxdepth square` will try to choose a y extent that gives the appearance
of a square cross section independent of the axis scales on x and y.

@node chi_shapes, color, boxdepth, set-show
@subsection chi_shapes

@c ?command set chi_shapes
@c ?set chi_shapes
@c ?command unset chi_shapes
@c ?unset chi_shapes
@cindex chi_shapes
@opindex chi_shapes


@example
     set chi_shapes fraction <value>
     unset chi_shapes

@end example

The concave hull filter creates χ-shapes defined by a characteristic length
chi_length.  If no chi_length variable has been set, it chooses a value equal
to a fraction of the longest edge in the bounding polygon (the convex hull).
The fraction defaults to 0.6 but can be changed using this command.
Choosing a value of 1.0 will reduce the resulting hull to the convex hull.
Smaller values will produce increasingly concave hulls. See `concavehull`.
The @ref{chi_shapes} command restores the fraction to 0.6 and undefines
the chi_length variable.

@node color, colormap, chi_shapes, set-show
@subsection color

@c ?commands set color
@c ?set color
Gnuplot assigns each element of a `plot` or `splot` command a new set of line
properties taken from a predefined sequence.  The default is to distinguish
successive lines by a change in color.  The alternative selected by
@ref{monochrome} uses a sequence of black lines distinguished by linewidth or
dot/dash pattern.  The `set color` command exits this alternative monochrome
mode and restores the previous set of default color lines.
See @ref{monochrome}, `set linetype`, and @ref{colorsequence}.

@node colormap, colorsequence, color, set-show
@subsection colormap

@c ?commands set colormap
@c ?set colormap
@cindex colormap
@opindex colormap


@c ?show colormap
@cindex alpha channel

@cindex transparency

@cindex palette
@opindex palette


Syntax:

@example
     set colormap new <colormap-name>
     set colormap <colormap-name> range [<min>:<max>]
     show colormaps

@end example

`set colormap new <name>` creates a colormap array <name> and loads it from
the current palette settings. This saved colormap can be further manipulated
as an array of 32-bit ARGB color values and used by name in subsequent plots.

Here is an example that creates a palette running from dark red to white,
saves it to a colormap array named 'Reds', and makes all entries in the
colormap partially transparent.  This named colormap is then used later
to color a pm3d surface.
Note that the alpha channel value in a named colormap follows the convention
for ARGB line properties; i.e 0 is opaque, 0xff is fully transparent.

@example
     set palette defined (0 "dark-red", 1 "white")
     set colormap new Reds
     do for [i=1:|Reds|] @{ Reds[i] = Reds[i] | 0x3F000000 @}
     splot func(x,y) with pm3d fillcolor palette Reds

@end example

The mapping of z values onto the colormap can be tuned by setting minimum and
maximum z values that correspond to the end points.  For example

@example
     set colormap Reds range [0:10]

@end example

If no range is set, or if min and max are the same, then the mapping uses the
current limits of cbrange. See @ref{cbrange}.

A colormap can be used to gradient-fill a rectangular area.
See @ref{colormap}.


@node colorsequence, clabel, colormap, set-show
@subsection colorsequence

@c ?commands set colorsequence
@c ?set colorsequence
@cindex colorsequence
@opindex colorsequence


Syntax:
@example
     set colorsequence @{default|classic|podo@}

@end example

`set colorsequence default` selects a terminal-independent repeating sequence
of eight colors.  See `set linetype`, `colors`.

`set colorsequence classic` lets each separate terminal type provide its own
sequence of line colors.  The number provided varies from 4 to more than 100,
but most start with red/green/blue/magenta/cyan/yellow.
This was the default behaviour prior to version 5.

`set colorsequence podo` selects eight colors drawn from a set recommended by
Wong (2011) [Nature Methods 8:441] as being easily distinguished by color-blind
viewers with either protanopia or deuteranopia.

In each case you can further customize the length of the sequence and the
colors used. See `set linetype`, `colors`.

@node clabel, clip, colorsequence, set-show
@subsection clabel

@c ?commands set clabel
@c ?commands unset clabel
@c ?commands show clabel
@c ?set clabel
@c ?unset clabel
@c ?show clabel
@cindex clabel
@opindex clabel


This command has been deprecated. Use @ref{cntrlabel} instead.
`set clabel "format"` is replaced by `set cntrlabel format "format"`.
@ref{clabel} is replaced by `set cntrlabel onecolor`.

@node clip, cntrlabel, clabel, set-show
@subsection clip

@c ?commands set clip
@c ?commands unset clip
@c ?commands show clip
@c ?set clip
@c ?unset clip
@c ?show clip
@cindex clip
@opindex clip


Syntax:
@example
      set clip @{points|one|two|radial@}
      unset clip @{points|one|two|radial@}
      show clip

@end example

Default state:
@example
      unset clip points
      set clip one
      unset clip two
      unset clip radial

@end example

Data points whose center lies inside the plot boundaries are normally drawn
even if the finite size of the point symbol causes it to extend past a boundary
line.  `set clip points` causes such points to be clipped (i.e. not drawn) even
though the point center is inside the boundaries of a 2D plot.
Data points whose center lies outside the plot boundaries are never drawn.

`unset clip` causes a line segment in a plot not to be drawn if either end of
that segment lies outside the plot boundaries (i.e. xrange and yrange).

`set clip one` causes `gnuplot` to draw the in-range portion of line
segments with one endpoint in range and one endpoint out of range.
`set clip two` causes `gnuplot` to draw the in-range portion of line
segments with both endpoints out of range.
Line segments that lie entirely outside the plot boundaries are never drawn.

`set clip radial` affects plotting only in polar mode.  It clips lines
against the radial bound established by `set rrange [0:MAX]`.  This criteria
is applied in conjunction with `set clip @{one|two@}`.  I.e. the portion of a
line between two points with R > RMAX that passes through the circle
R = RMAX is drawn only if both `clip two` and `clip radial` are set.

Notes:

* `set clip` affects only points and lines produced by plot styles `lines`,
@ref{linespoints}, `points`, `arrows`, and @ref{vectors}.

* Clipping of colored quadrangles drawn for pm3d surfaces and other solid
objects is controlled @ref{clipping}. The default is smooth clipping
against the current zrange.

* Object clipping is controlled by the `clip` or `noclip` property of the
individual object.

* In the current version of gnuplot, "plot with vectors" in polar mode does
not test or clip against the maximum radius.


@node cntrlabel, cntrparam, clip, set-show
@subsection cntrlabel

@c ?commands set cntrlabel
@c ?commands show cntrlabel
@c ?set cntrlabel
@c ?show cntrlabel
@cindex cntrlabel
@opindex cntrlabel


Syntax:
@example
      set cntrlabel @{format "format"@} @{font "font"@}
      set cntrlabel @{start <int>@} @{interval <int>@}
      set cntrlabel onecolor

@end example

@ref{cntrlabel} controls the labeling of contours, either in the key (default)
or on the plot itself in the case of @ref{labels}.  In the latter
case labels are placed along each contour line according to the `pointinterval`
or `pointnumber` property of the label descriptor.  By default a label is
placed on the 5th line segment making up the contour line and repeated every
20th segment.  These defaults are equivalent to
@example
      set cntrlabel start 5 interval 20
@end example

They can be changed either via the @ref{cntrlabel} command or by specifying the
interval in the `splot` command itself
@example
      set contours; splot $FOO with labels point pointinterval -1
@end example

Setting the interval to a negative value means that the label appear only
once per contour line.  However if @ref{samples} or @ref{isosamples} is large
then many contour lines may be created, each with a single label.

A contour label is placed in the plot key for each linetype used. By default
each contour level is given its own linetype, so a separate label appears for
each.  The command `set cntrlabel onecolor` causes all contours to be drawn
using the same linetype, so only one label appears in the plot key.
This command replaces an older command @ref{clabel}.

@node cntrparam, color_box, cntrlabel, set-show
@subsection cntrparam

@c ?commands set cntrparam
@c ?commands show cntrparam
@c ?set cntrparam
@c ?show cntrparam
@cindex cntrparam
@opindex cntrparam


@ref{cntrparam} controls the generation of contours and their smoothness for
a contour plot. `show contour` displays current settings of @ref{cntrparam} as
well as `contour`.

Syntax:
@example
      set cntrparam @{ @{ linear
                      | cubicspline
                      | bspline
                      | points <n>
                      | order <n>
                      | levels @{ <n>
                                 | auto @{<n>@}
                                 | discrete <z1> @{,<z2>@{,<z3>...@}@}
                                 | incremental <start>, <incr> @{,<end>@}
                               @}
                        @{@{un@}sorted@}
                        @{firstlinetype N@}
                      @}
                    @}
      show contour

@end example

This command has two functions.  First, it sets the values of z for which
contours are to be determined.  The number of contour levels <n> should be an
integral constant expression. <z1>, <z2> ... are real-valued expressions.
Second, it controls the appearance of the individual contour lines.

Keywords controlling the smoothness of contour lines:

`linear`, `cubicspline`, `bspline`--- Controls type of approximation or
interpolation.  If `linear`, then straight line segments connect points of
equal z magnitude.  If `cubicspline`, then piecewise-linear contours are
interpolated between the same equal z points to form somewhat smoother
contours, but which may undulate.  If `bspline`, a guaranteed-smoother curve
is drawn, which only approximates the position of the points of equal-z.

`points`--- Eventually all drawings are done with piecewise-linear strokes.
This number controls the number of line segments used to approximate the
`bspline` or `cubicspline` curve.  Number of cubicspline or bspline
segments (strokes) = `points` * number of linear segments.

`order`--- Order of the bspline approximation to be used.  The bigger this
order is, the smoother the resulting contour.  (Of course, higher order
bspline curves will move further away from the original piecewise linear
data.)  This option is relevant for `bspline` mode only.  Allowed values are
integers in the range from 2 (linear) to 10.

Keywords controlling the selection of contour levels:

`levels auto`--- This is the default. <n> specifies a nominal number of levels;
the actual number will be adjusted to give simple labels. If the surface is
bounded by zmin and zmax, contours will be generated at integer multiples
of dz between zmin and zmax, where dz is 1, 2, or 5 times some power of ten
(like the step between two tic marks).

`levels discrete`--- Contours will be generated at z = <z1>, <z2> ... as
specified; the number of discrete levels sets the number of contour levels.
In `discrete` mode, any `set cntrparam levels <n>` are ignored.

`levels incremental`--- Contours are generated at values of z beginning at
<start> and increasing by <increment>, until the number of contours is reached.
<end> is used to determine the number of contour levels, which will be changed
by any subsequent `set cntrparam levels <n>`.  If the z axis is logarithmic,
<increment> will be interpreted as a multiplicative factor, as it is for
@ref{ztics}, and <end> should not be used.

Keywords controlling the assignment of linetype to contours:

By default the contours are generated in the reverse order specified
(`unsorted`).  Thus `set cntrparam levels increment 0, 10, 100` will create
11 contours levels starting with 100 and ending with 0.  Adding the keyword
`sorted` re-orders the contours by increasing numerical value, which in this
case would mean the first contour is drawn at 0.

By default contours are drawn using successive linetypes starting with the
next linetype after that used for the corresponding surface.
Thus `splot x*y lt 5` would use lt 6 for the first contour generated.
If @ref{hidden3d} mode is active then each surface uses two linetypes.  In this
case using default settings would cause the first contour to use the same
linetype as the hidden surface, which is undesirable.  This can be avoided
in either of two ways.
(1) Use `set hidden3d offset N` to change the linetype used for the hidden
surface.  A good choice would be `offset -1` since that will avoid all the
contour linetypes.
(2) Use the `set cntrparam firstlinetype N` option to specify a block of
linetypes used for contour lines independent of whatever was used for the
surface.  This is particularly useful if you want to customize the set of
contour linetypes.  N <= 0 restores the default.

If the command @ref{cntrparam} is given without any arguments specified
all options are reset to the default:
@example
      set cntrparam order 4 points 5
      set cntrparam levels auto 5 unsorted
      set cntrparam firstlinetype 0

@end example


@menu
* Examples_::
@end menu

@node Examples_,  , cntrparam, cntrparam
@subsubsection Examples

@c ?commands set cntrparam examples
@c ?set cntrparam examples
@c ?cntrparam examples
Examples:
@example
      set cntrparam bspline
      set cntrparam points 7
      set cntrparam order 10

@end example

To select levels automatically, 5 if the level increment criteria are met:
@example
      set cntrparam levels auto 5

@end example

To specify discrete levels at .1, .37, and .9:
@example
      set cntrparam levels discrete .1,1/exp(1),.9

@end example

To specify levels from 0 to 4 with increment 1:
@example
      set cntrparam levels incremental  0,1,4

@end example

To set the number of levels to 10 (changing an incremental end or possibly
the number of auto levels):
@example
      set cntrparam levels 10

@end example

To set the start and increment while retaining the number of levels:
@example
      set cntrparam levels incremental 100,50

@end example

To define and use a customized block of contour linetypes
@example
      set linetype 100 lc "red" dt '....'
      do for [L=101:199] @{
          if (L%10 == 0) @{
              set linetype L lc "black" dt solid lw 2
          @} else @{
              set linetype L lc "gray" dt solid lw 1
          @}
      @}
      set cntrparam firstlinetype 100
      set cntrparam sorted levels incremental 0, 1, 100

@end example

See also `set contour` for control of where the contours are drawn, and
@ref{cntrlabel} for control of the format of the contour labels and linetypes.

See also
@uref{http://www.gnuplot.info/demo/contours.html,contours demo (contours.dem)
}
and
@uref{http://www.gnuplot.info/demo/discrete.html,contours with user defined levels demo (discrete.dem).
}
D contours 5
D discrete 3

@node color_box, colornames, cntrparam, set-show
@subsection color box

@c ?commands set colorbox
@c ?commands show colorbox
@c ?commands unset colorbox
@c ?set colorbox
@c ?show colorbox
@c ?unset colorbox
@cindex colorbox


For plots that use palette coloring, in particular pm3d plots, the palette
gradient is drawn in a color box next to the plot unless it is switched off
by `unset colorbox`.

@example
      set colorbox
      set colorbox @{
                 @{ vertical | horizontal @} @{@{no@}invert@}
                 @{ default | bottom | user @}
                 @{ origin x, y @}
                 @{ size x, y @}
                 @{ front | back @}
                 @{ noborder | bdefault | border [line style] @}
               @}
      show colorbox
      unset colorbox

@end example

The orientation of the color gradient is set by `vertical` or `horizontal`.

The color box position can be `default` or `bottom` or `user`.
The `bottom` keyword is a convenience short cut equivalent to

@example
     set colorbox horizontal user origin screen 0.1, 0.07 size 0.8, 0.03.

@end example

If the colorbox is placed underneath the plot, as it is with `bottom`,
it may be useful to reserve additional space for it: `set bmargin screen 0.2`.

`origin x, y` and `size x, y` are used to tailor the exact placement in
`user` or `bottom` positioning.  The x and y values are interpreted as screen
coordinates by default, and this is the only legal option for 3D plots.
2D plots, including splot with `set view map`, allow any coordinate system.

`back`/`front` control whether the color box is draw before or after the plot.

@ref{border} turns the border on (this is the default). `noborder` turns the border
off. If an positive integer argument is given after @ref{border}, it is used as a
line style tag which is used for drawing the border, e.g.:
@example
    set style line 2604 linetype -1 linewidth .4
    set colorbox border 2604
@end example

will use line style `2604`, a thin line with the default border color (-1)
for drawing the border. `bdefault` (which is the default) will use the default
border line style for drawing the border of the color box.

The axis of the color box is called `cb` and it is controlled by means of the
usual axes commands, i.e. `set/unset/show` with @ref{cbrange}, `[m]cbtics`,
`format cb`, `grid [m]cb`, @ref{cblabel}, and perhaps even @ref{cbdata}, `[no]cbdtics`,
`[no]cbmtics`.

`set colorbox` without any parameter switches the position to default.
`unset colorbox` resets the default parameters for the colorbox and switches
the colorbox off.

See also help for `set pm3d`, @ref{palette}, and `set style line`.

@node colornames, contour, color_box, set-show
@subsection colornames

@cindex colornames
@opindex colornames


Gnuplot knows a limited number of color names. You can use these to define
the color range spanned by a pm3d palette, to assign a named color to a
particular linetype or linestyle, or to define a gradient for the current
color palette.
Use the command @ref{colornames} to list the known color names together
with their RGB component definitions.
Examples:
@example
      set style line 1 linecolor "sea-green"
      set palette defined (0 "dark-red", 1 "white")
      print sprintf("0x%06x", rgbcolor("dark-green"))
            0x006400

@end example


@node contour, cornerpoles, colornames, set-show
@subsection contour

@c ?commands set contour
@c ?commands unset contour
@c ?commands show contour
@c ?set contour
@c ?unset contour
@c ?show contour
@cindex contour
@opindex contour


@cindex contours

@cindex nocontour

`set contour` enables placement of contour lines on 3D surfaces.
This option is available only for `splot`.  It requires grid data,
e.g. a file in which all the points for a single y-isoline are listed,
then all the points for the next y-isoline, and so on.  A single blank line
(containing no characters other than blank spaces) separates one y-isoline
from the next.  see `grid_data` for more details.

If the data is not already gridded, @ref{dgrid3d} can be used to first
create and populate an appropriate grid.

Syntax:
@example
      set contour @{base | surface | both@}
      unset contour
      show contour

@end example

The three options specify where to draw the contours: `base` draws the
contours on the grid base where the x/ytics are placed, `surface` draws the
contours on the surfaces themselves, and `both` draws the contours on both
the base and the surface.  If no option is provided, the default is `base`.

See also @ref{cntrparam} for the parameters that affect the drawing of
contours, and @ref{cntrlabel} for control of labeling of the contours.

Note that this option places lines or labels without otherwise changing
the appearance of the surface itself.  If you want to recolor the surface
so that the areas bounded by contour lines are assigned distinct colors,
use instead the contourfill plot style.  See @ref{contourfill}.

While `set contour` is in effect, `splot with <style>` will place the
style elements (points, lines, impulses, labels, etc) along the contour lines.
`with pm3d` will produce a pm3d surface and also contour lines.
If you want to mix other plot elements, say labels read from a file, with
the contours generated while `set contour` is active you must append the
keyword `nocontours` after that clause in the splot command.

The surface can be switched off (see `unset surface`) to give a contour-only
graph.  A 2D projection of the contour lines and optional labels can be
generated by

@example
     set view map
     splot DATA with lines nosurface, DATA with labels

@end example

Older gnuplot versions used an alternative multi-step method to save the
3D contour lines into a file or datablock and then plot them using a
2D plot command as shown below.

@example
      set contour
      set table $datablock
      splot DATA with lines nosurface
      unset table
      # contour lines are now in $datablock, one contour per index
      plot for [level=0:*] $datablock index level with lines

@end example

See also @ref{datafile} and demos for
@uref{http://www.gnuplot.info/demo/contours.html,contours (contours.dem)
}
and
@uref{http://www.gnuplot.info/demo/discrete.html,user defined contour levels (discrete.dem).
}

@node cornerpoles, contourfill_, contour, set-show
@subsection cornerpoles

@c ?command set cornerpoles
@c ?set cornerpoles
@cindex cornerpoles
@opindex cornerpoles


By default splot draws a vertical line from each corner of a 3D surface to the
base plane. These vertical lines can be suppressed using @ref{cornerpoles}.

@node contourfill_, dashtype_, cornerpoles, set-show
@subsection contourfill

@c ?commands set contourfill
@c ?commands show contourfill
@c ?set contourfill
@c ?show contourfill
The 3D plot style @ref{contourfill} slices a pm3d surface into sections
delimited by a set of planes perpendicular to the z axis.   The command
@ref{contourfill} controls placement of these limiting planes and the
colors assigned to the individual sections.

Syntax:
@example
     set contourfill auto N          # split zrange evenly into N slices
     set contourfill ztics           # slice at each z axis major tick
     set contourfill cbtics          # slice at each cb axis major tick
     set contourfill @{palette | firstlinetype N@}

@end example

The default is @ref{palette}, which splits the current
z range into five equal slices (6 bounding planes) and assigns each slice
the palette mapped color of its midpoint z value.

The options @ref{ztics} or @ref{cbtics} place split zrange by slicing at major ticks
along that axis.  For example to slice specifically at z=2.5, z=7 and z=10
you could use the commands below.
@example
     set ztics add ("floor" 2.5, "boundary X" 7, "ceiling" 10)
     set contourfill ztics

@end example

If you do not want to use palette coloring for the sections, you can choose
any arbitrary range of successive linetypes and assign them the desired color
sequence.
@example
     set for [i=101:110] linetype i lc mycolor[i]
     set contourfill firstlinetype 101
@end example

@ref{palette} restores palette coloring.
D contourfill 3


@node dashtype_, datafile, contourfill_, set-show
@subsection dashtype

@c ?commands set dashtype
@c ?commands show dashtype
@c ?set dashtype
@c ?show dashtype
The @ref{dashtype} command allows you to define a dash pattern that can
then be referred to by its index.  This is purely a convenience, as anywhere
that would accept the dashtype by its numerical index would also accept an
explicit dash pattern.
Example:
@example
     set dashtype 5 (2,4,2,6)   # define or redefine dashtype number 5
     plot f1(x) dt 5            # plot using the new dashtype
     plot f1(x) dt (2,4,2,6)    # exactly the same plot as above
     set linetype 5 dt 5        # always use this dash pattern with linetype 5
     set dashtype 66 "..-"      # define a new dashtype using a string
@end example

See also @ref{dashtype}.
D dashtypes 2

@node datafile, decimalsign, dashtype_, set-show
@subsection datafile

@c ?set datafile
@c ?show datafile
The @ref{datafile} command options control interpretation of fields read from
input data files by the `plot`, `splot`, and @ref{fit} commands.
Several options are currently implemented.  The settings apply uniformly to all
data files read by subsequent commands;  however see `functionblocks` for a
way to work around this if it is necessary to simultaneously handles files with
conflicting formats.

@menu
* set_datafile_columnheaders::
* set_datafile_fortran::
* set_datafile_nofpe_trap::
* set_datafile_missing::
* set_datafile_separator::
* set_datafile_commentschars::
* set_datafile_binary::
@end menu

@node set_datafile_columnheaders, set_datafile_fortran, datafile, datafile
@subsubsection set datafile columnheaders

@c ?set datafile columnheaders
@cindex columnheaders

The @ref{columnheaders} command guarantees that the first row of
input will be interpreted as column headers rather than as data values.
It affects all input data sources to plot, splot, fit, and stats commands.
If this setting is disabled by @ref{columnheaders}, the same
effect is triggered on a per-file basis if there is an explicit columnheader()
function in a using specifier or plot title associated with that file.
See also `set key autotitle` and `columnheader`.

@node set_datafile_fortran, set_datafile_nofpe_trap, set_datafile_columnheaders, datafile
@subsubsection set datafile fortran

@c ?set datafile fortran
@c ?show datafile fortran
@cindex fortran

The `set datafile fortran` command enables a special check for values in the
input file expressed as Fortran D or Q constants. This extra check slows down
the input process, and should only be selected if you do in fact have datafiles
containing Fortran D or Q constants. The option can be disabled again using
`unset datafile fortran`.

@node set_datafile_nofpe_trap, set_datafile_missing, set_datafile_fortran, datafile
@subsubsection set datafile nofpe_trap

@c ?set datafile nofpe_trap
@cindex fpe_trap

@cindex nofpe_trap

@cindex floating point exceptions

The `set datafile nofpe_trap` command tells gnuplot not to re-initialize a
floating point exception handler before every expression evaluation used while
reading data from an input file.  This can significantly speed data input from
very large files at the risk of program termination if a floating-point
exception is generated.

@node set_datafile_missing, set_datafile_separator, set_datafile_nofpe_trap, datafile
@subsubsection set datafile missing

@c ?set datafile missing
@c ?show datafile missing
@c ?set missing
@cindex missing

Syntax:
@example
      set datafile missing "<string>"
      set datafile missing NaN
      show datafile missing
      unset datafile

@end example

The `set datafile missing` command tells `gnuplot` there is a special string
used in input data files to denote a missing data entry.  There is no default
character for `missing`.  Gnuplot makes a distinction between missing data and
invalid data (e.g. "NaN", 1/0.).  For example invalid data causes a gap in a
line drawn through sequential data points; missing data does not.

Non-numeric characters found in a numeric field will usually be interpreted as
invalid rather than as a missing data point unless they happen to match the
`missing` string.

Conversely @ref{NaN} causes all data or expressions evaluating
to not-a-number (NaN) to be treated as missing data.  See the
@uref{http://www.gnuplot.info/demo/imageNaN.html,imageNaN demo.
}

The program notices a missing value flag in column N when the using specifier
in a plot command directly refers to the column as `using N`, `using ($N)`,
or `using (function($N))`.  In these cases the expression, e.g. func($N),
is not evaluated at all.

The current gnuplot version also notices direct references of the form
(column(N)), and it notices during evaluation if the expression depends
even indirectly on a column value flagged "missing".

In all these cases the program treats the entire input data line as if it were
not present at all.  However if an expression depends on a data value that is
truly missing (e.g. an empty field in a csv file) it may not be caught by
these checks. If it evaluates to NaN it will be treated as invalid data
rather than as a missing data point.  If you want to treat such invalid data
the same as missing data, use the command @ref{NaN}.


@node set_datafile_separator, set_datafile_commentschars, set_datafile_missing, datafile
@subsubsection set datafile separator

@c ?set datafile separator
@c ?show datafile separator
@c ?datafile separator
@cindex separator

The command `set datafile separator` tells `gnuplot` that data fields in
subsequent input files are separated by a specific character rather than by
whitespace.  The most common use is to read in csv (comma-separated value)
files written by spreadsheet or database programs. By default data fields
are separated by whitespace.

Syntax:
@example
      set datafile separator @{whitespace | tab | comma | "<chars>"@}

@end example

Examples:
@example
      # Input file contains tab-separated fields
      set datafile separator "\t"

@end example

@example
      # Input file contains comma-separated values fields
      set datafile separator comma

@end example

@example
      # Input file contains fields separated by either * or |
      set datafile separator "*|"

@end example

@node set_datafile_commentschars, set_datafile_binary, set_datafile_separator, datafile
@subsubsection set datafile commentschars

@c ?set datafile commentschars
@cindex commentschars

The command `set datafile commentschars` specifies what characters can be used
in a data file to begin comment lines. If the first non-blank character on a
line is one of these characters then the rest of the data line is ignored.
Default value of the string is "#!" on VMS and "#" otherwise.

Syntax:
@example
      set datafile commentschars @{"<string>"@}
      show datafile commentschars
      unset commentschars

@end example

Then, the following line in a data file is completely ignored
@example
    # 1 2 3 4
@end example

but the following
@example
    1 # 3 4
@end example

will be interpreted as garbage in the 2nd column followed by valid data in
the 3rd and 4th columns.

Example:
@example
      set datafile commentschars "#!%"

@end example

@node set_datafile_binary,  , set_datafile_commentschars, datafile
@subsubsection set datafile binary

@c ?set datafile binary
The @ref{binary} command is used to set the defaults when reading
binary data files.  The syntax matches precisely that used for commands
`plot` and `splot`.  See @ref{matrix} and @ref{general} for details
about the keywords that can be present in <binary list>.

Syntax:
@example
      set datafile binary <binary list>
      show datafile binary
      show datafile
      unset datafile

@end example

Examples:
@example
      set datafile binary filetype=auto
      set datafile binary array=(512,512) format="%uchar"

@end example

@c ?show datafile binary
@example
      show datafile binary   # list current settings

@end example

@node decimalsign, dgrid3d, datafile, set-show
@subsection decimalsign

@c ?commands set decimalsign
@c ?commands show decimalsign
@c ?commands unset decimalsign
@c ?set decimalsign
@c ?show decimalsign
@c ?unset decimalsign
@cindex decimalsign
@opindex decimalsign


@cindex locale
@opindex locale


The @ref{decimalsign} command selects a decimal sign for numbers printed
into tic labels or `set label` strings.

Syntax:
@example
      set decimalsign @{<value> | locale @{"<locale>"@}@}
      unset decimalsign
      show decimalsign

@end example

The argument <value> is a string to be used in place of the usual
decimal point. Typical choices include the period, '.', and the comma,
',', but others may be useful, too.  If you omit the <value> argument,
the decimal separator is not modified from the usual default, which is
a period.  Unsetting decimalsign has the same effect as omitting <value>.

Example:

Correct typesetting in most European countries requires:
@example
      set decimalsign ','

@end example

Please note: If you set an explicit string, this affects only numbers that
are printed using gnuplot's gprintf() formatting routine, including axis tics.
It does not affect the format expected for input data, and it does not affect
numbers printed with the sprintf() formatting routine. To change the behavior
of both input and output formatting, instead use the form

@example
      set decimalsign locale

@end example

This instructs the program to use both input and output formats in accordance
with the current setting of the LC_ALL, LC_NUMERIC, or LANG environmental
variables.

@example
      set decimalsign locale "foo"

@end example

This instructs the program to format all input and output in accordance with
locale "foo", which must be installed.  If locale "foo" is not found then an
error message is printed and the decimal sign setting is unchanged.
On linux systems you can get a list of the locales installed on your machine by
typing "locale -a". A typical linux locale string is of the form "sl_SI.UTF-8".
A typical Windows locale string is of the form "Slovenian_Slovenia.1250" or
"slovenian". Please note that interpretation of the locale settings is done by
the C library at runtime. Older C libraries may offer only partial support for
locale settings such as the thousands grouping separator character.

@example
      set decimalsign locale; set decimalsign "."

@end example

This sets all input and output to use whatever decimal sign is correct for
the current locale, but over-rides this with an explicit '.' in numbers
formatted using gnuplot's internal gprintf() function.

@node dgrid3d, dummy, decimalsign, set-show
@subsection dgrid3d

@c ?commands set dgrid3d
@c ?commands unset dgrid3d
@c ?commands show dgrid3d
@c ?set dgrid3d
@c ?unset dgrid3d
@c ?show dgrid3d
@cindex dgrid3d
@opindex dgrid3d


@cindex nodgrid3d

@cindex kdensity

@cindex nogrid

The @ref{dgrid3d} command enables and sets parameters for mapping non-grid data
onto a grid.  See `splot grid_data` for details about the grid data structure.
Aside from its use in fitting 3D surfaces, this process can also be used to
generate 2D heatmaps, where the 'z' value of each point contributes to a local
weighted value.

Syntax:
@example
      set dgrid3d @{<rows>@} @{,@{<cols>@}@} splines
      set dgrid3d @{<rows>@} @{,@{<cols>@}@} qnorm @{<norm>@}
      set dgrid3d @{<rows>@} @{,@{<cols>@}@} @{gauss | cauchy | exp | box | hann@}
                      @{kdensity@} @{<dx>@} @{,<dy>@}
      unset dgrid3d
      show dgrid3d

@end example

By default @ref{dgrid3d} is disabled.  When enabled, 3D data points read from a
file are treated as a scattered data set used to fit a gridded surface.
The grid dimensions are derived from the bounding box of the scattered data
subdivided by the row/col_size parameters from the @ref{dgrid3d} statement.
The grid is equally spaced in x (rows) and in y (columns); the z values are
computed as weighted averages or spline interpolations of the scattered points'
z values. In other words, a regularly spaced grid is created and then a smooth
approximation to the raw data is evaluated for each grid point.
This surface is then plotted in place of the raw data.

While dgrid3d mode is enabled, if you want to plot individual points or lines
without using them to create a gridded surface you must append the keyword
`nogrid` to the corresponding splot command.

The number of columns defaults to the number of rows, which defaults to 10.

Several algorithms are available to calculate the approximation from the
raw data. Some of these algorithms can take additional parameters.
These interpolations are such that the closer the data point is to a grid
point, the more effect it has on that grid point.

The `splines` algorithm calculates an interpolation based on thin plate
splines. It does not take additional parameters.

The `qnorm` algorithm calculates a weighted average of the input data at
each grid point. Each data point is weighted by the inverse of its distance
from the grid point raised to some power. The power is specified as an
optional integer parameter that defaults to 1.
This algorithm is the default.

Finally, several smoothing kernels are available to calculate weighted
averages: z = Sum_i w(d_i) * z_i / Sum_i w(d_i), where z_i is the value
of the i-th data point and d_i is the distance between the current grid
point and the location of the i-th data point. All kernels assign higher
weights to data points that are close to the current grid point and lower
weights to data points further away.

The following kernels are available:
@example
      gauss :     w(d) = exp(-d*d)
      cauchy :    w(d) = 1/(1 + d*d)
      exp :       w(d) = exp(-d)
      box :       w(d) = 1                     if d<1
                       = 0                     otherwise
      hann :      w(d) = 0.5*(1+cos(pi*d))     if d<1
                  w(d) = 0                     otherwise

@end example

When using one of these five smoothing kernels, up to two additional
numerical parameters can be specified: dx and dy. These are used to
rescale the coordinate differences when calculating the distance:
d_i = sqrt( ((x-x_i)/dx)**2 + ((y-y_i)/dy)**2 ), where x,y are the
coordinates of the current grid point and x_i,y_i are the coordinates
of the i-th data point. The value of dy defaults to the value of dx,
which defaults to 1. The parameters dx and dy make it possible to
control the radius over which data points contribute to a grid point
IN THE UNITS OF THE DATA ITSELF.

The optional keyword `kdensity`, which must come after the name of the
kernel, but before the optional scale parameters, modifies the algorithm
so that the values calculated for the grid points are not divided by the
sum of the weights ( z = Sum_i w(d_i) * z_i ). If all z_i are constant,
this effectively plots a bivariate kernel density estimate: a kernel
function (one of the five defined above) is placed at each data point,
the sum of these kernels is evaluated at every grid point, and this smooth
surface is plotted instead of the original data. This is similar in
principle to what the `smooth kdensity` option does to 1D datasets.
See kdensity2d.dem and heatmap_points.dem for usage example.

The @ref{dgrid3d} option is a simple scheme which replaces scattered data
with weighted averages on a regular grid.  More sophisticated approaches
to this problem exist and should be used to preprocess the data outside
`gnuplot` if this simple solution is found inadequate.

See also the online demos for
@uref{http://www.gnuplot.info/demo/dgrid3d.html,dgrid3d
}
@uref{http://www.gnuplot.info/demo/scatter.html,scatter
}
and
@uref{http://www.gnuplot.info/demo/heatmap_points.html,heatmap_points
}
D heatmap_points 1
D heatmap_points 2
D heatmap_points 3


@node dummy, encoding, dgrid3d, set-show
@subsection dummy

@c ?commands set dummy
@c ?commands show dummy
@c ?set dummy
@c ?show dummy
@c ?unset dummy
@cindex dummy
@opindex dummy


The @ref{dummy} command changes the default dummy variable names.

Syntax:
@example
      set dummy @{<dummy-var>@} @{,<dummy-var>@}
      show dummy

@end example

By default, `gnuplot` assumes that the independent, or "dummy", variable for
the `plot` command is "t" if in parametric or polar mode, or "x" otherwise.
Similarly the independent variables for the `splot` command are "u" and "v"
in parametric mode (`splot` cannot be used in polar mode), or "x" and "y"
otherwise.

It may be more convenient to call a dummy variable by a more physically
meaningful or conventional name.  For example, when plotting time functions:

@example
      set dummy t
      plot sin(t), cos(t)

@end example

Examples:
@example
      set dummy u,v
      set dummy ,s

@end example

The second example sets the second variable to s.  To reset the dummy variable
names to their default values, use

@example
      unset dummy

@end example

@node encoding, errorbars, dummy, set-show
@subsection encoding

@c ?commands set encoding
@c ?commands show encoding
@c ?set encoding
@c ?show encoding
@cindex encoding
@opindex encoding


@cindex encodings

@cindex utf8

@cindex sjis

@cindex UTF-8

@cindex SJIS

The @ref{encoding} command selects a character encoding.

Syntax:
@example
      set encoding @{<value>@}
      set encoding locale
      show encoding

@end example

Valid values are
@example
   default     - tells a terminal to use its default encoding
   iso_8859_1  - the most common Western European encoding prior to UTF-8.
                 Known in the PostScript world as 'ISO-Latin1'.
   iso_8859_15 - a variant of iso_8859_1 that includes the Euro symbol
   iso_8859_2  - used in Central and Eastern Europe
   iso_8859_9  - used in Turkey (also known as Latin5)
   koi8r       - popular Unix cyrillic encoding
   koi8u       - Ukrainian Unix cyrillic encoding
   cp437       - codepage for MS-DOS
   cp850       - codepage for OS/2, Western Europe
   cp852       - codepage for OS/2, Central and Eastern Europe
   cp950       - MS version of Big5 (emf terminal only)
   cp1250      - codepage for MS Windows, Central and Eastern Europe
   cp1251      - codepage for 8-bit Russian, Serbian, Bulgarian, Macedonian
   cp1252      - codepage for MS Windows, Western Europe
   cp1254      - codepage for MS Windows, Turkish (superset of Latin5)
   sjis        - shift-JIS Japanese encoding
   utf8        - variable-length (multibyte) representation of Unicode
                 entry point for each character

@end example

The command @ref{locale} is different from the other options.
It attempts to determine the current locale from the runtime environment.
On most systems this is controlled by the environmental variables
LC_ALL, LC_CTYPE, or LANG.  This mechanism is necessary, for example, to
pass multibyte character encodings such as UTF-8 or EUC_JP to the wxt
and pdf terminals.  This command does not affect the locale-specific
representation of dates or numbers.
See also @ref{locale} and @ref{decimalsign}.

Generally you should set the encoding before setting the terminal type,
as it may affect the selection of fonts.

@node errorbars, fit_, encoding, set-show
@subsection errorbars

@c ?commands set errorbars
@c ?commands show errorbars
@c ?set errorbars
@c ?show errorbars
@cindex errorbars
@opindex errorbars


@c ?commands set bars
@c ?commands show bars
@c ?set bars
@c ?show bars
@cindex bars

The @ref{errorbars} command controls the tics at the ends of error bars,
and also at the end of the whiskers belonging to a boxplot.

Syntax:
@example
      set errorbars @{small | large | fullwidth | <size>@} @{front | back@}
                    @{line-properties@}
      unset errorbars
      show errorbars

@end example

`small` is a synonym for 0.0 (no crossbar), and `large` for 1.0.
The default is 1.0 if no size is given.

The keyword `fullwidth` is relevant only to boxplots and to histograms with
errorbars.  It sets the width of the errorbar ends to be the same as the width
of the associated box.  It does not change the width of the box itself.

The `front` and `back` keywords are relevant only to errorbars attached
to filled rectangles (boxes, candlesticks, histograms).

Error bars are by default drawn using the same line properties as the border
of the associated box. You can change this by providing a separate set of
line properties for the error bars.

@example
     set errorbars linecolor black linewidth 0.5 dashtype '.'

@end example

@node fit_, fontpath, errorbars, set-show
@subsection fit

@c ?commands set fit
@c ?commands show fit
@c ?set fit
@c ?show fit
@c ?set fit quiet
@c ?set fit verbose
@c ?set fit brief
@c ?set fit results
@c ?set fit prescale
@c ?set fit limit
@c ?set fit maxiter
@c ?set fit errorscaling
@c ?set fit errorvariables
@c ?set fit logfile
@c ?set fit script
@c ?set fit v4
@c ?set fit v5
The @ref{fit} command controls the options for the @ref{fit} command.

Syntax:
@example
      set fit @{nolog | logfile @{"<filename>"|default@}@}
              @{@{no@}quiet|results|brief|verbose@}
              @{@{no@}errorvariables@}
              @{@{no@}covariancevariables@}
              @{@{no@}errorscaling@}
              @{@{no@}prescale@}
              @{maxiter <value>|default@}
              @{limit <epsilon>|default@}
              @{limit_abs <epsilon_abs>@}
              @{start-lambda <value>|default@}
              @{lambda-factor <value>|default@}
              @{script @{"<command>"|default@}@}
              @{v4 | v5@}
      unset fit
      show fit

@end example

The `logfile` option defines where the @ref{fit} command writes its output.  The
<filename> argument must be enclosed in single or double quotes.  If no
filename is given or @ref{fit} is used the log file is reset to its default
value "fit.log" or the value of the environmental variable `FIT_LOG`.  If the
given logfile name ends with a / or \, it is interpreted to be a directory
name, and the actual filename will be "fit.log" in that directory.

By default the information written to the log file is also echoed to the
terminal session.  `set fit quiet` turns off the echo, whereas `results`
prints only final results.  `brief` gives one line summaries for every
iteration of the fit in addition.  `verbose` yields detailed iteration
reports as in version 4.

If the `errorvariables` option is turned on, the error of each fitted
parameter computed by @ref{fit} will be copied to a user-defined variable
whose name is formed by appending "_err" to the name of the parameter
itself.  This is useful mainly to put the parameter and its error onto
a plot of the data and the fitted function, for reference, as in:

@example
       set fit errorvariables
       fit f(x) 'datafile' using 1:2 via a, b
       print "error of a is:", a_err
       set label 1 sprintf("a=%6.2f +/- %6.2f", a, a_err)
       plot 'datafile' using 1:2, f(x)

@end example

If the `errorscaling` option is specified, which is the default, the
calculated parameter errors are scaled with the reduced chi square.  This is
equivalent to providing data errors equal to the calculated standard
deviation of the fit (FIT_STDFIT) resulting in a reduced chi square of one.
With the `noerrorscaling` option the estimated errors are the unscaled
standard deviations of the fit parameters.
If no weights are specified for the data, parameter errors are always scaled.

If the `prescale` option is turned on, parameters are prescaled by their
initial values before being passed to the Marquardt-Levenberg
routine. This helps tremendously if there are parameters that differ
in size by many orders of magnitude. Fit parameters with an initial value
of exactly zero are never prescaled.

The maximum number of iterations may be limited with the `maxiter` option.
A value of 0 or `default` means that there is no limit.

The `limit` option can be used to change the default epsilon limit (1e-5) to
detect convergence.  When the sum of squared residuals changes by a factor
less than this number (epsilon), the fit is considered to have 'converged'.
The `limit_abs` option imposes an additional absolute limit in the change
of the sum of squared residuals and defaults to zero.

If you need even more control about the algorithm, and know the
Marquardt-Levenberg algorithm well, the following options can be used to
influence it. The startup value of `lambda` is normally calculated
automatically from the ML-matrix, but if you want to, you may provide your
own using the `start_lambda` option. Setting it to `default` will
re-enable the automatic selection. The option `lambda_factor` sets the factor
by which `lambda` is increased or decreased whenever the chi-squared target
function increased or decreased significantly. Setting it to `default`
re-enables the default factor of 10.0.

The `script` option may be used to specify a `gnuplot` command to be executed
when a fit is interrupted---see @ref{fit}.  This setting takes precedence over
the default of @ref{replot} and the environment variable `FIT_SCRIPT`.

If the `covariancevariables` option is turned on, the covariances between
final parameters will be saved to user-defined variables. The variable name
for a certain parameter combination is formed by prepending "FIT_COV_" to
the name of the first parameter and combining the two parameter names by
"_". For example given the parameters "a" and "b" the covariance variable is
named "FIT_COV_a_b".

In version 5 the syntax of the fit command changed and it now defaults to
unitweights if no 'error' keyword is given.  The `v4` option restores the
default behavior of gnuplot version 4, see also @ref{fit}.

@node fontpath, format__, fit_, set-show
@subsection fontpath

@c ?commands set fontpath
@c ?commands show fontpath
@c ?set fontpath
@c ?show fontpath
@cindex fontpath
@opindex fontpath


Syntax:
@example
      set fontpath "/directory/where/my/fonts/live"
      set term postscript fontfile <filename>

@end example

[DEPRECATED in version 5.4]

The @ref{fontpath} directory is relevant only for embedding fonts in
postscript output produced by the postscript terminal.
It has no effect on other gnuplot terminals.
If you are not embedding fonts you do not need this command, and even if you
are embedding fonts you only need it for fonts that cannot be found via
the other paths below.

Earlier versions of gnuplot tried to emulate a font manager by tracking
multiple directory trees containing fonts.
This is now replaced by a search in the following places:
(1) an absolute path given in the `set term postscript fontfile` command
(2) the current directory
(3) any of the directories specified by @ref{loadpath}
(4) the directory specified by @ref{fontpath}
(5) the directory provided in environmental variable GNUPLOT_FONTPATH

Note: The search path for fonts specified by filename for the libgd terminals
(png gif jpeg sixel) is controlled by environmental variable GDFONTPATH.

@node format__, grid, fontpath, set-show
@subsection format

@c ?commands set format
@c ?commands show format
@c ?set format
@c ?show format
@cindex format
@opindex format


@c ?format cb
The format of the tic-mark labels can be set with the `set format` command
or with the `set tics format` or individual `set @{axis@}tics format` commands.
For information on using an explicit format for input data see `using format`.

Syntax:
@example
      set format @{<axes>@} @{"<format-string>"@} @{numeric|timedate|geographic@}
      show format

@end example

where <axes> is either `x`, `y`, `xy`, `x2`, `y2`, `z`, `cb` or nothing
(which applies the format to all axes). The following two commands are
equivalent:
@example
      set format y "%.2f"
      set ytics format "%.2f"

@end example

The length of the string is restricted to 100 characters.  The default format
is "% h", "$%h$" for LaTeX terminals. Other formats such as "%.2f" or "%3.0em"
are often desirable. "set format" with no following string will restore the
default.

If the empty string "" is given, tics will have no labels, although the tic
mark will still be plotted.  To eliminate the tic marks, use `unset xtics` or
`set tics scale 0`.

Newline (\n) and enhanced text markup is accepted in the format string.
Use double-quotes rather than single-quotes in this case.  See also `syntax`.
Characters not preceded by "%" are printed verbatim.  Thus you can include
spaces and labels in your format string, such as "%g m", which will put " m"
after each number.  If you want "%" itself, double it: "%g %%".

See also `set xtics` for more information about tic labels, and
@ref{decimalsign} for how to use non-default decimal separators in numbers
printed this way.
See also
@uref{http://www.gnuplot.info/demo/electron.html,electron demo (electron.dem).
}

@menu
* gprintf_::
* format_specifiers::
* time/date_specifiers::
@end menu

@node gprintf_, format_specifiers, format__, format__
@subsubsection gprintf

@cindex gprintf
@findex gprintf


The string function gprintf("format",x) uses gnuplot's own format specifiers,
as do the gnuplot commands `set format`, @ref{timestamp}, and others. These
format specifiers are not the same as those used by the standard C-language
routine sprintf(). gprintf() accepts only a single variable to be formatted.
Gnuplot also provides an sprintf("format",x1,x2,...) routine if you prefer.
For a list of gnuplot's format options, see `format specifiers`.

@node format_specifiers, time/date_specifiers, gprintf_, format__
@subsubsection format specifiers

@c ?commands set format specifiers
@c ?set format specifiers
@c ?format specifiers
@cindex format_specifiers

The acceptable formats (if not in time/date mode) are:


@example
      Format       Explanation
      %f           floating point notation
      %e or %E     exponential notation; an "e" or "E" before the power
      %g or %G     the shorter of %e (or %E) and %f
      %h or %H     like %g with "x10^@{%S@}" or "*10^@{%S@}" instead of "e%S"
      %x or %X     hex
      %o or %O     octal
      %t           mantissa to base 10
      %l           mantissa to base of current logscale
      %s           mantissa to base of current logscale; scientific power
      %T           power to base 10
      %L           power to base of current logscale
      %S           scientific power
      %c           character replacement for scientific power
      %b           mantissa of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)
      %B           prefix of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)
      %P           multiple of pi

@end example


@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Format</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>%f</tt></td>    <td>floating point notation</td></tr>
@c ^<tr>    <td><tt>%e</tt> or <tt>%E</tt></td>    <td>exponential notation; an "e" or "E" before the power</td></tr>
@c ^<tr>    <td><tt>%g</tt> or <tt>%G</tt></td>    <td>the shorter of <tt>%e</tt> (or <tt>%E</tt>) and <tt>%f</tt></td></tr>
@c ^<tr>    <td><tt>%h</tt> or <tt>%H</tt></td>    <td><tt>%g</tt> with "x10^@{%S@}" or "*10^@{%S@}" instead of "e%S"</td></tr>
@c ^<tr>    <td><tt>%x</tt> or <tt>%X</tt></td>    <td>hex</td></tr>
@c ^<tr>    <td><tt>%o</tt> or <tt>%O</tt></td>    <td>octal</td></tr>
@c ^<tr>    <td><tt>%t</tt></td>    <td>mantissa to base 10</td></tr>
@c ^<tr>    <td><tt>%l</tt></td>    <td>mantissa to base of current logscale</td></tr>
@c ^<tr>    <td><tt>%s</tt></td>    <td>mantissa to base of current logscale; scientific power</td></tr>
@c ^<tr>    <td><tt>%T</tt></td>    <td>power to base 10</td></tr>
@c ^<tr>    <td><tt>%L</tt></td>    <td>power to base of current logscale</td></tr>
@c ^<tr>    <td><tt>%S</tt></td>    <td>scientific power</td></tr>
@c ^<tr>    <td><tt>%c</tt></td>    <td>character replacement for scientific power</td></tr>
@c ^<tr>    <td><tt>%b</tt></td>    <td>mantissa of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)</td></tr>
@c ^<tr>    <td><tt>%B</tt></td>    <td>prefix of ISO/IEC 80000 notation (ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi)</td></tr>
@c ^<tr>    <td><tt>%P</tt></td>    <td>multiple of &pi;</td></tr>
@c ^</tbody>
@c ^</table>

A 'scientific' power is one such that the exponent is a multiple of three.
Character replacement of scientific powers (`"%c"`) has been implemented
for powers in the range -18 to +18.  For numbers outside of this range the
format reverts to exponential.

Other acceptable modifiers (which come after the "%" but before the format
specifier) are "-", which left-justifies the number; "+", which forces all
numbers to be explicitly signed; " " (a space), which makes positive numbers
have a space in front of them where negative numbers have "-";
"#", which places a decimal point after
floats that have only zeroes following the decimal point; a positive integer,
which defines the field width; "0" (the digit, not the letter) immediately
preceding the field width, which indicates that leading zeroes are to be used
instead of leading blanks; and a decimal point followed by a non-negative
integer, which defines the precision (the minimum number of digits of an
integer, or the number of digits following the decimal point of a float).

Some systems may not support all of these modifiers but may also support
others; in case of doubt, check the appropriate documentation and
then experiment.

Examples:
@example
      set format y "%t"; set ytics (5,10)          # "5.0" and "1.0"
      set format y "%s"; set ytics (500,1000)      # "500" and "1.0"
      set format y "%+-12.3f"; set ytics(12345)    # "+12345.000  "
      set format y "%.2t*10^%+03T"; set ytic(12345)# "1.23*10^+04"
      set format y "%s*10^@{%S@}"; set ytic(12345)   # "12.345*10^@{3@}"
      set format y "%s %cg"; set ytic(12345)       # "12.345 kg"
      set format y "%.0P pi"; set ytic(6.283185)   # "2 pi"
      set format y "%.0f%%"; set ytic(50)          # "50%"

@end example

@example
      set log y 2; set format y '%l'; set ytics (1,2,3)
      #displays "1.0", "1.0" and "1.5" (since 3 is 1.5 * 2^1)

@end example

There are some problem cases that arise when numbers like 9.999 are printed
with a format that requires both rounding and a power.

If the data type for the axis is time/date, the format string must contain
valid codes for the 'strftime' function (outside of `gnuplot`, type "man
strftime").  See @ref{timefmt} for a list of the allowed input format codes.

@node time/date_specifiers,  , format_specifiers, format__
@subsubsection time/date specifiers

@c ?commands set format date_specifiers
@c ?commands set format time_specifiers
@c ?set format date_specifiers
@c ?set format time_specifiers
@c ?set date_specifiers
@c ?set time_specifiers
@cindex date_specifiers

@cindex time_specifiers

There are two groups of time format specifiers: time/date and relative time.
These may be used to generate axis tic labels or to encode time in a string.
See `set xtics time`, @ref{strftime}, @ref{strptime}.

The time/date formats are


@example
      Format       Explanation
      %a           short name of day of the week (ignored on input)
      %A           full name of day of the week (ignored on input)
      %b or %h     abbreviated name of the month
      %B           full name of the month
      %d           day of the month, 01--31
      %D           shorthand for "%m/%d/%y" (only output)
      %F           shorthand for "%Y-%m-%d" (only output)
      %k           hour, 0--23 (one or two digits)
      %H           hour, 00--23 (always two digits)
      %l           hour, 1--12 (one or two digits)
      %I           hour, 01--12 (always two digits)
      %j           day of the year, 001--366
      %m           month, 01--12
      %M           minute, 00--60
      %p           "am" or "pm"
      %r           shorthand for "%I:%M:%S %p" (only output)
      %R           shorthand for "%H:%M" (only output)
      %s           number of seconds since the start of year 1970
      %S           second, integer 00--60 on output, (double) on input
      %T           shorthand for "%H:%M:%S" (only output)
      %U           week of the year (CDC/MMWR "epi week") (ignored on input)
      %w           day of the week, 0--6 (Sunday = 0) (ignored on input)
      %W           week of the year (ISO 8601 week date) (ignored on input)
      %y           year, 0-68 for 2000-2068, 69-99 for 1969-1999
      %Y           year, 4-digit
      %z           timezone, [+-]hh:mm
      %Z           timezone name, ignored string

@end example



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Date Format</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>%a</tt></td>    <td>abbreviated name of day of the week</td></tr>
@c ^<tr>    <td><tt>%A</tt></td>    <td>full name of day of the week</td></tr>
@c ^<tr>    <td><tt>%b</tt> or <tt>%h</tt></td>    <td>abbreviated name of the month</td></tr>
@c ^<tr>    <td><tt>%B</tt></td>    <td>full name of the month</td></tr>
@c ^<tr>    <td><tt>%d</tt></td>    <td>day of the month, 01&ndash;31</td></tr>
@c ^<tr>    <td><tt>%D</tt></td>    <td>shorthand for <tt>%m/%d/%y</tt> (only output)</td></tr>
@c ^<tr>    <td><tt>%F</tt></td>    <td>shorthand for <tt>%Y-%m-%d</tt> (only output)</td></tr>
@c ^<tr>    <td><tt>%k</tt></td>    <td>hour, 0&ndash;23 (one or two digits)</td></tr>
@c ^<tr>    <td><tt>%H</tt></td>    <td>hour, 00&ndash;23 (always two digits)</td></tr>
@c ^<tr>    <td><tt>%l</tt></td>    <td>hour, 1&ndash;12 (one or two digits)</td></tr>
@c ^<tr>    <td><tt>%I</tt></td>    <td>hour, 01&ndash;12 (always two digits)</td></tr>
@c ^<tr>    <td><tt>%j</tt></td>    <td>day of the year, 1&ndash;366</td></tr>
@c ^<tr>    <td><tt>%m</tt></td>    <td>month, 01&ndash;12</td></tr>
@c ^<tr>    <td><tt>%M</tt></td>    <td>minute, 0&ndash;60</td></tr>
@c ^<tr>    <td><tt>%p</tt></td>    <td>"am" or "pm"</td></tr>
@c ^<tr>    <td><tt>%r</tt></td>    <td>shorthand for <tt>%I:%M:%S %p</tt> (only output)</td></tr>
@c ^<tr>    <td><tt>%R</tt></td>    <td>shorthand for <tt>%H:%M</tt> (only output)</td></tr>
@c ^<tr>    <td><tt>%S</tt></td>    <td>second, integer 0&ndash;60 on output, (double) on input</td></tr>
@c ^<tr>    <td><tt>%s</tt></td>    <td>number of seconds since start of year 1970</td></tr>
@c ^<tr>    <td><tt>%T</tt></td>    <td>shorthand for <tt>%H:%M:%S</tt> (only output)</td></tr>
@c ^<tr>    <td><tt>%U</tt></td>    <td>week of the year (CDC/MMWR "epi week")</td></tr>
@c ^<tr>    <td><tt>%w</tt></td>    <td>day of the week, 0&ndash;6 (Sunday = 0)</td></tr>
@c ^<tr>    <td><tt>%W</tt></td>    <td>week of the year (ISO 8601 week date)</td></tr>
@c ^<tr>    <td><tt>%y</tt></td>    <td>year, 0-99 in range 1969-2068</td></tr>
@c ^<tr>    <td><tt>%Y</tt></td>    <td>year, 4-digit</td></tr>
@c ^<tr>    <td><tt>%z</tt></td>    <td>timezone, [+-]hh:mm</td></tr>
@c ^<tr>    <td><tt>%Z</tt></td>    <td>timezone name, ignored string</td></tr>
@c ^</tbody>
@c ^</table>

For more information on the %W format (ISO week of year) see `tm_week`.
The %U format (CDC/MMWR epidemiological week) is similar to %W except that it
uses weeks that start on Sunday rather than Monday.
Caveat: Both the %W and the %U formats were unreliable in gnuplot versions
prior to 5.4.2.  See unit test "week_date.dem".

The relative time formats express the length of a time interval on either
side of a zero time point.  The relative time formats are


@example
      Format       Explanation
      %tD          +/- days relative to time=0
      %tH          +/- hours relative to time=0 (does not wrap at 24)
      %tM          +/- minutes relative to time=0
      %tS          +/- seconds associated with previous tH or tM field

@end example



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Time Format</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>%tD</tt></td>    <td>+/- days relative to time=0</td></tr>
@c ^<tr>    <td><tt>%tH</tt></td>    <td>+/- hours relative to time=0 (does not wrap at 24)</td></tr>
@c ^<tr>    <td><tt>%tM</tt></td>    <td>+/- minutes relative to time=0</td></tr>
@c ^<tr>    <td><tt>%tS</tt></td>    <td>+/- seconds associated with previous tH or tM field</td></tr>
@c ^</tbody>
@c ^</table>

Numerical formats may be preceded by a "0" ("zero") to pad the field with
leading zeroes, and preceded by a positive digit to define the minimum field
width.  The %S, and %t formats also accept a precision specifier so that
fractional hours/minutes/seconds can be written.



@noindent --- EXAMPLES ---

@c ?commands set format date_specifiers examples
@c ?commands set format time_specifiers examples
@c ?set format date_specifiers examples
@c ?set format time_specifiers examples
@c ?set date_specifiers examples
@c ?set time_specifiers examples
@c ?date_specifiers examples
@c ?time_specifiers examples

Examples of date format:

Suppose the x value in seconds corresponds a time slightly before midnight
on 25 Dec 1976. The text printed for a tic label at this position would be

@example
      set format x                 # defaults to "12/25/76 \n 23:11"
      set format x "%A, %d %b %Y"  # "Saturday, 25 Dec 1976"
      set format x "%r %D"         # "11:11:11 pm 12/25/76"
      set xtics time format "%B"   # "December"

@end example

Examples of time format:

The date format specifiers encode a time in seconds as a clock time on a
particular day.  So hours run only from 0-23, minutes from 0-59, and negative
values correspond to dates prior to the epoch (1-Jan-1970). In order to report
a time value in seconds as some number of hours/minutes/seconds relative to a
time 0, use time formats %tH %tM %tS.  To report a value of -3672.50 seconds

@example
      set format x                 # default date format "12/31/69 \n 22:58"
      set format x "%tH:%tM:%tS"   # "-01:01:12"
      set format x "%.2tH hours"   # "-1.02 hours"
      set format x "%tM:%.2tS"     # "-61:12.50"

@end example


@node grid, hidden3d, format__, set-show
@subsection grid

@c ?commands set grid
@c ?commands unset grid
@c ?commands show grid
@c ?set grid
@c ?set grid vertical
@c ?unset grid
@c ?show grid
@cindex grid
@opindex grid


The `set grid` command allows grid lines to be drawn on the plot.

Syntax:
@example
      set grid @{@{no@}@{m@}xtics@} @{@{no@}@{m@}ytics@} @{@{no@}@{m@}ztics@}
               @{@{no@}@{m@}x2tics@} @{@{no@}@{m@}y2tics@} @{@{no@}@{m@}rtics@}
               @{@{no@}@{m@}cbtics@}
               @{polar @{<angle>@}@}
               @{layerdefault | front | back@}
               @{@{no@}vertical@}
               @{<line-properties-major> @{, <line-properties-minor>@}@}
      unset grid
      show grid

@end example

The grid can be enabled and disabled for the major and/or minor tic
marks on any axis, and the linetype and linewidth can be specified
for major and minor grid lines, also via a predefined linestyle, as
far as the active terminal driver supports this (see `set style line`).

A polar grid can be drawn for 2D plots.  This is the default action of
`set grid` if the program is already in polar mode, but can be enabled
explicitly by @ref{rtics} whether or not the program is in
polar mode.  Circles are drawn to intersect major and/or minor tics along the
r axis, and radial lines are drawn with a spacing of <angle>.  Tic marks
around the perimeter are controlled by @ref{ttics}, but these do not produce
radial grid lines.

The pertinent tics must be enabled before `set grid` can draw them; `gnuplot`
will quietly ignore instructions to draw grid lines at non-existent tics, but
they will appear if the tics are subsequently enabled.

If no linetype is specified for the minor gridlines, the same linetype as the
major gridlines is used.  The default polar angle is 30 degrees.

If `front` is given, the grid is drawn on top of the graphed data. If
`back` is given, the grid is drawn underneath the graphed data. Using
`front` will prevent the grid from being obscured by dense data. The
default setup, `layerdefault`, is equivalent to `back` for 2D plots.
In 3D plots the default is to split up the grid and the graph box into
two layers: one behind, the other in front of the plotted data and
functions. Since @ref{hidden3d} mode does its own sorting, it ignores
all grid drawing order options and passes the grid lines through the
hidden line removal machinery instead. These options actually affect
not only the grid, but also the lines output by @ref{border} and the
various ticmarks (see `set xtics`).

In 3D plots grid lines at x- and y- axis tic positions are by default drawn
only on the base plane parallel to z=0.  The `vertical` keyword activates
drawing grid lines in the xz and yz planes also, running from zmin to zmax.

Z grid lines are drawn on the bottom of the plot.  This looks better if a
partial box is drawn around the plot---see @ref{border}.

@node hidden3d, history_, grid, set-show
@subsection hidden3d

@c ?commands set hidden3d
@c ?commands unset hidden3d
@c ?commands show hidden3d
@c ?set hidden3d
@c ?unset hidden3d
@c ?show hidden3d
@cindex hidden3d
@opindex hidden3d


@cindex nohidden3d

The @ref{hidden3d} command enables hidden line removal for surface plotting
(see `splot`).  Some optional features of the underlying algorithm can also
be controlled using this command.

Syntax:
@example
      set hidden3d @{defaults@} |
                   @{ @{front|back@}
                     @{@{offset <offset>@} | @{nooffset@}@}
                     @{trianglepattern <bitpattern>@}
                     @{@{undefined <level>@} | @{noundefined@}@}
                     @{@{no@}altdiagonal@}
                     @{@{no@}bentover@} @}
      unset hidden3d
      show hidden3d

@end example

In contrast to the usual display in gnuplot, hidden line removal actually
treats the given function or data grids as real surfaces that can't be seen
through, so plot elements behind the surface will be hidden by it.  For this
to work, the surface needs to have 'grid structure' (see @ref{datafile}
about this), and it has to be drawn `with lines` or @ref{linespoints}.

When @ref{hidden3d} is set, both the hidden portion of the surface and possibly
its contours drawn on the base (see `set contour`) as well as the grid will
be hidden.  Each surface has its hidden parts removed with respect to itself
and to other surfaces, if more than one surface is plotted.  Contours drawn
on the surface (`set contour surface`) don't work.

@ref{hidden3d} also affects 3D plotting styles `points`, @ref{labels}, @ref{vectors}, and
@ref{impulses} even if no surface is present in the graph.
Unobscured portions of each vector are drawn as line segments (no arrowheads).
Individual plots within the graph may be explicitly excluded from this
processing by appending the extra option `nohidden3d` to the `with` specifier.

Hidden3d does not affect solid surfaces drawn using the pm3d mode. To achieve
a similar effect purely for pm3d surfaces, use instead `set pm3d depthorder`.
To mix pm3d surfaces with normal @ref{hidden3d} processing, use the option
`set hidden3d front` to force all elements included in hidden3d processing to
be drawn after any remaining plot elements, including the pm3d surface.

Functions are evaluated at isoline intersections.  The algorithm interpolates
linearly between function points or data points when determining the visible
line segments.  This means that the appearance of a function may be different
when plotted with @ref{hidden3d} than when plotted with `nohidden3d` because in
the latter case functions are evaluated at each sample.  Please see
@ref{samples} and @ref{isosamples} for discussion of the difference.

The algorithm used to remove the hidden parts of the surfaces has some
additional features controllable by this command.  Specifying `defaults` will
set them all to their default settings, as detailed below.  If `defaults` is
not given, only explicitly specified options will be influenced: all others
will keep their previous values, so you can turn on/off hidden line removal
via `set @{no@}hidden3d`, without modifying the set of options you chose.

The first option, `offset`, influences the linetype used for lines on the
'back' side.  Normally, they are drawn in a linetype one index number higher
than the one used for the front, to make the two sides of the surface
distinguishable.  You can specify a different linetype offset to add
instead of the default 1, by `offset <offset>`.  Option `nooffset` stands for
`offset 0`, making the two sides of the surface use the same linetype.

Next comes the option `trianglepattern <bitpattern>`.  <bitpattern> must be
a number between 0 and 7, interpreted as a bit pattern.  Each bit determines
the visibility of one edge of the triangles each surface is split up into.
Bit 0 is for the 'horizontal' edges of the grid, Bit 1 for the 'vertical'
ones, and Bit 2 for the diagonals that split each cell of the original grid
into two triangles.  The default pattern is 3, making all horizontal and
vertical lines visible, but not the diagonals.  You may want to choose 7 to
see those diagonals as well.

The `undefined <level>` option lets you decide what the algorithm is to do
with data points that are undefined (missing data, or undefined function
values), or exceed the given x-, y- or z-ranges.  Such points can either be
plotted nevertheless, or taken out of the input data set.  All surface
elements touching a point that is taken out will be taken out as well, thus
creating a hole in the surface.  If <level> = 3, equivalent to option
`noundefined`, no points will be thrown away at all.  This may produce all
kinds of problems elsewhere, so you should avoid this.  <level> = 2 will
throw away undefined points, but keep the out-of-range ones.  <level> = 1,
the default, will get rid of out-of-range points as well.

By specifying `noaltdiagonal`, you can override the default handling of a
special case can occur if @ref{undefined} is active (i.e. <level> is not 3).
Each cell of the grid-structured input surface will be divided in two
triangles along one of its diagonals.  Normally, all these diagonals have
the same orientation relative to the grid.  If exactly one of the four cell
corners is excluded by the @ref{undefined} handler, and this is on the usual
diagonal, both triangles will be excluded.  However if the default setting
of `altdiagonal` is active, the other diagonal will be chosen for this cell
instead, minimizing the size of the hole in the surface.

The `bentover` option controls what happens to another special case, this
time in conjunction with the `trianglepattern`.  For rather crumply surfaces,
it can happen that the two triangles a surface cell is divided into are seen
from opposite sides (i.e. the original quadrangle is 'bent over'), as
illustrated in the following ASCII art:

@example
                                                              C----B
    original quadrangle:  A--B      displayed quadrangle:     |\   |
      ("set view 0,0")    | /|    ("set view 75,75" perhaps)  | \  |
                          |/ |                                |  \ |
                          C--D                                |   \|
                                                              A    D

@end example

If the diagonal edges of the surface cells aren't generally made visible by
bit 2 of the <bitpattern> there, the edge CB above wouldn't be drawn at all,
normally, making the resulting display hard to understand.  Therefore, the
default option of `bentover` will turn it visible in this case.  If you don't
want that, you may choose `nobentover` instead.
D hidden 6
See also
@uref{http://www.gnuplot.info/demo/hidden.html,hidden line removal demo (hidden.dem)
}
and
@uref{http://www.gnuplot.info/demo/singulr.html,complex hidden line demo (singulr.dem).
}

@node history_, isosamples, hidden3d, set-show
@subsection history

@c ?commands set history
@c ?set history
Syntax:
@example
   set history @{size <N>@} @{quiet|numbers@} @{full|trim@} @{default@}

@end example

A log of recent gnuplot commands is kept by default in $HOME/.gnuplot_history.
If this file is not found and xdg desktop support is enabled, the program will
instead use $XDG_STATE_HOME/gnuplot_history.

When leaving gnuplot the value of history size limits the number of lines
saved to the history file. `set history size -1` allows an unlimited number
of lines to be written to the history file.

By default the @ref{history} command prints a line number in front of each command.
`history quiet` suppresses the number for this command only.
`set history quiet` suppresses numbers for all future @ref{history} commands.

The @ref{trim} option reduces the number of duplicate lines in the history list
by removing earlier instances of the current command.

Default settings: @ref{trim}.

@node isosamples, isosurface_, history_, set-show
@subsection isosamples

@c ?commands set isosamples
@c ?commands show isosamples
@c ?set isosamples
@c ?show isosamples
@cindex isosamples
@opindex isosamples


The isoline density (grid) for plotting functions as surfaces may be changed
by the @ref{isosamples} command.

Syntax:
@example
      set isosamples <iso_1> @{,<iso_2>@}
      show isosamples

@end example

Each function surface plot will have <iso_1> iso-u lines and <iso_2> iso-v
lines.  If you only specify <iso_1>, <iso_2> will be set to the same value
as <iso_1>.  By default, sampling is set to 10 isolines per u or v axis.
A higher sampling rate will produce more accurate plots, but will take longer.
These parameters have no effect on data file plotting.

An isoline is a curve parameterized by one of the surface parameters while
the other surface parameter is fixed.  Isolines provide a simple means to
display a surface.  By fixing the u parameter of surface s(u,v), the iso-u
lines of the form c(v) = s(u0,v) are produced, and by fixing the v parameter,
the iso-v lines of the form c(u) = s(u,v0) are produced.

When a function surface plot is being done without the removal of hidden
lines, @ref{samples}  controls the number of points sampled along each
isoline;  see @ref{samples} and @ref{hidden3d}. The contour algorithm
assumes that a function sample occurs at each isoline intersection, so
change in @ref{samples} as well as @ref{isosamples} may be desired when changing
the resolution of a function surface/contour.

@node isosurface_, isotropic, isosamples, set-show
@subsection isosurface

@c ?commands set isosurface
@c ?commands show isosurface
@c ?set isosurface
@c ?show isosurface
Syntax:
@example
     set isosurface @{mixed|triangles@}
     set isosurface @{no@}insidecolor <n>
@end example

Surfaces plotted by the command @ref{isosurface} are by
default constructed from a mixture of quadrangles and triangles.  The use
of quadrangles creates a less complicated visual impression.
This command provides an option to tessellate with only triangles.

By default the inside of an isosurface is drawn in a separate color.
The method of choosing that color is the same as for hidden3d surfaces,
where an offset <n> is added to the base linetype.  To draw both the inside
and outside surfaces in the same color, use `set isosurface noinsidecolor`.

@node isotropic, jitter, isosurface_, set-show
@subsection isotropic

@c ?commands set isotropic
@c ?set isotropic
@cindex isotropic
@opindex isotropic


Syntax:
@example
     set isotropic
     unset isotropic
@end example

@ref{isotropic} adjusts the aspect ratio and size of the plot so that the
unit length along the x, y, and z axes is the same.  It is equivalent to
`set size ratio -1; set view equal xyz` and supersedes both of those commands.
This affects both 2D and 3D plots.

@ref{isotropic} relaxes both the 2D and 3D constraints. It is equivalent to
the older commands `set size noratio; set view noequal_axes` but hopefully
easier to remember.

@node jitter, key_, isotropic, set-show
@subsection jitter

@c ?commands set jitter
@c ?set jitter
@cindex jitter
@opindex jitter


@cindex beeswarm

Syntax:
@example
      set jitter @{overlap <yposition>@} @{spread <factor>@} @{wrap <limit>@}
                 @{swarm|square|vertical@}
@end example

Examples:
@example
      set jitter                    # jitter points within 1 character width
      set jitter overlap 1.5        # jitter points within 1.5 character width
      set jitter over 1.5 spread 0.5  # same but half the displacement on x

@end example

When one or both coordinates of a data set are restricted to discrete values
then many points may lie exactly on top of each other.  Jittering introduces an
offset to the coordinates of these superimposed points that spreads them into a
cluster.  The threshold value for treating the points as being overlapped may
be specified in character widths or any of the usual coordinate options.
See `coordinates`.  Jitter affects 2D plot styles `with points`,
@ref{impulses} and @ref{boxplot}. It also affects 3D plotting of voxel grids.

The default jittering operation displaces points only along x.
This produces a distinctive pattern sometimes called a "bee swarm plot".
The optional keyword `square` adjusts the y coordinate of displaced points
in addition to their x coordinate so that the points lie in distinct layers
separated by at least the `overlap` distance.

To jitter along y (only) rather than along x, use keyword `vertical`.

The maximum displacement (in character units) can be limited using the `wrap`
keyword.

Note that both the overlap criterion and the magnitude of jitter default to
one character unit.  Thus the plot appearance will change with the terminal
font size, canvas size, or zoom factor.  To avoid this you can specify the
overlap criterion in the y axis coordinate system (the `first` keyword) and
adjust the point size and spread multiplier as appropriate.
See `coordinates`, @ref{pointsize}.

Caveat: jitter is incompatible with "pointsize variable".

@ref{jitter} is also useful in 3D plots of voxel data.  Because voxel grids
are regular lattices of evenly spaced points, many view angles cause points
to overlap and/or generate Moiré patterns.  These artifacts can be removed
by displacing the symbol drawn at each grid point by a random amount.

@node key_, label, jitter, set-show
@subsection key

@c ?commands set key
@c ?commands unset key
@c ?commands show key
@c ?set key
@c ?unset key
@c ?show key
@cindex key
@opindex key


@cindex nokey

@cindex legend

The `set key` command enables a key (or legend) containing a title and a
sample (line, point, box) for each plot in the graph. The key may be turned off
by requesting `set key off` or `unset key`.  Individual key entries may be
turned off by using the `notitle` keyword in the corresponding plot command.
The text of the titles is controlled by the `set key autotitle` option or by
the @ref{title} keyword of individual `plot` and `splot` commands.

See `key placement` for syntax of options that affect where the key is placed.
See `key layout` for syntax of options that affect the content of the key.

Syntax (global options):
@example
      set key @{on|off@} @{default@}
            @{font "<face>,<size>"@} @{@{no@}enhanced@}
            @{@{no@}title "<text>" @{<font or other text options>@}@}
            @{@{no@}autotitle @{columnheader@}@}
            @{@{no@}box @{<line properties>@}@} @{@{no@}opaque @{fc <colorspec>@}@}
            @{width <width_increment>@} @{height <height_increment>@}
      unset key

@end example

By default the key is placed in the upper right inside corner of the graph.
The optional `font` becomes the default for all elements of the key.
You can provide an option title for the key as a whole that spans the full
width of the key at the top.  This title can use different font, color,
justification, and enhancement from individual plot titles.

Each component in a plot command is represented in the key by a single line
containing corresponding title text and a line or symbol or shape
representing the plot style.  The title text may be auto-generated or given
explicitly in the plot command as `title "text"`.  Using the keyword `notitle`
in the plot command will suppress generation of the entire line.
If you want to suppress the text only, use `title ""` in the plot command.

Contour plots generated additional entries in the key (see @ref{cntrlabel}).
You can add extra lines to the key by inserting a dummy plot command that uses
the keyword `keyentry` rather than a filename or a function.  See `keyentry`.

A box can be drawn around the key (`box @{...@}`) with user-specified line
properties.  The `height` and `width` increments (specified in character units)
are added to or subtracted from the size of the key box.
This is useful mainly when you want larger borders around the key entries.

By default the key is built up one plot at a time. That is, the key symbol and
title are drawn at the same time as the corresponding plot.  That means newer
plots may sometimes place elements on top of the key.  `set key opaque` causes
the key to be generated after all the plots.  In this case the key area is
filled with background color or the requested fill color and then the key
symbols and titles are written.
The default can be restored by `set key noopaque`.

The text in the key uses `enhanced` mode by default. This can be suppressed
by the `noenhanced` keyword applied to the entire key, to the key title only,
or to individual plot titles.

`set key default` restores the default key configuration.
@example
     set key notitle
     set key nobox noopaque
     set key fixed right top vertical Right noreverse enhanced autotitle
     set key noinvert samplen 4 spacing 1 width 0 height 0
     set key maxcolumns 0 maxrows 0

@end example


@menu
* 3D_key::
* key_examples::
* extra_key_entries::
* key_autotitle::
* key_layout::
* key_placement::
* key_offset::
* key_samples::
* multiple_keys::
@end menu

@node 3D_key, key_examples, key_, key_
@subsubsection 3D key

@c ?set key 3D
@c ?set key splot
@c ?key 3D
@c ?key splot
@c ?set key fixed
@c ?key fixed
Placement of the key for 3D plots (`splot`) by default uses the `fixed` option.
This is very similar to `inside` placement with one important difference.
The plot boundaries of a 3D plot change as the view point is rotated or scaled.
If the key is positioned `inside` these boundaries then the key also moves when
the view is changed. `fixed` positioning ignores changes to the view angles or
scaling; i.e. the key remains fixed in one location on the canvas as the plot
is rotated.

For 2D plots the `fixed` option is exactly equivalent to `inside`.

If `splot` is being used to draw contours, by default a separate key entry is
generated for each contour level with a distinct line type.
To modify this see @ref{cntrlabel}.

@node key_examples, extra_key_entries, 3D_key, key_
@subsubsection key examples

@c ?set key examples
@c ?key examples
This places the key at the default location:
@example
      set key default

@end example

This places a key at a specific place (upper right) on the screen:
@example
      set key at screen 0.85, 0.85

@end example

This places the key below the graph and minimizes the vertical space taken:
@example
      set key below horizontal

@end example

This places the key in the bottom left corner of the plot,
left-justifies the text, gives the key box a title at the top,
and draws a box around it with a thick border:
@example
      set key left bottom Left title 'Legend' box lw 3

@end example


@node extra_key_entries, key_autotitle, key_examples, key_
@subsubsection extra key entries

@c ?key entries
@cindex keyentry

Normally each plot autogenerates a single line entry in the key.  If you need
more control over what appears in the key you can use the `keyentry` keyword
in the `plot` or `splot` command to insert extra lines.  Instead of providing
a filename or function to plot, use `keyentry` as a placeholder followed by
plot style information (used to generate a key symbol) and a title.
All the usual options for title font, text color, `at` coordinates, and
enhanced text markup apply.
Example:
@example
     set key outside right center
     plot $HEATMAP matrix with image notitle, \
          keyentry "Outcomes" left, \
          keyentry with boxes fc palette cb 0 title "no effect", \
          keyentry with boxes fc palette cb 1 title "threshold", \
          keyentry with boxes fc palette cb 3 title "typical range", \
          keyentry                            title "as reported in [12]", \
          keyentry with boxes fc palette cb 5 title "strong effect"

@end example

The line generated by `keyentry "Outcomes" left` places left-justified text
in the space that would normally hold the sample. This allows an embedded
title that may span the full width of the key.  If a title is given also in
the same keyentry then both strings appear on the same line, allowing
generation of two-column key entries.
You can use keywords `left/right/center` for justification, `boxed`, etc.
Example:
@example
     plot ..., keyentry "West Linn" boxed title "locations"

@end example

@node key_autotitle, key_layout, extra_key_entries, key_
@subsubsection key autotitle

@c ?commands set key autotitle
@c ?set key autotitle
@c ?key autotitle
@cindex autotitle

@c ?autotitle columnheader
@c ?key autotitle columnheader
`set key autotitle` causes each plot to be identified in the key by the name
of the data file or function used in the plot command. This is the default.
`set key noautotitle` disables the automatic generation of plot titles.
@cindex columnheader

The command `set key autotitle columnheader` causes the first entry in each
column of input data to be interpreted as a text string and used as a title for
the corresponding plot. If the quantity being plotted is a function of data
from several columns, gnuplot may be confused as to which column to draw the
title from. In this case it is necessary to specify the column explicitly in
the plot command, e.g.

@example
      plot "datafile" using (($2+$3)/$4) title columnhead(3) with lines

@end example

Note: The effect of `set key autotitle columnheader`, treatment of the first
line in a data file as column headers rather than data applies even if the
key is disabled by `unset key`.  It also applies to `stats` and @ref{fit} commands
even though they generate no key.  If you want the first line of data to be
treated as column headers but _not_ to use them for plot titles, use
@ref{columnheaders}.

In all cases an explicit @ref{title} or `notitle` keyword in the plot command
itself will override the default from `set key autotitle`.

@node key_layout, key_placement, key_autotitle, key_
@subsubsection key layout

@c ?set key layout
@c ?key layout
Key layout options:
@example
     set key @{vertical | horizontal@}
            @{maxcols @{<max no. of columns> | auto@}@}
            @{maxrows @{<max no. of rows> | auto@}@}
            @{columns <exact no. of columns>@}
            @{keywidth [screen|graph] <fraction>@}
            @{Left | Right@}
            @{@{no@}reverse@} @{@{no@}invert@}
            @{samplen <sample_length>@} @{spacing <line_spacing>@}
            @{width <width_increment>@} @{height <height_increment>@}
            @{title @{"<text>"@} @{@{no@}enhanced@} @{center | left | right@}@}
            @{font "<face>,<size>"@} @{textcolor <colorspec>@}

@end example

Automatic arrangement of elements within the key into rows and columns is
affected by the keywords shown above.  The default is `vertical`, for which
the key uses the fewest columns possible.  Elements are aligned in a column
until there is no more vertical space, at which point a new column is started.
The vertical space may be limited using 'maxrows'.
In the case of `horizontal`, the key instead uses the fewest rows possible.
The horizontal space may be limited using 'maxcols'.

The auto-selected number of rows and columns may be unsatisfactory.
You can specify a definite number of columns using `set key columns <N>`.
In this case you may need to adjust the sample widths (`samplen`) and the
total key width (`keywidth`).

By default the first plot label is at the top of the key and successive labels
are entered below it. The `invert` option causes the first label to be placed
at the bottom of the key, with successive labels entered above it. This option
is useful to force the vertical ordering of labels in the key to match the
order of box types in a stacked histogram.

`set key title "text"` places an overall title at the top of the key.
Font, text justification, and other text properties specific to the title can
be specified by placing the required keywords immediately after the
`"text"` in this command.
Font or text properties specified elsewhere apply to all text in the key.

The default layout places a style sample (color, line, point, shape, etc) at
the left of the key entry line, and the title text at the right.
The text and sample positions can be swapped using the `reverse` keyword.
Text justification of the individual plot titles within the key is controlled
by `Left` or `Right` (default).
The horizontal extend of the style sample can be set to an approximate number
of character width (`samplen`).

When using the TeX/LaTeX group of terminals or terminals in which formatting
information is embedded in the string, `gnuplot` is bad at estimating the
amount of space required, so the automatic key layout may be poor.
If the key is to be positioned at the left, it may help to use the combination
`set key left Left reverse` and force the appropriate number of columns or
total key width.


@node key_placement, key_offset, key_layout, key_
@subsubsection key placement

@c ?commands set key placement
@c ?set key placement
@c ?key placement
Key placement options:
@example
      set key @{inside | outside | fixed@}
              @{lmargin | rmargin | tmargin | bmargin@}
              @{at <position>@}@}
              @{left | right | center@} @{top | bottom | center@}
              @{offset <dx>,<dy>@}

@end example

This section describes placement of the primary, auto-generated key.
To construct a secondary key or place plot titles elsewhere, see
`multiple keys`.

To understand positioning, the best concept is to think of a region, i.e.,
inside/outside, or one of the margins.  Along with the region, keywords
`left/center/right` (l/c/r) and `top/center/bottom` (t/c/b) control where
within the particular region the key should be placed.
In `inside` mode, the keywords `left` (l), `right` (r), `top` (t),
`bottom` (b), and `center` (c) push the key out toward the plot boundary as
illustrated here:


@example
     t/l   t/c   t/r

@end example

@example
     c/l    c    c/r

@end example

@example
     b/l   b/c   b/r

@end example


In `outside` mode, automatic placement is similar to the above illustration,
but with respect to the view, rather than the graph boundary.
That is, a border is moved inward to make room for the key outside of
the plotting area, although this may interfere with other labels and may
cause an error on some devices.  The particular plot border that is moved
depends upon the position described above and the stacking direction.  For
options centered in one of the dimensions, there is no ambiguity about which
border to move.  For the corners, when the stack direction is `vertical`, the
left or right border is moved inward appropriately.  When the stack direction
is `horizontal`, the top or bottom border is moved inward appropriately.

The margin syntax allows automatic placement of key regardless of stack
direction.  When one of the margins @ref{lmargin} (lm), @ref{rmargin} (rm),
@ref{tmargin} (tm), and @ref{bmargin} (bm) is combined with a single, non-conflicting
direction keyword, the key is positioned along the outside of the page
as shown here.
Keywords `above` and `over` are synonymous with @ref{tmargin}.
Keywords `below` and `under` are synonymous with @ref{bmargin}.


@example
          l/tm  c/tm  r/tm

@end example

@example
     t/lm                  t/rm

@end example

@example
     c/lm                  c/rm

@end example

@example
     b/lm                  b/rm

@end example

@example
          l/bm  c/bm  r/bm

@end example



For version compatibility, `above`, `over`, `below`, or `under` without any
additional l/c/r or stack direction keyword uses `center` and `horizontal`.
The keyword `outside` without any additional t/b/c or stack direction keyword
uses `top`, `right` and `vertical` (i.e., the same as t/rm above).

The <position> can be a simple x,y,z as in previous versions, but these can
be preceded by one of five keywords (`first`, `second`, `graph`, `screen`,
`character`) which selects the coordinate system in which the position of
the first sample line is specified.  See `coordinates` for more details.
The effect of `left`, `right`, `top`, `bottom`, and `center` when <position>
is given is to align the key as though it were text positioned using the
label command, i.e., `left` means left align with key to the right of
<position>, etc.

@node key_offset, key_samples, key_placement, key_
@subsubsection key offset

@c ?commands set key offset
@c ?set key offset
@c ?key offset
Regardless of the key placement options chosen, the final position of the key
can be adjusted manually by specifying an offset.  As usual, the x and y
components of the offset may be given in character, graph, or screen
coordinates.

@node key_samples, multiple_keys, key_offset, key_
@subsubsection key samples

@c ?commands set key samples
@c ?set key samples
@c ?key samples
By default, each plot on the graph generates a corresponding entry in the key.
This entry contains a plot title and a sample line/point/box of the same color
and fill properties as used in the plot itself.  The font and textcolor
properties control the appearance of the individual plot titles that appear in
the key. Setting the textcolor to "variable" causes the text for each key
entry to be the same color as the line or fill color for that plot.
This was the default in some earlier versions of gnuplot.

The length of the sample line can be controlled by `samplen`.  The sample
length is computed as the sum of the tic length and <sample_length> times the
character width.  It also affects the positions of point samples in the key
since these are drawn at the midpoint of the sample line, even if the line
itself is not drawn.

Key entry lines are single-spaced based on the current font size.
This can be adjusted by `set key spacing <line-spacing>`.

The <width_increment> is a number of character widths to be added to or
subtracted from the length of the string.  This is useful only when you are
putting a box around the key and you are using control characters in the text.
`gnuplot` simply counts the number of characters in the string when computing
the box width; this allows you to correct it.

@node multiple_keys,  , key_samples, key_
@subsubsection multiple keys

@c ?multiple keys
@c ?set key multiple keys
@c ?key multiple keys
@cindex legend

It is possible to construct a legend/key manually rather than having the plot
titles all appear in the auto-generated key. This allows, for example, creating
a single legend for the component panels in a multiplot.
@example
       set multiplot layout 3,2 columnsfirst
       set style data boxes
       plot $D using 0:6  lt 1 title at 0.75, 0.20
       plot $D using 0:12 lt 2 title at 0.75, 0.17
       plot $D using 0:13 lt 3 title at 0.75, 0.14
       plot $D using 0:14 lt 4 title at 0.75, 0.11
       set label 1 at screen 0.75, screen 0.22 "Custom combined key area"
       plot $D using 0:($6+$12+$13+$14) with linespoints title "total"
       unset multiplot

@end example

@node label, linetype, key_, set-show
@subsection label

@c ?commands set label
@c ?commands unset label
@c ?commands show label
@c ?set label
@c ?unset label
@c ?show label
@cindex label
@opindex label


@cindex nolabel

Arbitrary labels can be placed on the plot using the `set label` command.

Syntax:
@example
      set label @{<tag>@} @{"<label text>"@} @{at <position>@}
                @{left | center | right@}
                @{norotate | rotate @{by <degrees>@}@}
                @{font "<name>@{,<size>@}"@}
                @{noenhanced@}
                @{front | back@}
                @{textcolor <colorspec>@}
                @{point <pointstyle> | nopoint@}
                @{offset <offset>@}
                @{nobox@} @{boxed @{bs <boxstyle>@}@}
                @{hypertext@}
      unset label @{<tag>@}
      show label

@end example

The <position> is specified by either x,y or x,y,z, and may be preceded by
`first`, `second`, `polar`, `graph`, `screen`, or `character` to indicate the
coordinate system.  See `coordinates` for details.

The tag is an integer that is used to identify the label. If no <tag>
is given, the lowest unused tag value is assigned automatically.  The
tag can be used to delete or modify a specific label.  To change any
attribute of an existing label, use the `set label` command with the
appropriate tag, and specify the parts of the label to be changed.

The <label text> can be a string constant, a string variable, or a string-
valued expression. See `strings`, @ref{sprintf}, and @ref{gprintf}.

By default, the text is placed flush left against the point x,y,z.  To adjust
the way the label is positioned with respect to the point x,y,z, add the
justification parameter, which may be `left`, `right` or `center`,
indicating that the point is to be at the left, right or center of the text.
Labels outside the plotted boundaries are permitted but may interfere with
axis labels or other text.

Some terminals support enclosing the label in a box.  See `set style textbox`.
Not all terminals can handle boxes for rotated text.

If `rotate` is given, the label is written vertically. If `rotate by <degrees>`
is given, the baseline of the text will be set to the specified angle.
Some terminals do not support text rotation.

Font and its size can be chosen explicitly by `font "<name>@{,<size>@}"` if the
terminal supports font settings.  Otherwise the default font of the terminal
will be used.

Normally the enhanced text mode string interpretation, if enabled for the
current terminal, is applied to all text strings including label text.
The `noenhanced` property can be used to exempt a specific label from the
enhanced text mode processing.  The can be useful if the label contains
underscores, for example. See `enhanced text`.

If `front` is given, the label is written on top of the graphed data. If
`back` is given (the default), the label is written underneath the graphed
data.  Using `front` will prevent a label from being obscured by dense data.

`textcolor <colorspec>` changes the color of the label text. <colorspec> can be
a linetype, an rgb color, or a palette mapping. See help for @ref{colorspec} and
@ref{palette}.  `textcolor` may be abbreviated `tc`.
@example
   `tc default` resets the text color to its default state.
   `tc lt <n>` sets the text color to that of line type <n>.
   `tc ls <n>` sets the text color to that of line style <n>.
   `tc palette z` selects a palette color corresponding to the label z position.
   `tc palette cb <val>` selects a color corresponding to <val> on the colorbox.
   `tc palette fraction <val>`, with 0<=val<=1, selects a color corresponding to
       the mapping [0:1] to grays/colors of the @ref{palette}.
   `tc rgb "#RRGGBB"` or `tc rgb "0xRRGGBB"` sets an arbitrary 24-bit RGB color.
   `tc rgb 0xRRGGBB`  As above; a hexadecimal constant does not require quotes.

@end example

If a <pointstyle> is given, using keywords `lt`, `pt` and `ps`, see @ref{style},
a point with the given style and color of the given line type is plotted at
the label position and the text of the label is displaced slightly.
This option is used by default for placing labels in `mouse` enhanced
terminals.  Use `nopoint` to turn off the drawing of a point near
the label (this is the default).

The displacement defaults to 1,1 in @ref{pointsize} units if a <pointstyle> is
given, 0,0 if no <pointstyle> is given.  The displacement can be controlled
by the optional `offset <offset>` where <offset> is specified by either x,y
or x,y,z, and may be preceded by `first`, `second`, `graph`, `screen`, or
`character` to select the coordinate system.  See `coordinates` for details.

If one (or more) axis is timeseries, the appropriate coordinate should be
given as a quoted time string according to the @ref{timefmt} format string.
See @ref{xdata} and @ref{timefmt}.

The options available for `set label` are also available for the @ref{labels} plot
style. See @ref{labels}.  In this case the properties `textcolor`, `rotate`, and
@ref{pointsize} may be followed by keyword `variable` rather than by a fixed value.
In this case the corresponding property of individual labels is determined by
additional columns in the `using` specifier.


@menu
* examples_::
* hypertext::
@end menu

@node examples_, hypertext, label, label
@subsubsection examples

@c ?label examples
@c ?set label examples
Examples:

To set a label at (1,2) to "y=x", use:
@example
      set label "y=x" at 1,2

@end example

To set a Sigma of size 24, from the Symbol font set, at the center of
the graph, use:
@example
      set label "S" at graph 0.5,0.5 center font "Symbol,24"

@end example

To set a label "y=x^2" with the right of the text at (2,3,4), and tag the
label as number 3, use:
@example
      set label 3 "y=x^2" at 2,3,4 right

@end example

To change the preceding label to center justification, use:
@example
      set label 3 center

@end example

To delete label number 2, use:
@example
      unset label 2

@end example

To delete all labels, use:
@example
      unset label

@end example

To show all labels (in tag order), use:
@example
      show label

@end example

To set a label on a graph with a timeseries on the x axis, use, for example:
@example
      set timefmt "%d/%m/%y,%H:%M"
      set label "Harvest" at "25/8/93",1

@end example

To display a freshly fitted parameter on the plot with the data and the
fitted function, do this after the @ref{fit}, but before the `plot`:
@example
      set label sprintf("a = %3.5g",par_a) at 30,15
      bfit = gprintf("b = %s*10^%S",par_b)
      set label bfit at 30,20

@end example

To display a function definition along with its fitted parameters, use:
@example
      f(x)=a+b*x
      fit f(x) 'datafile' via a,b
      set label GPFUN_f at graph .05,.95
      set label sprintf("a = %g", a) at graph .05,.90
      set label sprintf("b = %g", b) at graph .05,.85

@end example

To set a label displaced a little bit from a small point:
@example
      set label 'origin' at 0,0 point lt 1 pt 2 ps 3 offset 1,-1

@end example

To set a label whose color matches the z value (in this case 5.5) of some
point on a 3D splot colored using pm3d:
@example
      set label 'text' at 0,0,5.5 tc palette z

@end example

@node hypertext,  , examples_, label
@subsubsection hypertext

@cindex hypertext

@c ?label hypertext
@c ?set label hypertext
Some terminals (wxt, qt, svg, canvas, win) allow you to attach hypertext
to specific points on the graph or elsewhere on the canvas. When the mouse
hovers over the anchor point, a pop-up box containing the text is displayed.
Terminals that do not support hypertext will display nothing. You must enable
the `point` attribute of the label in order for the hypertext to be anchored.
Enhanced text markup is not applied to hypertext labels.
Examples:
@example
      set label at 0,0 "Plot origin" hypertext point pt 1
      plot 'data' using 1:2:0 with labels hypertext point pt 7 \
           title 'mouse over point to see its order in data set'

@end example

@example
      # mousing over any point of this pm3d surface will display
      # its Z coordinate as hypertext
      splot '++' using 1:2:(F($1,$2)) with pm3d, \
            '++' using 1:2:(F($1,$2)):(sprintf("%.3f", F($1,$2))) with labels \
                 hypertext point lc rgb "0xff000000" notitle

@end example

For the wxt and qt terminals, left-click on a hypertext anchor after the
text has appeared will copy the hypertext to the clipboard.

@c ^ <br><table class="button"><tr><td>
@c ^     <a href="http://www.gnuplot.info/demo_svg_6.0/hypertext.html"
@c ^      class="button">
@c ^ click to see hypertext demo </a>
@c ^ </td></tr></table>

EXPERIMENTAL (implementation details may change) -
Text of the form "image@{<xsize>,<ysize>@}:<filename>@{\n<caption text>@}" will
trigger display of the image file in a pop-up box. The optional size overrides
a default box size 300x200.  The types of image file recognized may vary by
terminal type, but *.png should always work. Any additional text lines
following the image filename are displayed as usual for hypertext.
Example:
@example
      set label 7 "image:../figures/Fig7_inset.png\nFigure 7 caption..."
      set label 7 at 10,100 hypertext point pt 7

@end example


@node linetype, link, label, set-show
@subsection linetype

@c ?commands set linetype
@c ?commands show linetype
@c ?set linetype
@c ?show linetype
The `set linetype` command allows you to redefine the basic linetypes used
for plots.  The command options are identical to those for "set style line".
Unlike line styles, redefinitions by `set linetype` are persistent.
They are not affected by @ref{reset}.  However the initial linetype properties
are restored by `reset session`.

For example, whatever linetypes one and two look like to begin with, if you
redefine them like this:

@example
      set linetype 1 lw 2 lc rgb "blue" pointtype 6
      set linetype 2 lw 2 lc rgb "forest-green" pointtype 8

@end example

everywhere that uses lt 1 will now get a thick blue line.  This includes
uses such as the definition of a temporary linestyle derived from the base
linetype 1.  Similarly lt 2 will now produce a thick green line.

This mechanism can be used to define a set of personal preferences for the
sequence of lines used in gnuplot.  The recommended way to do this is to add
to the run-time initialization file ~/.gnuplot a sequence of commands like

@example
      set linetype 1 lc rgb "dark-violet" lw 2 pt 1
      set linetype 2 lc rgb "sea-green"   lw 2 pt 7
      set linetype 3 lc rgb "cyan"        lw 2 pt 6 pi -1
      set linetype 4 lc rgb "dark-red"    lw 2 pt 5 pi -1
      set linetype 5 lc rgb "blue"        lw 2 pt 8
      set linetype 6 lc rgb "dark-orange" lw 2 pt 3
      set linetype 7 lc rgb "black"       lw 2 pt 11
      set linetype 8 lc rgb "goldenrod"   lw 2
      set linetype cycle 8

@end example

Every time you run gnuplot the line types will be initialized to these values.
You may initialize as many linetypes as you like. If you do not redefine, say,
linetype 3 then it will continue to have the default properties (in this case
blue, pt 3, lw 1, etc).

Similar script files can be used to define theme-based color choices, or sets
of colors optimized for a particular plot type or output device.

@cindex cycle

The command `set linetype cycle 8` tells gnuplot to re-use these definitions
for the color and linewidth of higher-numbered linetypes.  That is, linetypes
9-16, 17-24, and so on will use this same sequence of colors and widths.
The point properties (pointtype, pointsize, pointinterval) are not affected by
this command.  `unset linetype cycle` disables this feature.  If the line
properties of a higher numbered linetype are explicitly defined, this takes
precedence over the recycled low-number linetype properties.

@node link, lmargin, linetype, set-show
@subsection link

@c ?commands set link
@c ?set link
@cindex link
@opindex link


Syntax:
@example
      set link @{x2 | y2@} @{via <expression1> inverse <expression2>@}
      unset link

@end example

The @ref{link} command establishes a mapping between the x and x2 axes, or the
y and y2 axes.  <expression1> maps primary axis coordinates onto the secondary
axis.  <expression2> maps secondary axis coordinates onto the primary axis.

Examples:

@example
      set link x2

@end example

This is the simplest form of the command. It forces the x2 axis to have
identically the same range, scale, and direction as the x axis.
Commands @ref{xrange}, @ref{x2range}, `set auto x`, etc will affect both the
x and x2 axes.

@example
      set link x2 via x**2 inverse sqrt(x)
      plot "sqrt_data" using 1:2 axes x2y1, "linear_data" using 1:2 axes x1y1

@end example

This command establishes forward and reverse mapping between the x and x2 axes.
The forward mapping is used to generate x2 tic labels and x2 mouse coordinate
The reverse mapping is used to plot coordinates given in the x2 coordinate
system.  Note that the mapping as given is valid only for x non-negative. When
mapping to the y2 axis, both <expression1> and <expression2> must use y as
dummy variable.

@node lmargin, loadpath, link, set-show
@subsection lmargin

@c ?commands set lmargin
@c ?set lmargin
@cindex lmargin
@opindex lmargin


The command @ref{lmargin} sets the size of the left margin.
Please see @ref{margin} for details.

@node loadpath, locale, lmargin, set-show
@subsection loadpath

@c ?commands set loadpath
@c ?commands show loadpath
@c ?set loadpath
@c ?show loadpath
@cindex loadpath
@opindex loadpath


The @ref{loadpath} setting defines additional locations for data and command
files searched by the @ref{call}, `load`, `plot` and `splot` commands.  If a
file cannot be found in the current directory, the directories in
@ref{loadpath} are tried.

Syntax:
@example
      set loadpath @{"pathlist1" @{"pathlist2"...@}@}
      show loadpath

@end example

Path names may be entered as single directory names, or as a list of
path names separated by a platform-specific path separator, eg. colon
(':') on Unix, semicolon (';') on DOS/Windows/OS/2 platforms.
The @ref{loadpath}, @ref{save} and `save set` commands replace the
platform-specific separator with a space character (' ').

If the environment variable GNUPLOT_LIB is set, its contents are appended to
@ref{loadpath}.  However, @ref{loadpath} prints the contents of @ref{loadpath}
and GNUPLOT_LIB separately.  Also, the @ref{save} and `save set` commands ignore
the contents of GNUPLOT_LIB.

@node locale, logscale, loadpath, set-show
@subsection locale

@c ?commands set locale
@c ?set locale
@cindex locale
@opindex locale


The @ref{locale} setting determines the language with which `@{x,y,z@}@{d,m@}tics`
will write the days and months.

Syntax:
@example
      set locale @{"<locale>"@}

@end example

<locale> may be any language designation acceptable to your installation.
See your system documentation for the available options.  The command
`set locale ""` will try to determine the locale from the LC_TIME, LC_ALL,
or LANG environment variables.

To change the decimal point locale, see @ref{decimalsign}.
To change the character encoding to the current locale, see @ref{encoding}.

@node logscale, macros, locale, set-show
@subsection logscale

@c ?commands set logscale
@c ?commands unset logscale
@c ?commands show logscale
@c ?set logscale
@c ?unset logscale
@c ?show logscale
@c ?set log
@cindex logscale
@opindex logscale


@cindex nologscale

Syntax:
@example
      set logscale <axes> @{<base>@}
      unset logscale <axes>
      show logscale

@end example

where <axes> may be any combinations of `x`, `x2`, `y`, `y2`, `z`, `cb`, and
`r` in any order.  <base> is the base of the log scaling (default is base 10).
If no axes are specified, the command affects all axes except `r`.
The command @ref{logscale} turns off log scaling for all axes.
Note that the ticmarks generated for logscaled axes are not uniformly spaced.
See `set xtics`.

Examples:

To enable log scaling in both x and z axes:
@example
      set logscale xz

@end example

To enable scaling log base 2 of the y axis:
@example
      set logscale y 2

@end example

To enable z and color log axes for a pm3d plot:
@example
      set logscale zcb

@end example

To disable z axis log scaling:
@example
      unset logscale z

@end example

@node macros, mapping, logscale, set-show
@subsection macros

@c ?commands set macros
@c ?set macros
In this version of gnuplot macro substitution is always enabled.
Tokens in the command line of the form @@<stringvariablename> will be replaced
by the text string contained in <stringvariablename>. See `substitution`.

@node mapping, margin, macros, set-show
@subsection mapping

@c ?commands set mapping
@c ?commands show mapping
@c ?set mapping
@c ?show mapping
@cindex mapping
@opindex mapping


If data are provided to `splot` in spherical or cylindrical coordinates,
the @ref{mapping} command should be used to instruct `gnuplot` how to
interpret them.

Syntax:
@example
      set mapping @{cartesian | spherical | cylindrical@}

@end example

A cartesian coordinate system is used by default.

For a spherical coordinate system, the data occupy two or three columns
(or `using` entries).  The first two are interpreted as the azimuthal
and polar angles theta and phi (or "longitude" and "latitude"), in the
units specified by @ref{angles}.  The radius r is taken from the third
column if there is one, or is set to unity if there is no third column.
The mapping is:

@example
      x = r * cos(theta) * cos(phi)
      y = r * sin(theta) * cos(phi)
      z = r * sin(phi)

@end example

Note that this is a "geographic" spherical system, rather than a "polar"
one (that is, phi is measured from the equator, rather than the pole).

For a cylindrical coordinate system, the data again occupy two or three
columns.  The first two are interpreted as theta (in the units specified by
@ref{angles}) and z.  The radius is either taken from the third column or set
to unity, as in the spherical case.  The mapping is:

@example
      x = r * cos(theta)
      y = r * sin(theta)
      z = z

@end example

The effects of @ref{mapping} can be duplicated with the `using` specifier of the
`splot` command, but @ref{mapping} may be more convenient if many data files are
to be processed.  However even if @ref{mapping} is used, `using` may still be
necessary if the data in the file are not in the required order.

@ref{mapping} has no effect on `plot`.
@c ^ See also
@uref{http://www.gnuplot.info/demo/world.html,world.dem: mapping demos.
}

@node margin, micro, mapping, set-show
@subsection margin

@c ?commands set margins
@c ?commands show margins
@c ?set margin
@c ?set margins
@c ?show margins
@cindex margins

The @ref{margin} is the distance between the plot border and the outer edge of the
canvas. The size of the margin is chosen automatically, but can be overridden
by the @ref{margin} commands.  @ref{margin} shows the current settings.
To alter the distance between the inside of the plot border and the data in the
plot itself, see @ref{offsets}.

Syntax:
@example
      set lmargin @{@{at screen@} <margin>@}
      set rmargin @{@{at screen@} <margin>@}
      set tmargin @{@{at screen@} <margin>@}
      set bmargin @{@{at screen@} <margin>@}
      set margins <left>, <right>, <bottom>, <top>
      show margin

@end example

The default units of <margin> are character heights or widths, as appropriate.
A positive value defines the absolute size of the margin.  A negative value
(or none) causes `gnuplot` to revert to the computed value.  For 3D plots,
only the left margin can be set using character units.

The keywords `at screen` indicates that the margin is specified as a fraction
of the full drawing area. This can be used to precisely line up the corners of
individual 2D and 3D graphs in a multiplot. This placement ignores the current
values of @ref{origin} and @ref{size}, and is intended as an alternative
method for positioning graphs within a multiplot.

Normally the margins of a plot are automatically calculated based on tics,
tic labels, axis labels, the plot title, the timestamp and the size of the
key if it is outside the borders.  If, however, tics are attached to the
axes (`set xtics axis`, for example), neither the tics themselves nor their
labels will be included in either the margin calculation or the calculation
of the positions of other text to be written in the margin.  This can lead
to tic labels overwriting other text if the axis is very close to the border.

@node micro, minussign, margin, set-show
@subsection micro

@c ?commands set micro
@c ?commands show micro
@c ?commands unset micro
@c ?set micro
@c ?show micro
@c ?unset micro
@cindex micro
@opindex micro


By default the "%c" format specifier for scientific notation used to generate
axis tick labels uses a lower case u as a prefix to indicate "micro" (10^-6).
The @ref{micro} command tells gnuplot to use a different typographic
character (unicode U+00B5).  The byte sequence used to represent this character
depends on the current encoding.  See `format specifiers`, @ref{encoding}.

If the current encoding default is not satisfactory, you can provide a
character string that generates the desired representation.  This is mostly
useful for latex terminals, for example
@example
     set micro "@{\textmu@}"

@end example


@node minussign, monochrome, micro, set-show
@subsection minussign

@c ?commands set minussign
@c ?commands show minussign
@c ?commands unset minussign
@c ?set minussign
@c ?show minussign
@c ?unset minussign
@cindex minussign
@opindex minussign


Gnuplot uses the C language library routine sprintf() for most formatted input.
However it also has its own formatting routine `gprintf()` that is used to
generate axis tic labels. The C library routine always use a hyphen character
(ascii \055) to indicate a negative number, as in -7.  Many people prefer a
different typographic minus sign character (unicode U+2212) for this purpose,
as in −7.  The command

@example
     set minussign

@end example

causes gprintf() to use this minus sign character rather than a hyphen in
numeric output. In a utf-8 locale this is the multibyte sequence corresponding
to unicode U+2212.  In a Window codepage 1252 locale this is the 8-bit
character ALT+150 ("en dash").  The @ref{minussign} command will affect axis
tic labels and any labels that are created by explicitly invoking gprintf.
It has no effect on other strings that contain a hyphen.  See @ref{gprintf}.

Note that this command is ignored when you are using any of the LaTeX
terminals, as LaTeX has its own mechanism for handling minus signs.
It also is not necessary when using the postscript terminal because the
postscript prologue output by gnuplot remaps the ascii hyphen code \055 to a
different glyph named `minus`.

Example (assumes utf8 locale):

@example
     set minus
     A = -5
     print "A = ",A                 # printed string will contain a hyphen
     print gprintf("A = %g",A)      # printed string will contain character U+2212
     set label "V = -5"             # label will contain a hyphen
     set label sprintf("V = %g",-5) # label will contain a hyphen
     set label gprintf("V = %g",-5) # label will contain character U+2212

@end example

@node monochrome, mouse, minussign, set-show
@subsection monochrome

@c ?commands set monochrome
@c ?set monochrome
@cindex monochrome
@opindex monochrome


Syntax:
@example
     set monochrome @{linetype N <linetype properties>@}

@end example

The @ref{monochrome} command selects an alternative set of linetypes that
differ by dot/dash pattern or line width rather than by color.  This command
replaces the monochrome option offered by certain terminal types in earlier
versions of gnuplot.  For backward compatibility these terminal types now
implicitly invoke "set monochrome" if their own "mono" option is present.
For example,
@example
     set terminal pdf mono
@end example

is equivalent to
@example
     set terminal pdf
     set mono

@end example

Selecting monochrome mode does not prevent you from explicitly drawing lines
using RGB or palette colors, but see also @ref{gray}.
Six monochrome linetypes are defined by default.  You can change their
properties or add additional monochrome linetypes by using the full form of the
command.  Changes made to the monochrome linetypes do not affect the color
linetypes and vice versa.  To restore the usual set of color linetypes, use
either @ref{monochrome} or `set color`.

@node mouse, mttics, monochrome, set-show
@subsection mouse

@c ?commands set mouse
@c ?commands unset mouse
@c ?set mouse
@c ?unset mouse
@cindex mousing

@cindex mouse
@opindex mouse


@cindex nomouse

The command `set mouse` enables mouse actions for the current interactive
terminal.  It is enabled by default.

There are two mouse modes. The 2D mode works for `plot` commands and for `splot`
maps (i.e. @ref{view} with z-rotation 0, 90, 180, 270 or 360 degrees, including
`set view map`).  In this mode the mouse position is tracked and you can pan or
zoom using the mouse buttons or arrow keys.  Some terminals support toggling
individual plots on/off by clicking on the corresponding key title or on a
separate widget.

For 3D graphs `splot`, the view and scaling of the graph can be changed with
mouse buttons 1 and 2, respectively. A vertical motion of Button 2 with the
shift key held down changes the @ref{xyplane}.  If additionally to these
buttons the modifier <ctrl> is held down, the coordinate axes are displayed
but the data are suppressed.  This is useful for large data sets.
Mouse button 3 controls the azimuth of the z axis (see @ref{azimuth}).

Mousing coordinate readout in multiplot mode is displayed only with for the
most recent plot within the multiplot.  See `new multiplots`.

Syntax:
@example
      set mouse @{doubleclick <ms>@} @{nodoubleclick@}
                @{@{no@}zoomcoordinates@}
                @{zoomfactors <xmultiplier>, <ymultiplier>@}
                @{noruler | ruler @{at x,y@}@}
                @{polardistance@{deg|tan@} | nopolardistance@}
                @{format <string>@}
                @{mouseformat <int> | <string> | function <f(x,y)>@}
                @{@{no@}labels @{"labeloptions"@}@}
                @{@{no@}zoomjump@} @{@{no@}verbose@}
      unset mouse

@end example

The options `noruler` and `ruler` switch the ruler off and on, the latter
optionally setting the origin at the given coordinates. While the ruler is on,
the distance in user units from the ruler origin to the mouse is displayed
continuously. By default, toggling the ruler has the key binding 'r'.

The option `polardistance` determines if the distance between the mouse cursor
and the ruler is also shown in polar coordinates (distance and angle in
degrees or tangent (slope)). This corresponds to the default key binding '5'.

@cindex labels

Choose the option @ref{labels} to define persistent gnuplot labels using Button 2.
The default is `nolabels`, which makes Button 2 draw only a temporary label at
the mouse position. Labels are drawn with the current setting of @ref{mouseformat}.
The `labeloptions` string is passed to the `set label` command.  The default is
"point pointtype 1" which will plot a small plus at the label position.
Temporary labels will disappear at the next @ref{replot} or mouse zoom operation.
Persistent labels can be removed by holding the Ctrl-Key down while clicking
Button 2 on the label's point. The threshold for how close you must be to the
label is also determined by the @ref{pointsize}.

If the option `verbose` is turned on the communication commands are shown
during execution. This option can also be toggled by hitting `6` in the
driver's window. `verbose` is off by default.

Press 'h' in the driver's window for a summary of the mouse and key bindings.
This will also display user defined bindings or `hotkeys` defined by the
`bind` command. Note that user defined binding may override default bindings.
See also help for `bind`.

@menu
* doubleclick::
* format___::
* mouseformat::
* scrolling::
* zoom::
@end menu

@node doubleclick, format___, mouse, mouse
@subsubsection doubleclick

@c ?set mouse doubleclick
@c ?mouse doubleclick
The doubleclick resolution is given in milliseconds and used for Button 1,
which copies the current mouse position to the `clipboard` on some terminals.
The default value is 300 ms.  Setting the value to 0 ms triggers the copy on
a single click.

@node format___, mouseformat, doubleclick, mouse
@subsubsection format

@c ?set mouse format
@c ?mouse format
The `set mouse format` command specifies a format string for sprintf() which
determines how the mouse cursor [x,y] coordinates are printed to the plot
window and to the clipboard.  The default is "% #g".

This setting is superseded by "set mouse mouseformat".

@node mouseformat, scrolling, format___, mouse
@subsubsection mouseformat

@c ?set mouse mouseformat
@cindex mouseformat

Syntax:
@example
     set mouse mouseformat i
     set mouse mouseformat "custom format"
     set mouse mouseformat function string_valued_function(x, y)
@end example

This command controls the format used to report the current mouse position.
An integer argument selects one of the format options in the table below.
A string argument is used as a format for sprintf() in option 7 and should
contain two float specifiers, one for x and one for y.

Use of a custom function returning a string is EXPERIMENTAL.
It allows readout of coordinate systems in which inverse mapping from screen
coordinates to plot coordinates requires joint consideration of both x and y.
See for example the map_projection demo.

Example:
@example
     set mouse mouseformat "mouse x,y = %5.2g, %10.3f"
@end example

Use `set mouse mouseformat ""` to turn this string off again.

The following formats are available:

@example
 0   default (same as 1)
 1   axis coordinates                    1.23, 2.45
 2   graph coordinates (from 0 to 1)    /0.00, 1.00/
 3   x = timefmt     y = axis           [(as set by @ref{timefmt}), 2.45]
 4   x = date        y = axis           [31. 12. 1999, 2.45]
 5   x = time        y = axis           [23:59, 2.45]
 6   x = date time   y = axis           [31. 12. 1999 23:59, 2.45]
 7   format from `set mouse mouseformat <format-string>`
 8   format from `set mouse mouseformat function <func>`

@end example

@node scrolling, zoom, mouseformat, mouse
@subsubsection scrolling

@c ?set mouse scrolling
@c ?mouse scrolling
@c ?mouse wheel
@cindex scrolling

@cindex mousewheel

The mouse wheel adjusts x and y axis ranges in both 2D and 3D plots.
Each adjustment increment is 10% of the current range by default.
This may be changed by `set mouse zoomfactor <x-multiplier>, <y-multiplier>`.
@itemize @bullet
@item
<wheel-up> scrolls y and y2 axis ranges up by a fraction of the current range
@item
<wheel-down> scrolls y and y2 ranges down by a fraction of the current range
@item
<shift+wheel-up> scrolls left (decreases x and x2 ranges)
@item
<shift+wheel-down> scrolls right (increases x and x2 ranges)
@item
<control+wheel-up> zooms in around the current mouse position
@item
<control+wheel-down> zooms out around the current mouse position
@item
<shift+control+wheel-up> zooms in only along x and x2 (pinch)
@item
<shift+control+wheel-down> zooms out only along x and x2 (expand)
@end itemize

@node zoom,  , scrolling, mouse
@subsubsection zoom

@c ?mouse zoom
@cindex zoom

Proportional zoom in/out around the current mouse position is controlled
by the mouse wheel (see @ref{scrolling}).

Enlarging a selected region in a 2D plot is accomplished by holding down the
left mouse button and dragging the mouse to delineate a zoom region.
The original plot can be restored by typing the 'u' hotkey in the plot window.
Hotkeys 'p' and 'n' step back and forth through a history of zoom operations.

The option `zoomcoordinates` determines if the coordinates of the zoom box are
drawn at the edges while zooming. This is on by default.

If the option `zoomjump` is on, the mouse pointer will automatically offset a
small distance after starting a zoom region with button 3. This can be useful
to avoid a tiny (or even empty) zoom region. `zoomjump` is off by default.


@node mttics, multiplot, mouse, set-show
@subsection mttics

@c ?commands set mttics
@c ?commands unset mttics
@c ?commands show mttics
@c ?set mttics
@c ?unset mttics
@c ?show mttics
@cindex mttics
@opindex mttics


@cindex nomttics

Minor tic marks around the perimeter of a polar plot are controlled by
by @ref{mttics}. Please see `set mxtics`.

@node multiplot, mx2tics, mttics, set-show
@subsection multiplot

@c ?commands set multiplot
@c ?commands unset multiplot
@c ?set multiplot
@c ?unset multiplot
@cindex multiplot
@opindex multiplot


@cindex nomultiplot

@cindex layout

The command @ref{multiplot} places `gnuplot` in multiplot mode, in which
several plots are placed next to each other on the same page or screen window.

Syntax:
@example
      set multiplot
          @{ title <page title> @{font <fontspec>@} @{enhanced|noenhanced@} @}
          @{ layout <rows>,<cols>
            @{rowsfirst|columnsfirst@} @{downwards|upwards@}
            @{scale <xscale>@{,<yscale>@}@} @{offset <xoff>@{,<yoff>@}@}
            @{margins <left>,<right>,<bottom>,<top>@}
            @{spacing <xspacing>@{,<yspacing>@}@}
          @}
      set multiplot @{next|previous@}
      unset multiplot

@end example

For some terminals, no plot is displayed until the command @ref{multiplot}
is given, which causes the entire page to be drawn and then returns gnuplot
to its normal single-plot mode.  For other terminals, each separate `plot`
command produces an updated display.

@cindex inset

The @ref{clear} command is used to erase the rectangular area of the page that will
be used for the next plot.  This is typically needed to inset a small plot
inside a larger plot.

Any labels or arrows that have been defined will be drawn for each plot
according to the current size and origin (unless their coordinates are
defined in the `screen` system).  Just about everything else that can be
`set` is applied to each plot, too.  If you want something to appear only
once on the page, for instance a single time stamp, you'll need to put a `set
time`/`unset time` pair around one of the `plot`, `splot` or @ref{replot}
commands within the @ref{multiplot}/@ref{multiplot} block.

The multiplot title is separate from the individual plot titles, if any.
Space is reserved for it at the top of the page, spanning the full width
of the canvas.

The commands @ref{origin} and @ref{size} must be used to correctly position
each plot if no layout is specified or if fine tuning is desired.  See
@ref{origin} and @ref{size} for details of their usage.

Example:
@example
      set multiplot
      set size 0.4,0.4
      set origin 0.1,0.1
      plot sin(x)
      set size 0.2,0.2
      set origin 0.5,0.5
      plot cos(x)
      unset multiplot

@end example

This displays a plot of cos(x) stacked above a plot of sin(x).

@ref{size} and @ref{origin} refer to the entire plotting area used for each
plot.  Please also see @ref{size}.  If you want to have the axes
themselves line up, you can guarantee that the margins are the same size with
the @ref{margin} commands.  See @ref{margin} for their use.  Note that the
margin settings are absolute, in character units, so the appearance of the
graph in the remaining space will depend on the screen size of the display
device, e.g., perhaps quite different on a video display and a printer.

With the `layout` option you can generate simple multiplots without having
to give the @ref{size} and @ref{origin} commands before each plot:  Those
are generated automatically, but can be overridden at any time.  With
`layout` the display will be divided by a grid with <rows> rows and
<cols> columns.  This grid is filled rows first or columns first depending on
whether the corresponding option is given in the multiplot command.  The stack
of plots can grow `downwards` or `upwards`.
Default is `rowsfirst` and `downwards`.
The commands `set multiplot next` and `set multiplot previous` are relevant
only in the context of using the layout option.  `next` skips the next position
in the grid, leaving a blank space. `prev` returns to the grid position
immediately preceding the most recently plotted position.

Each plot can be scaled by `scale` and shifted with `offset`; if the y-values
for scale or offset are omitted, the x-value will be used.  @ref{multiplot}
will turn off the automatic layout and restore the values of @ref{size} and
@ref{origin} as they were before `set multiplot layout`.

Example:
@example
      set size 1,1
      set origin 0,0
      set multiplot layout 3,2 columnsfirst scale 1.1,0.9
      [ up to 6 plot commands here ]
      unset multiplot

@end example

The above example will produce 6 plots in 2 columns filled top to bottom,
left to right.  Each plot will have a horizontal size of 1.1/2 and a vertical
size of 0.9/3.

Another possibility is to set uniform margins for all plots in the layout with
options `layout margins` and `spacing`, which must be used together. With
`margins` you set the outer margins of the whole multiplot grid.

`spacing` gives the gap size between two adjacent subplots, and can also
be given in `character` or `screen` units. If a single value is given,
it is used for both x and y direction, otherwise two different values
can be selected.

If one value has no unit, the one of the preceding margin setting is used.

Example:
@example
      set multiplot layout 2,2 margins 0.1, 0.9, 0.1, 0.9 spacing 0.0

@end example

In this case the two left-most subplots will have left boundaries at screen
coordinate 0.1, the two right-most subplots will have right boundaries at
screen coordinate 0.9, and so on.  Because the spacing between subplots is
given as 0, their inner boundaries will superimpose.

Example:
@example
      set multiplot layout 2,2 margins char 5,1,1,2 spacing screen 0, char 2

@end example

This produces a layout in which the boundary of both left subplots is
5 character widths from the left edge of the canvas, the right boundary of the
right subplots is 1 character width from the canvas edge.
The overall bottom margin is one character height and the overall top margin
is 2 character heights. There is no horizontal gap between the two columns of
subplots. The vertical gap between subplots is equal to 2 character heights.

Example:
@example
      set multiplot layout 2,2 columnsfirst margins 0.1,0.9,0.1,0.9 spacing 0.1
      set ylabel 'ylabel'
      plot sin(x)
      set xlabel 'xlabel'
      plot cos(x)
      unset ylabel
      unset xlabel
      plot sin(2*x)
      set xlabel 'xlabel'
      plot cos(2*x)
      unset multiplot

@end example

See also @ref{remultiplot}, `new multiplots`,
@uref{http://www.gnuplot.info/demo/multiplt.html,multiplot demo (multiplt.dem)
}

@node mx2tics, mxtics, multiplot, set-show
@subsection mx2tics

@c ?commands set mx2tics
@c ?commands unset mx2tics
@c ?commands show mx2tics
@c ?set mx2tics
@c ?unset mx2tics
@c ?show mx2tics
@cindex mx2tics
@opindex mx2tics


@cindex nomx2tics

Minor tic marks along the x2 (top) axis are controlled by @ref{mx2tics}.
Please see `set mxtics`.

@node mxtics, my2tics, mx2tics, set-show
@subsection mxtics

@c ?commands set mxtics
@c ?commands unset mxtics
@c ?commands show mxtics
@c ?set mxtics
@c ?unset mxtics
@c ?show mxtics
@cindex mxtics
@opindex mxtics


@cindex nomxtics

Minor tic marks along the x axis are controlled by `set mxtics`.  They can be
turned off with `unset mxtics`.  Similar commands control minor tics along
the other axes.

Syntax:
@example
      set mxtics <freq>
      set mxtics default
      set mxtics time <N> <units>
      unset mxtics
      show mxtics

@end example

The same syntax applies to @ref{mytics}, @ref{mztics}, @ref{mx2tics}, @ref{my2tics}, `mrtics`,
@ref{mttics} and `mcbtics`.

<freq> is the number of sub-intervals (NOT the number of minor tic marks)
between major tics. The default for a linear axis is either 2 (one mark) or
5 (four marks) depending on the spacing of the major tics.

`default` will return the number of minor ticks to its default value.

`set mxtics time <N> <units>` applies only when the major tics are set to
time mode. See `set mxtics time`.

If the axis is logarithmic, the number of sub-intervals will be set to a
reasonable number by default (based upon the length of a decade).  This will
be overridden if <freq> is given.  However the usual minor tics (2, 3, ...,
8, 9 between 1 and 10, for example) are obtained by setting <freq> to 10,
even though there are but nine sub-intervals.

To set minor tics at arbitrary positions, use the ("<label>" <pos> <level>,
...) form of `set @{x|x2|y|y2|z@}tics` with <label> empty and <level> set to 1.

The `set m@{x|x2|y|y2|z@}tics` commands work only when there are uniformly
spaced major tics.  If all major tics were placed explicitly by
`set @{x|x2|y|y2|z@}tics`, then minor tic commands are ignored.  Implicit
major tics and explicit minor tics can be combined using
`set @{x|x2|y|y2|z@}tics` and `set @{x|x2|y|y2|z@}tics add`.

Examples:
@example
      set xtics 0, 5, 10
      set xtics add (7.5)
      set mxtics 5
@end example

Major tics at 0,5,7.5,10, minor tics at 1,2,3,4,6,7,8,9
@example
      set logscale y
      set ytics format ""
      set ytics 1e-6, 10, 1
      set ytics add ("1" 1, ".1" 0.1, ".01" 0.01, "10^-3" 0.001, \
                     "10^-4" 0.0001)
      set mytics 10
@end example

Major tics with special formatting, minor tics at log positions

By default, minor tics are off for linear axes and on for logarithmic axes.
They inherit the settings for `axis|border` and `@{no@}mirror` specified for
the major tics.  Please see `set xtics` for information about these.

@menu
* mxtics_time::
@end menu

@node mxtics_time,  , mxtics, mxtics
@subsubsection mxtics time

@c ?set mxtics time
@c ?mxtics time
Syntax:
@example
     set mxtics time <N> @{seconds|minutes|hours|days|weeks|months|years@}

@end example

This is a new command option introduced in gnuplot version 6.
It places minor tic marks exactly at some integral number of time units
rather than at some fraction of the major tic interval.

The new default is that minor tics are not generated if the major tics are
in time mode (`set xdata time` or `set xtics time`).

`set mxtics` or `set mxtics <freq>` can restore the pre-version 6 behavior
but this was always problematic.  For example, automatic subdivision of a
72-year span placed major tics at 12-year intervals and minor tics at
5-year intervals.

Using `set mxtics time 2 years`, however, will place a minor tic mark exactly
at the start of alternate years. `set mxtics time 1 month` will place tic
marks exactly at 1 Jan, 1 Feb, 1 Mar, 1 Apr, ... even though those intervals
contain an unequal number of days.


@node my2tics, mytics, mxtics, set-show
@subsection my2tics

@c ?commands set my2tics
@c ?commands unset my2tics
@c ?commands show my2tics
@c ?set my2tics
@c ?unset my2tics
@c ?show my2tics
@cindex my2tics
@opindex my2tics


@cindex nomy2tics

Minor tic marks along the y2 (right-hand) axis are controlled by @ref{my2tics}.  Please see `set mxtics`.

@node mytics, mztics, my2tics, set-show
@subsection mytics

@c ?commands set mytics
@c ?commands unset mytics
@c ?commands show mytics
@c ?set mytics
@c ?unset mytics
@c ?show mytics
@cindex mytics
@opindex mytics


@cindex nomytics

Minor tic marks along the y axis are controlled by @ref{mytics}.  Please
see `set mxtics`.

@node mztics, nonlinear, mytics, set-show
@subsection mztics

@c ?commands set mztics
@c ?commands unset mztics
@c ?commands show mztics
@c ?set mztics
@c ?unset mztics
@c ?show mztics
@cindex mztics
@opindex mztics


@cindex nomztics

Minor tic marks along the z axis are controlled by @ref{mztics}.  Please
see `set mxtics`.

@node nonlinear, object, mztics, set-show
@subsection nonlinear

@c ?commands set nonlinear
@c ?set nonlinear
@cindex nonlinear
@opindex nonlinear


Syntax:
@example
      set nonlinear <axis> via f(axis) inverse g(axis)
      unset nonlinear <axis>

@end example

This command is similar to the @ref{link} command except that only one of the
two linked axes is visible.  The hidden axis remains linear. Coordinates along
the visible axis are mapped by applying g(x) to hidden axis coordinates.
f(x) maps the visible axis coordinates back onto the hidden linear axis.
You must provide both the forward and inverse expressions.

To illustrate how this works, consider the case of a log-scale x2 axis.

@example
      set x2ange [1:1000]
      set nonlinear x2 via log10(x) inverse 10**x

@end example

This achieves the same effect as `set log x2`.  The hidden axis in this case
has range [0:3], obtained by calculating [log10(xmin):log10(xmax)].

The transformation functions f() and g() must be defined using a
dummy variable appropriate to the nonlinear axis:
@example
    axis: x x2   dummy variable x
    axis: y y2   dummy variable y
    axis: z cb   dummy variable z
    axis: r      dummy variable r

@end example

@c ?set nonlinear examples
@c ?nonlinear examples
Example:

@example
      set xrange [-3:3]
      set nonlinear x via norm(x) inverse invnorm(x)

@end example

This example establishes a probability-scaled ("probit") x axis, such that
plotting the cumulative normal function Phi(x) produces a straight line plot
against a linear y axis.

@cindex logit

Example:

@example
      logit(p) = log(p/(1-p))
      logistic(a) = 1. / (1. + exp(-a))
      set xrange [.001 : .999]
      set nonlinear y via logit(y) inverse logistic(y)
      plot logit(x)

@end example

This example establishes a logit-scaled y axis such that plotting logit(x)
on a linear x axis produces a straight line plot.

@cindex broken axis

Example:

@example
      f(x) = (x <= 100) ? x : (x < 500) ? NaN : x-390
      g(x) = (x <= 100) ? x : x+390
      set xrange [0:1000] noextend
      set nonlinear x via f(x) inverse g(x)
      set xtics add (100,500)
      plot sample [x=1:100] x, [x=500:1000] x

@end example

This example creates a "broken axis". X coordinates 0-100 are at the left,
X coordinates 500-1000 are at the right, there is a small gap (10 units)
between them.  So long as no data points with (100 < x < 500) are plotted,
this works as expected.

@node object, offsets, nonlinear, set-show
@subsection object

@cindex objects

@c ?commands set object
@c ?commands show object
@c ?set object
@c ?object depthorder
@c ?show object
The @ref{object} command defines a single object which will appear in
subsequent plots. You may define as many objects as you like. Currently the
supported object types are @ref{rectangle}, `circle`, `ellipse`, and `polygon`.
Rectangles inherit a default set of style properties (fill, color, border) from
those set by the command @ref{rectangle}. Every object can be given
individual style properties when it is defined or in a later command.

Objects to be drawn in 2D plots may be defined in any combination of
axis, graph, polar, or screen coordinates.
Object specifications in 3D plots cannot use graph coordinates.
Rectangles and ellipses in 3D plots are limited to screen coordinates.

Syntax:
@example
    set object <index>
        <object-type> <object-properties>
        @{front|back|behind|depthorder@}
        @{clip|noclip@}
        @{fc|fillcolor <colorspec>@} @{fs <fillstyle>@}
        @{default@} @{lw|linewidth <width>@} @{dt|dashtype <dashtype>@}
    unset object <index>

@end example

<object-type> is either @ref{rectangle}, `ellipse`, `circle`, or `polygon`.
Each object type has its own set of characteristic properties.

The options `front`, `back`, `behind` control whether the object is drawn
before or after the plot itself. See @ref{layers}.
Setting `front` will draw the object in front of all plot elements, but
behind any labels that are also marked `front`. Setting `back` will place the
object behind all plot curves and labels. Setting `behind` will place the
object behind everything including the axes and `back` rectangles, thus
@example
    set object rectangle from screen 0,0 to screen 1,1 behind
@end example

can be used to provide a colored background for the entire graph or page.

By default, objects are clipped to the graph boundary unless one or more
vertices are given in screen coordinates.  Setting `noclip` will disable
clipping to the graph boundary, but will still clip against the screen size.

The fill color of the object is taken from the <colorspec>. @ref{fillcolor}
may be abbreviated `fc`.  The fill style is taken from <fillstyle>.
See @ref{colorspec} and `fillstyle`.  If the keyword `default` is given,
these properties are inherited from the default settings at the time a plot
is drawn. See @ref{rectangle}.

@menu
* rectangle::
* ellipse::
* circle::
* polygon::
@end menu

@node rectangle, ellipse, object, object
@subsubsection rectangle

@cindex rectangle

@c ?commands set object rectangle
@c ?commands show object rectangle
@c ?set object rectangle
@c ?show object rectangle
Syntax:
@example
    set object <index> rectangle
        @{from <position> @{to|rto@} <position> |
         center <position> size <w>,<h> |
         at <position> size <w>,<h>@}

@end example

The position of the rectangle may be specified by giving the position of two
diagonal corners (bottom left and top right) or by giving the position of the
center followed by the width and the height.  In either case the positions
may be given in axis, graph, or screen coordinates. See `coordinates`.
The options `at` and `center` are synonyms.

Examples:
@example
    # Force the entire area enclosed by the axes to have background color cyan
    set object 1 rect from graph 0, graph 0 to graph 1, graph 1 back
    set object 1 rect fc rgb "cyan" fillstyle solid 1.0

@end example

@example
    # Position a red square with lower left at 0,0 and upper right at 2,3
    set object 2 rect from 0,0 to 2,3 fc lt 1

@end example

@example
    # Position an empty rectangle (no fill) with a blue border
    set object 3 rect from 0,0 to 2,3 fs empty border rgb "blue"

@end example

@example
    # Return fill and color to the default style but leave vertices unchanged
    set object 2 rect default

@end example

Rectangle corners specified in screen coordinates may extend beyond the edge of
the current graph. Otherwise the rectangle is clipped to fit in the graph.


@node ellipse, circle, rectangle, object
@subsubsection ellipse

@cindex ellipse

@c ?commands set object ellipse
@c ?commands show object ellipse
@c ?set object ellipse
@c ?show object ellipse
Syntax:
@example
    set object <index> ellipse @{at|center@} <position> size <w>,<h>
        @{angle <orientation>@} @{units xy|xx|yy@}
        @{<other-object-properties>@}

@end example

The position of the ellipse is specified by giving the center followed by
the width and the height (actually the major and minor axes). The keywords
`at` and `center` are synonyms.  The center position may be given in axis,
graph, or screen coordinates. See `coordinates`. The major and minor axis
lengths must be given in axis coordinates.  The orientation of the ellipse
is specified by the angle between the horizontal axis and the major diameter
of the ellipse.  If no angle is given, the default ellipse orientation
will be used instead (see `set style ellipse`).  The `units` keyword
controls the scaling of the axes of the ellipse. `units xy` means that the
major axis is interpreted in terms of units along the x axis, while the
minor axis in that of the y axis. `units xx` means that both axes of the
ellipses are scaled in the units of the x axis, while `units yy` means
that both axes are in units of the y axis.
The default is `xy` or whatever `set style ellipse units` was set to.

NB: If the x and y axis scales are not equal, (e.g. `units xy` is in
effect) then the major/minor axis ratio will no longer be correct after
rotation.

Note that `set object ellipse size <2r>,<2r>` does not in general produce
the same result as `set object circle <r>`.  The circle radius is always
interpreted in terms of units along the x axis, and will always produce a
circle even if the x and y axis scales are different and even if the aspect
ratio of your plot is not 1.  If `units` is set to `xy`, then
'set object ellipse' interprets the first <2r> in terms of x axis units
and the second <2r> in terms of y axis units. This will only produce a
circle if the x and y axis scales are identical and the plot aspect ratio
is 1.  On the other hand, if `units` is set to `xx` or `yy`, then the
diameters specified in the 'set object' command will be interpreted in the
same units, so the ellipse will have the correct aspect ratio, and it will
maintain its aspect ratio even if the plot is resized.


@node circle, polygon, ellipse, object
@subsubsection circle

@cindex circle

@c ?commands set object circle
@c ?commands show object circle
@c ?set object circle
@c ?show object circle
Syntax:
@example
    set object <index> circle @{at|center@} <position> size <radius>
        @{arc [<begin>:<end>]@} @{no@{wedge@}@}
        @{<other-object-properties>@}

@end example

The position of the circle is specified by giving the position of the center
center followed by the radius.  The keywords `at` and `center` are synonyms.
In 2D plots the position and radius may be given in any coordinate system.
See `coordinates`. Circles in 3D plots cannot use graph coordinates.
In all cases the radius is calculated relative to the horizontal scale of the
axis, graph, or canvas.  Any disparity between the horizontal and vertical
scaling will be corrected for so that the result is always a circle.
If you want to draw a circle in plot coordinates (such that it will appear as
an ellipse if the horizontal and vertical scales are different), use
`set object ellipse` instead.

By default a full circle is drawn. The optional qualifier `arc` specifies
a starting angle and ending angle, in degrees, for one arc of the circle.
The arc is always drawn counterclockwise.

See also `set style circle`, `set object ellipse`.


@node polygon,  , circle, object
@subsubsection polygon

@cindex polygon

@c ?commands set object polygon
@c ?commands show object polygon
@c ?set object polygon
@c ?show object polygon
Syntax:
@example
    set object <index> polygon
        from <position> to <position> ... @{to <position>@}
@end example

or
@example
        from <position> rto <position> ... @{rto <position>@}

@end example

The position of the polygon may be specified by giving the position of a
sequence of vertices. These may be given in any coordinate system.
If relative coordinates are used (rto) then the coordinate type must match
that of the previous vertex.
See `coordinates`.

Example:
@example
    set object 1 polygon from 0,0 to 1,1 to 2,0
    set object 1 fc rgb "cyan" fillstyle solid 1.0 border lt -1

@end example


@noindent --- DEPTHORDER ---

@c ?polygon depthorder
@c ?set object depthorder
The option `set object N depthorder` applies to 3D polygon objects only.
Rather than assigning the object to layer front/back/behind it is included
in the list of pm3d quadrangles sorted and rendered in order of depth by
`set pm3d depthorder`.  As with pm3d surfaces, two-sided coloring can be
generated by specifying the object fillcolor as a linestyle.  In this
case the ordering of the first three vertices in the polygon determines
the "side".

If you set this property for an object that is not a 3D polygon it probably
will not be drawn at all.

@node offsets, origin, object, set-show
@subsection offsets

@c ?commands set offsets
@c ?commands unset offsets
@c ?commands show offsets
@c ?set offsets
@c ?unset offsets
@c ?show offsets
@cindex offsets
@opindex offsets


@cindex nooffsets

Autoscaling sets the x and y axis ranges to match the coordinates of the data
that is plotted.  Offsets provide a mechanism to expand these ranges to leave
empty space between the data and the plot borders.  Autoscaling then further
extends each range to reach the next axis tic unless this has been suppressed
by @ref{noextend} or @ref{noextend}.  See @ref{noextend}.
Offsets affect only scaling for the x1 and y1 axes.

Syntax:
@example
      set offsets <left>, <right>, <top>, <bottom>
      unset offsets
      show offsets

@end example

Each offset may be a constant or an expression.  Each defaults to 0.
By default, the left and right offsets are given in units of the first x axis,
the top and bottom offsets in units of the first y axis.  Alternatively, you
may specify the offsets as a fraction of the total graph dimension by using the
keyword "graph". Only "graph" offsets are possible for nonlinear axes.

A positive offset expands the axis range in the specified direction, e.g.
a positive bottom offset makes ymin more negative.  Negative offsets interact
badly with autoscaling and clipping.

Example:
@example
      set autoscale noextend
      set offsets graph 0.05, 0, 2, 2
      plot sin(x)

@end example

This graph of sin(x) will have y range [-3:3] because the function will be
autoscaled to [-1:1] and the vertical offsets add 2 at each end of the range.
The x range will be [-11:10] because the default is [-10:10] and it has been
expanded to the left by 0.05 of that total range.

@node origin, output, offsets, set-show
@subsection origin

@c ?commands set origin
@c ?commands show origin
@c ?set origin
@c ?show origin
@cindex origin
@opindex origin


The @ref{origin} command is used to specify the origin of a plotting surface
(i.e., the graph and its margins) on the screen.  The coordinates are given
in the `screen` coordinate system (see `coordinates` for information about
this system).

Syntax:
@example
      set origin <x-origin>,<y-origin>

@end example

@node output, overflow, origin, set-show
@subsection output

@c ?commands set output
@c ?commands show output
@c ?set output
@c ?show output
@cindex output
@opindex output


@c ?output file
Syntax:
@example
      set output @{"<filename>"@}
      unset output
      show output

@end example

Graphs produced by non-interactive terminals are by default sent to `stdout`.
The @ref{output} command redirects output to the specified file or device.
The file opened by this command remains open until a subsequent set/unset
output command, a change in terminal type, or exit from gnuplot.

Interactive terminals ignore @ref{output}.

The filename must be enclosed in quotes.  If the filename is omitted, the
command is equivalent to @ref{output}; any output file opened by a previous
@ref{output} will be closed and new output will be sent to `stdout`.

When both @ref{terminal} and @ref{output} are used together, it is safest to
give @ref{terminal} first, because some terminals set a flag which is needed
in some operating systems.  This would be the case, for example, if the
operating system needs a separate open command for binary files.

On platforms that support pipes, it may be useful to pipe terminal output.
For instance,

@example
      set output "|lpr -Plaser filename"
      set term png; set output "|display png:-"

@end example

On MSDOS machines, `set output "PRN"` directs output to the default printer.

@node overflow, palette__, output, set-show
@subsection overflow

@cindex overflow
@opindex overflow


@c ?commands set overflow
@c ?commands unset overflow
@c ?set overflow
@c ?unset overflow
@c ?show overflow
Syntax:
@example
     set overflow @{float | NaN | undefined@}
     unset overflow

@end example

This version of gnuplot supports 64-bit integer arithmetic.
This means that for values from 2^53 to 2^63 (roughly 10^16 to 10^19)
integer evaluation preserves more precision than evaluation using IEEE 754
floating point arithmetic.  However unlike the IEEE floating point
representation, which sacrifices precision to span a total range of
roughly [-10^307 : 10^307], integer operations that result in values outside
the range [-2^63 : 2^63] overflow.  The @ref{overflow} command lets you
control what happens in case of overflow.  See options below.

@ref{overflow} is the same as @ref{float}. It causes the result to be
returned as a real number rather than as an integer. This is the default.

The command @ref{overflow} causes integer arithmetic overflow to be ignored.
No error is shown.  This may be desirable if your platform allows only 32-bit
integer arithmetic and you want to approximate the behaviour of gnuplot
versions prior to 5.4.

The @ref{reset} command does not affect the state of overflow handling.

Earlier gnuplot versions were limited to 32-bit arithmetic and ignored
integer overflow.  Note, however, that some built-in operators did not
use integer arithmetic at all, even when given integer arguments. This
included the exponentiation operator N**M and the summation operator
(see @ref{summation}).  These operations now return an integer value when
given integer arguments, making them potentially susceptible to overflow
and thus affected by the state of @ref{overflow}.

@menu
* float::
* NaN::
* undefined::
* affected_operations::
@end menu

@node float, NaN, overflow, overflow
@subsubsection float

@c ?set overflow float
@c ?overflow float
If an integer arithmetic expression overflows the limiting range,
[-2^63 : 2^63] for 64-bit integers, the result is returned as a floating
point value instead.  This is not treated as an error.
Example:
@example
     gnuplot> set overflow float
     gnuplot> A = 2**62 - 1;  print A, A+A, A+A+A
     4611686018427387903 9223372036854775806 1.38350580552822e+19

@end example

@node NaN, undefined, float, overflow
@subsubsection NaN

@c ?set overflow NaN
@c ?overflow NaN
@c ?overflow nan
If an integer arithmetic expression overflows the limiting range,
[-2^63 : 2^63] for 64-bit integers, the result is returned as NaN
(Not a Number).  This is not treated as an error.
Example:
@example
     gnuplot> set overflow NaN
     gnuplot> print 10**18, 10**19
     1000000000000000000 NaN

@end example

@node undefined, affected_operations, NaN, overflow
@subsubsection undefined

@c ?set overflow undefined
@c ?overflow undefined
If an integer arithmetic expression overflows the limiting range,
[-2^63 : 2^63] for 64-bit integers, the result is undefined.
This is treated as an error.
Example:
@example
     gnuplot> set overflow undefined
     gnuplot> A = 10**19
                  ^
              undefined value

@end example

@node affected_operations,  , undefined, overflow
@subsubsection affected operations

@c ?set overflow affected_operations
@c ?overflow affected_operations
The @ref{overflow} state affects the arithmetic operators
@example
     + - * / **
@end example

and the built-in summation operation `sum`.

All of these operations will return an integer result if all of the arguments
are integers, so long as no overflow occurs during evaluation.

The @ref{overflow} state does not affect logical or bit operations
@example
     << >>  | ^ &

@end example

If overflow occurs at any point during the course of evaluating of a summation
@ref{float} will cause the result to be returned as a real number even
if the final sum is within the range of integer representation.

@node palette__, parametric_, overflow, set-show
@subsection palette

@c ?commands set palette
@c ?set palette
@cindex palette
@opindex palette


The palette is a set of colors, usually ordered as one or more stepped
gradients, used to color pm3d surfaces, heat maps, and other plot elements.
Colors in the current palette are automatically mapped from plot
coordinate z values or from an extra data column of gray values.
The current palette is shown by default in a separate `colorbox` drawn
next to plots that use plot style `pm3d`. The colorbox can be customized
or disabled. See `set colorbox`.  See also @ref{palette} and @ref{palette}.

Syntax:
@example
      set palette
      set palette @{
                 @{ gray | color @}
                 @{ gamma <gamma> @}
                 @{   rgbformulae <r>,<g>,<b>
                   | defined @{ ( <gray1> <color1> @{, <grayN> <colorN>@}... ) @}
                   | file '<filename>' @{datafile-modifiers@}
                   | colormap <colormap-name>
                   | functions <R>,<G>,<B>
                 @}
                 @{ cubehelix @{start <val>@} @{cycles <val>@} @{saturation <val>@} @}
                 @{ viridis @}
                 @{ model @{ RGB | CMY | HSV @{start <radians>@} @} @}
                 @{ positive | negative @}
                 @{ nops_allcF | ps_allcF @}
                 @{ maxcolors <maxcolors> @}
               @}

@end example

A palette can be defined in several ways.
- Provide formulae for the red, green, and blue components as a function
of the gray value between 0 and 1.
@ref{rgbformulae} allows you to choose from 36 predefined formulae.
@ref{functions} allows you to define your own functions.
- Use @ref{defined} to specify one or more smooth gradients,
each spanning one segment of the total z range.
- Load a previously save palette into the current palette.
`Set palette file` reads a saved palette from a file.
@ref{colormap} extracts the RGB components from a saved colormap.
- Specify a named palette, perhaps with additional parameters to customize.
The named palettes currently provided are @ref{cubehelix} (a customizable family
of palettes) and @ref{viridis}.

@ref{palette} (without options) restores the default values.

`set palette negative` inverts the direction of the palette, e.g.
`set palette viridis negative` creates a gradient from yellow to blue rather
than from blue to yellow.

@ref{gray} switches to a grayscale palette.
`set palette color` restores the most recent color palette.

In `pm3d` color surfaces the gray value of each small quadrangle is obtained by
mapping the averaged z-coordinate of its 4 corners from the range [min_z,max_z]
into the range of grays, which is always [0:1].
The palette maps that gray value into an RGB color.

Palette colors can be mentioned explicitly in a color specification (see
@ref{colorspec}). This is useful to assign a palette color to an object or label.

The palette can be defined in any of three color spaces: RGB CMY HSV.
See `set palette model`.
All color component values in all color spaces are limited to [0,1].


@menu
* rgbformulae::
* defined::
* functions_::
* gray::
* cubehelix::
* viridis::
* colormap_::
* file::
* gamma_correction::
* maxcolors::
* Color_model::
* postscript::
@end menu

@node rgbformulae, defined, palette__, palette__
@subsubsection rgbformulae

@c ?commands set palette rgbformulae
@c ?set palette rgbformulae
@c ?palette rgbformulae
@cindex rgbformulae

@cindex colors

@example
     set palette rgbformulae <function 1>, <function 2>, <function 3>
@end example

Despite its name, this option applies to all color spaces.
You must specify one of 36 preset mapping functions by number for each color
component.  The available functions are listed by @ref{rgbformulae}.
The default is `set palette rgbformulae 7,5,15`.  In RGB space this uses
function 7 to map the red component, function 5 to map the green component,
and function 15 to map the blue component.  A negative function number
inverts the sense of that component by mapping f(1-gray) rather than f(gray).

Some nice schemes in RGB color space
@example
   7,5,15   ... default (black-blue-red-yellow)
   3,11,6   ... green-red-violet
   23,28,3  ... ocean (green-blue-white)
   21,22,23 ... hot (black-red-yellow-white)
   30,31,32 ... black-blue-violet-yellow-white
   33,13,10 ... rainbow (blue-green-yellow-red)
   34,35,36 ... AFM hot (black-red-yellow-white)

@end example

A full color palette in HSV color space
@example
   3,2,2    ... red-yellow-green-cyan-blue-magenta-red

@end example


@node defined, functions_, rgbformulae, palette__
@subsubsection defined

@c ?commands set palette defined
@c ?set palette defined
@c ?palette defined
@cindex colors

Gray-to-rgb mapping can be manually set by use of @ref{defined}:
A color gradient is defined and used to give the rgb values.  Such a gradient
is a piecewise linear mapping from gray values in [0,1] to the RGB space
[0,1]x[0,1]x[0,1].  You must specify the gray values and the corresponding RGB
values between which linear interpolation will be done.

Syntax:
@example
      set palette  defined @{ ( <gray1> <color1> @{, <grayN> <colorN>@}... ) @}

@end example

where N ≥ 2 and <grayN> are gray values which are mapped to [0,1].
The corresponding rgb color <colorN> can be specified in three different ways:

@example
     <color> :=  @{ <r> <g> <b> | '<color-name>' | '#rrggbb' @}

@end example

Either by three numbers (each in [0,1]) for red, green and blue, separated by
whitespace, or the name of the color in quotes or X style color specifiers
also in quotes.  You may freely mix the three types in a gradient definition,
but the named color "red" will be something strange if RGB is not selected
as color space.  Use @ref{colornames} for a list of known color names.

The <gray> values must form an ascending sequence of real numbers;
the sequence will be automatically rescaled to [0,1].

@ref{defined} (without a gradient definition in braces) switches to
RGB color space and uses a preset full-spectrum color gradient.
Use `show palette gradient` to display the gradient.

Examples:

To produce a gray palette (useless but instructive) use:
@example
      set palette model RGB
      set palette defined ( 0 "black", 1 "white" )

@end example

To produce a blue-to-yellow-to-red palette use (all equivalent):
@example
      set palette defined ( 0 "blue", 1 "yellow", 2 "red" )
      set palette defined ( 0 0 0 1, 1 1 1 0, 2 1 0 0 )
      set palette defined ( 0 "#0000ff", 1 "#ffff00", 2 "#ff0000" )

@end example

Full color spectrum within HSV color space:
@example
      set palette model HSV
      set palette defined ( 0 0 1 1, 1 1 1 1 )
      set palette defined ( 0 0 1 0, 1 0 1 1, 6 0.8333 1 1, 7 0.8333 0 1)

@end example

Full color HSV spectrum wrapping at some hue other than red
@example
      set palette model HSV start 0.15
      set palette defined ( 0 0 1 1, 1 1 1 1 )

@end example

To produce a palette with only a few, equally-spaced colors:
@example
      set palette model RGB maxcolors 4
      set palette defined ( 0 "yellow", 1 "red" )

@end example

'Traffic light' palette (non-smooth color jumps at gray = 1/3 and 2/3).
@example
      set palette model RGB
      set palette defined (0 "dark-green", 1 "green", \
                           1 "yellow",     2 "dark-yellow", \
                           2 "red",        3 "dark-red" )

@end example


@node functions_, gray, defined, palette__
@subsubsection functions

@c ?commands set palette functions
@c ?set palette functions
@c ?palette functions
@example
     set palette functions <f1(gray)>, <f2(gray)>, <f3(gray)>
@end example

This option is like @ref{rgbformulae} except that you must provide
an actual function for each color component rather than the index of a preset
function.  The dummy parameter of each function, if any, must be "gray".
The function must map gray values in [0,1] to output values also in [0,1].

Examples:

To produce a full color palette use:
@example
      set palette model HSV functions gray, 1, 1

@end example

A nice black to gold palette:
@example
      set palette model RGB functions 1.1*gray**0.25, gray**0.75, 0

@end example

A gamma-corrected black and white palette
@example
      gamma = 2.2
      map(gray) = gray**(1./gamma)
      set palette model RGB functions map(gray), map(gray), map(gray)

@end example

@node gray, cubehelix, functions_, palette__
@subsubsection gray

@c ?commands set palette gray
@c ?set palette gray
@c ?set palette grey
@c ?palette gray
@ref{gray} switches to a grayscale palette shading from 0.0 = black
to 1.0 = white.  `set palette color` is an easy way to switch back from the
gray palette to the last color mapping.

@node cubehelix, viridis, gray, palette__
@subsubsection cubehelix

@c ?commands set palette cubehelix
@c ?set palette cubehelix
@cindex cubehelix

The "cubehelix" option defines a family of palettes in which color (hue) varies
around the standard color wheel while the net perceived intensity increases
monotonically as the gray value goes from 0 to 1.
@example
      D A Green (2011) http://arxiv.org/abs/1108.5083
@end example

`start` defines the starting point along the color wheel in radians.
`cycles` defines how many color wheel cycles span the palette range.
Larger values of `saturation` produce more saturated color; saturation > 1
may lead to clipping of the individual RGB components and to intensity
becoming non-monotonic. The palette is also affected by `set palette gamma`.
The default values are
@example
      set palette cubehelix start 0.5 cycles -1.5 saturation 1
      set palette gamma 1.5

@end example

@node viridis, colormap_, cubehelix, palette__
@subsubsection viridis

@c ?commands set palette viridis
@c ?set palette viridis
@cindex viridis

@example
      set palette viridis
@end example

The "viridis" palette is a (blue->yellow) gradient designed to accommodate
users with impaired color vision.  Viridis was developed by Stéfan van der Walt
and Nathaniel Smith.  It features an approximately linear gradient of perceived
brightness (luminance).  The colormap version used in gnuplot is based on
@example
      "Viridis - Colorblind-Friendly Color Maps for R", Garnier et al (2021)
      https://CRAN.R-project.org/package=viridis
@end example

D viridis 1

@node colormap_, file, viridis, palette__
@subsubsection colormap

@c ?commands set palette colormap
@c ?palette colormap
`set palette colormap <name>` loads a defined gradient that was previously
saved to a colormap. Alpha channel information in the colormap, if any,
will be lost when the color values are copied into the palette definition.
See @ref{colormap}.

@node file, gamma_correction, colormap_, palette__
@subsubsection file

@c ?commands set palette file
@c ?set palette file
@c ?palette file
`set palette file` is basically a `set palette defined (<gradient>)` where
<gradient> is read from a datafile or datablock.  The color values may be
provided either as a single 24-bit packed RGB integer (1 or 2 `using` columns)
or as three separate fractional R, G, B components (3 or 4 `using` columns).
If no explicit gray value is provided in the first input column, the line
number is used; this generates equal spacing along the color axis.

The file is read as a normal data file, so all datafile modifiers can be used.
Please note that `R` might actually be `H` if HSV color space is selected.

Use `show palette gradient` to display the gradient.

Examples:

Read in a palette of RGB triples each in range [0,255]:
@example
      set palette file 'some-palette' using ($1/255):($2/255):($3/255)

@end example

Equidistant rainbow (blue-green-yellow-red) palette:
@example
      set palette model RGB file "-" using 1:2:3
      0 0 1
      0 1 0
      1 1 0
      1 0 0
      e

@end example

Same thing using explicit gray intervals and packed RGB values:
@example
      set palette model RGB file "-" using 1:2
      1  0x0000ff
      2  0x00ff00
      3  0xffff00
      4  0xff0000
      e

@end example

Binary palette files are supported as well, see @ref{general}. Example:
put 64 triplets of R,G,B doubles into file palette.bin and load it by
@example
      set palette file "palette.bin" binary record=64 using 1:2:3

@end example


@node gamma_correction, maxcolors, file, palette__
@subsubsection gamma correction

@c ?commands set palette gamma-correction
@c ?set palette gamma-correction
@c ?palette gamma-correction
@cindex gamma-correction

Automatic gamma correction via `set palette gamma <gamma>` can be done for
gray maps (@ref{gray}) and for the @ref{cubehelix} color palette schemes.
Gamma = 1 produces a linear ramp of intensity. See @ref{palette}.

For gray mappings, <gamma> defaults to 1.5 which is usually suitable.

The gamma correction is applied to the cubehelix color palette family, but not
to other palette coloring schemes. However, you may easily implement gamma
correction for explicit color functions.

Example:
@example
      set palette model RGB
      set palette functions gray**0.64, gray**0.67, gray**0.70

@end example

To use gamma correction with interpolated gradients specify intermediate
gray values with appropriate colors.  Instead of

@example
      set palette defined ( 0 0 0 0, 1 1 1 1 )

@end example

use e.g.

@example
      set palette defined ( 0 0 0 0, 0.5 .73 .73 .73, 1 1 1 1 )

@end example

or even more intermediate points until the linear interpolation fits the
"gamma corrected" interpolation well enough.

@node maxcolors, Color_model, gamma_correction, palette__
@subsubsection maxcolors

@c ?commands set palette maxcolors
@c ?set palette maxcolors
@c ?palette maxcolors
`set palette maxcolors <N>` limits the palette to N discrete colors
selected from a continuous palette sampled at equally spaced intervals.
If you want unequal spacing of N discrete colors, use @ref{defined}
instead of a single continuous palette.

The primary use for this is to generate heat maps with discrete colors,
each representing a range of values.

A second use is to handle terminals that support only a limited number of
colors (e.g. 256 colors in gif or sixel).  The default gnuplot linetype colors
use up some of these, further limiting the number available for palette use.
Thus a multiplot using multiple palettes could fail because the first palette
has used all the available color positions.  You can mitigate this by
restricting the number of colors used by each palette.

@node Color_model, postscript, maxcolors, palette__
@subsubsection Color model

@c ?commands set palette model
@c ?set palette model
@c ?palette model
@c ?color model
@cindex HSV

@cindex RGB

@cindex CMY

@example
     set palette model @{ RGB | CMY | HSV @{start <radians>@} @}
@end example

Sometimes RGB color space is not the most convenient color space to work in.
You may change the color space `model` to one of `RGB`, `HSV`, `CMY`.
RGB stands for Red, Green, Blue;  CMY stands for Cyan, Magenta, Yellow;
HSV stands for Hue, Saturation, Value.  In HSV space the full color wheel is
traversed as H runs from 0 to 1, so H=0 and H=1 describe the same color.
By default the cycle starts and ends at red.  The optional parameter `start`
introduces an offset, so after `set palette model HSV start 0.3` H=0 and H=1
both correspond to green.

For more information on color models see:
@uref{http://en.wikipedia.org/wiki/Color_space,http://en.wikipedia.org/wiki/Color_space
}

Documentation for palette options was written for RGB color space, so please
note that `R` really means "first color component", which can be `H` or `C`
depending on the actual color space in use.

@node postscript,  , Color_model, palette__
@subsubsection postscript

@c ?commands set palette postscript
@c ?set palette postscript
This section is only relevant to output from `set term postscript color`.
When the palette is defined using @ref{rgbformulae}, gnuplot writes
a postscript implementation of the required analytical formulae as a header
just before a pm3d drawing (see /g and /cF definitions).  Usually, it makes
sense to write definitions of only the 3 formulae used in the palette.
This is the default option `nops_allcF`.  The option `ps_allcF` instead writes
definitions of all 36 formulae.  This allows you to edit the postscript file
in order to have different palettes for different surfaces in one graph.

If you write a pm3d surface to a postscript file, it may be possible to reduce
the file size by running the awk script `pm3dCompress.awk` afterward.
If the data lies on a rectangular grid, even greater compression may be
possible using the awk script `pm3dConvertToImage.awk`.
Both scripts are distributed with gnuplot.
Usage:
@example
    awk -f pm3dCompress.awk thefile.ps >smallerfile.ps
    awk -f pm3dConvertToImage.awk thefile.ps >smallerfile.ps

@end example


@node parametric_, paxis, palette__, set-show
@subsection parametric

@c ?commands set parametric
@c ?commands unset parametric
@c ?commands show parametric
@c ?set parametric
@c ?unset parametric
@c ?show parametric
@cindex parametric
@opindex parametric


@cindex noparametric

The @ref{parametric} command changes the meaning of `plot` (`splot`) from
normal functions to parametric functions.  The command @ref{parametric}
restores the plotting style to normal, single-valued expression plotting.

Syntax:
@example
      set parametric
      unset parametric
      show parametric

@end example

For 2D plotting, a parametric function is determined by a pair of parametric
functions operating on a parameter.  An example of a 2D parametric function
would be `plot sin(t),cos(t)`, which draws a circle (if the aspect ratio is
set correctly---see @ref{size}).  `gnuplot` will display an error message if
both functions are not provided for a parametric `plot`.

For 3D plotting, the surface is described as x=f(u,v), y=g(u,v), z=h(u,v).
Therefore a triplet of functions is required.  An example of a 3D parametric
function would be `cos(u)*cos(v),cos(u)*sin(v),sin(u)`, which draws a sphere.
`gnuplot` will display an error message if all three functions are not
provided for a parametric `splot`.

The total set of possible plots is a superset of the simple f(x) style plots,
since the two functions can describe the x and y values to be computed
separately.  In fact, plots of the type t,f(t) are equivalent to those
produced with f(x) because the x values are computed using the identity
function.  Similarly, 3D plots of the type u,v,f(u,v) are equivalent to
f(x,y).

Note that the order the parametric functions are specified is xfunction,
yfunction (and zfunction) and that each operates over the common parametric
domain.

Also, the @ref{parametric} function implies a new range of values.  Whereas
the normal f(x) and f(x,y) style plotting assume an xrange and yrange (and
zrange), the parametric mode additionally specifies a trange, urange, and
vrange.  These ranges may be set directly with @ref{trange}, @ref{urange},
and @ref{vrange}, or by specifying the range on the `plot` or `splot`
commands.  Currently the default range for these parametric variables is
[-5:5].  Setting the ranges to something more meaningful is expected.

@node paxis, pixmap, parametric_, set-show
@subsection paxis

@cindex paxis
@opindex paxis


@c ?commands set paxis
@c ?set paxis
@c ?show paxis
Syntax:
@example
      set paxis <axisno> @{range <range-options> | tics <tic-options>@}
      set paxis <axisno> label <label-options> @{ offset <radial-offset> @}
      show paxis <axisno> @{range | tics@}
@end example

The @ref{paxis} command is equivalent to the @ref{xrange} and `set xtics`
commands except that it acts on one of the axes p1, p2, ... used in parallel
axis plots and spiderplots.  See @ref{parallelaxes}, @ref{xrange}, and `set xtics`.
The normal options to the range and tics commands are accepted although not
all options make sense for parallel axis plots.

`set paxis <axisno> label <label-options>` is relevant to spiderplots but
ignored otherwise.  Axes of a parallel axis plot can be labeled using the
@ref{title} option of the plot command, which generates an xtic label.
Note that this may require also `set xtics`.

The axis linetype properties are controlled using `set style parallelaxis`.

@node pixmap, pm3d, paxis, set-show
@subsection pixmap

@cindex pixmap
@opindex pixmap


@c ?set pixmap
@c ?unset pixmaps
@c ?show pixmaps
@c ?commands set pixmap
Syntax:
@example
      set pixmap <index> @{"filename" | colormap <name>@}
                 at <position>
                 @{width <w> | height <h> | size <w>,<h>@}
                 @{front|back|behind@} @{center@}
      show pixmaps
      unset pixmaps
      unset pixmap <index>

@end example

The `set pixmap` command is similar to @ref{object} in that it defines an
object that will appear on subsequent plots. The rectangular array of
red/green/blue/alpha values making up the pixmap are read from a png, jpeg,
or gif file.  The position and extent occupied by the pixmap in the gnuplot
output may be specified in any coordinate system (see `coordinates`).
The coordinates given by `at <position>` refer to the lower left
corner of the pixmap unless keyword `center` is present.

If the x-extent of the rendered pixmap is set using `width <x-extent>` the
aspect ratio of the original image is retained and neither the aspect ratio
nor the orientation of the pixmap changes with axis scaling or rotation.
Similarly if the y-extent is set using `height <y-extent>`.  If both the
x-extent and y-extent are given using `size <x-extent> <y-extent>` this
overrides the original aspect ratio.  If no size is set then the original
size in pixels is used (the effective size is then terminal-dependent).

Pixmaps are not clipped to the border of the plot.  As an exception to the
general behaviour of objects and layers, a pixmap assigned to layer `behind`
is rendered for only the first plot in a multiplot.  This allows all panels
in a multiplot to share a single background pixmap.

Examples:
@example
      # Use a gradient as the background for all plotting
      # Both x and y will be resized to fill the entire canvas
      set pixmap 1 "gradient.png"
      set pixmap 1 at screen 0, 0 size screen 1, 1 behind

@end example

@example
      # Place a logo at the lower right of each page plotted
      set pixmap 2 "logo.jpg"
      set pixmap 2 at screen 0.95, 0 width screen 0.05 behind

@end example

@example
      # Place a small image at some 3D coordinate
      # It will move as if attached to the surface being plotted
      # but will always face forward and remain upright
      set pixmap 3 "image.png" at my_x, my_y, f(my_x,my_y) width screen .05
      splot f(x,y)

@end example

@menu
* pixmap_from_colormap::
@end menu

@node pixmap_from_colormap,  , pixmap, pixmap
@subsubsection pixmap from colormap

@c ?pixmap colormap
@c ?set pixmap colormap
@cindex gradient

Syntax:
@example
     set pixmap <index> colormap <name>

@end example


Another use of pixmaps is to store a gradient described by a named palette.
This is an easy way to specify gradient fill for a rectangular area.
It could be used to draw a separate colorbox for that named palette,
or even as a background for the entire plot or the entire canvas.
@example
     set palette defined (0 "beige", 1 "light-cyan")
     set colormap new Gradient
     set pixmap 1 colormap Gradient behind
     set pixmap 1 at screen 0,0 size screen 1,1
     plot <something>

@end example


@node pm3d, pointintervalbox, pixmap, set-show
@subsection pm3d

@c ?commands set pm3d
@c ?commands show pm3d
@c ?set pm3d
@c ?show pm3d
@cindex pm3d
@opindex pm3d


pm3d is an `splot` style for drawing palette-mapped 3d and 4d data as
color/gray maps and surfaces.  It allows plotting gridded or non-gridded data
without preprocessing. pm3d style options also affect solid-fill polygons
used to construct other 3D plot elements.

Syntax (the options can be given in any order):
@example
      set pm3d @{
                 @{ at <position> @}
                 @{ interpolate <steps/points in scan, between scans> @}
                 @{ scansautomatic | scansforward | scansbackward
                                  | depthorder @{base@} @}
                 @{ flush @{ begin | center | end @} @}
                 @{ ftriangles | noftriangles @}
                 @{ clip | clip1in | clip4in @}
                 @{ @{no@}clipcb @}
                 @{ corners2color
                   @{ mean|geomean|harmean|rms|median|min|max|c1|c2|c3|c4 @}
                 @}
                 @{ @{no@}lighting
                   @{primary <fraction>@} @{specular <fraction>@} @{spec2 <fraction>@}
                 @}
                 @{ @{no@}border @{retrace@} @{<linestyle-options>@}@}
                 @{ implicit | explicit @}
                 @{ map @}
               @}
      show pm3d
      unset pm3d

@end example

Note that pm3d plots are plotted sequentially in the order given in the
splot command. Thus earlier plots may be obscured by later plots.
To avoid this you can use the `depthorder` scan option.

The pm3d surfaces can be projected onto the `top` or `bottom` of the view box.
See @ref{position}.
The following command draws three color surfaces at different altitudes:
@example
      set border 4095
      set pm3d at s
      splot 10*x with pm3d at b, x*x-y*y, x*x+y*y with pm3d at t

@end example

See also help for @ref{palette}, @ref{cbrange}, `set colorbox`,
and the demo file `demo/pm3d.dem`.


@menu
* with_pm3d_(pm3d_explicit)::
* pm3d_implicit::
* algorithm::
* lighting::
* position::
* scanorder::
* clipping::
* color_assignment::
* corners2color::
* border_::
* fillcolor::
* interpolate::
* deprecated_options::
@end menu

@node with_pm3d_(pm3d_explicit), pm3d_implicit, pm3d, pm3d
@subsubsection with pm3d (pm3d explicit)

@c ?pm3d explicit
@c ?with pm3d
@c ?splot with pm3d
@c ?plotting styles pm3d
@c ?splot with pm3d zclip
@c ?pm3d zclip
@cindex zclip


Syntax
@example
     splot DATA using (x):(y):(z)@{:(color)@} with pm3d
                @{fs|fillstyle <fillstyle>@} @{fc|fillcolor <colorspec>@}
                @{zclip [zmin:zmax]@}

@end example

The rendering properties of all pm3d surfaces are controlled using
`set pm3d`.  By default the full surface is rendered as a grid of
quadrangles, each colored by the palette color mapped to that z coordinate.
If you provide a fourth input column, the palette mapping uses that value
rather than z.  See @ref{fillcolor}, @ref{color_assignment}.

When you explicitly use `with pm3d` in the plot command rather than using
another plot style while `set pm3 implicit` is active, additional rendering
options are possible.  This allows you to use separate coloring schemes for
different surfaces in the same plot.

EXPERIMENTAL: This gnuplot version introduces an option `zclip` that
clips the generated surface smoothly at a pair of limiting z values.
The example below animates gradual removal of the top portion of a
two-color 3D surface.
@example
     set style line 101 lc "gray"
     set style line 102 lc "blue"
     set pm3d depthorder
     do for [i=0:N] @{
         splot f(x,y) with pm3d fillcolor ls 101 zclip [* : zmax-(i*delta)]
         pause 0.2  # 1/5 second between animation frames
     @}

@end example


@node pm3d_implicit, algorithm, with_pm3d_(pm3d_explicit), pm3d
@subsubsection pm3d implicit

@c ?pm3d implicit

A pm3d color surface is drawn if the splot command explicitly specifies
`with pm3d`, if the data or function @ref{style} is set to pm3d globally,
or if the pm3d mode is `set pm3d implicit`.  For the latter two cases
the pm3d surface is draw in addition to the mesh produced by the style
specified in the plot command. E.g.
@example
      splot 'fred.dat' with lines, 'lola.dat' with lines
@end example

would draw both a mesh of lines and a pm3d surface for each data set.
If the option `explicit` is on (or `implicit` is off) only plots specified
by the `with pm3d` attribute are plotted with a pm3d surface, e.g.:
@example
      splot 'fred.dat' with lines, 'lola.dat' with pm3d
@end example

would plot 'fred.dat' with lines (only) and 'lola.dat' with a pm3d surface.

On gnuplot start-up, the mode is `explicit`. For historical and compatibility
reasons, the commands `set pm3d;` (i.e. no options) and `set pm3d at X ...`
(i.e.  `at` is the first option) change the mode to `implicit`.
The command `set pm3d;` sets other options to their default state.

If you set the default data or function style to `pm3d`, e.g.:
@example
      set style data pm3d
@end example

then the options `implicit` and `explicit` have no effect.

@node algorithm, lighting, pm3d_implicit, pm3d
@subsubsection algorithm

@c ?pm3d algorithm

Let us first describe how a map/surface is drawn.  The input data come from an
evaluated function or from an `splot data file`.  Each surface consists of a
sequence of separate scans (isolines).  The pm3d algorithm fills the region
between two neighbouring points in one scan with another two points in the
next scan by a gray (or color) according to z-values (or according to an
additional 'color' column, see help for `using`) of these 4 corners; by default
the 4 corner values are averaged, but this can be changed by the option
@ref{corners2color}.  In order to get a reasonable surface, the neighbouring scans
should not cross and the number of points in the neighbouring scans should not
differ too much; of course, the best plot is with scans having same number of
points.  There are no other requirements (e.g. the data need not be gridded).
Another advantage is that the pm3d algorithm does not draw anything outside of
the input (measured or calculated) region.

Surface coloring works with the following input data:

1. splot of function or of data file with one or three data columns: The
gray/color scale is obtained by mapping the averaged (or @ref{corners2color})
z-coordinate of the four corners of the above-specified quadrangle into the
range [min_color_z,max_color_z] of @ref{zrange} or @ref{cbrange} providing a gray value
in the range [0:1].  This value can be used directly as the gray for gray maps.
The normalized gray value can be further mapped into a color---see @ref{palette}
for the complete description.

2. splot of data file with two or four data columns: The gray/color value is
obtained by using the last-column coordinate instead of the z-value, thus
allowing the color and the z-coordinate be mutually independent.  This can be
used for 4d data drawing.

Other notes:

1. The term 'scan' referenced above is used more among physicists than the
term 'iso_curve' referenced in gnuplot documentation and sources.  You measure
maps recorded one scan after another scan, that's why.

2. The 'gray' or 'color' scale is a linear mapping of a continuous variable
onto a smoothly varying palette of colors. The mapping is shown in a
rectangle next to the main plot. This documentation refers to this as a
"colorbox", and refers to the indexing variable as lying on the colorbox axis.
See `set colorbox`, @ref{cbrange}.

@node lighting, position, algorithm, pm3d
@subsubsection lighting

@cindex lighting

@c ?pm3d lighting
@c ?pm3d nolighting
@c ?set pm3d lighting
@cindex spotlight

@c ?pm3d spotlight
@c ?set pm3d spotlight
Syntax:
@example
     set pm3d lighting @{primary <frac>@} @{specular <frac>@} @{spec2 <frac>@}
     set pm3d spotlight @{rgb <color>@} @{rot_x <angle>@} @{rot_z <angle>@}
                        @{Phong <value>@} @{default@}

@end example

By default the colors assigned to pm3d objects are not dependent on orientation
or viewing angle. This state corresponds to `set pm3d nolighting`.
The command @ref{lighting} selects a simple lighting model consisting of a
single fixed source of illumination contributing 50% of the overall lighting.
The strength of this light relative to the ambient illumination can be adjusted
by `set pm3d lighting primary <fraction>`.  Inclusion of specular highlighting
can be adjusted by setting a fractional contribution:
@example
     set pm3d lighting primary 0.50 specular 0.0   # no highlights
     set pm3d lighting primary 0.50 specular 0.6   # strong highlights
@end example

Solid-color pm3d surfaces tend to look very flat without specular highlights.

Since highlights the primary source only affect one side of the surface,
it may help to add illumination from a second spotlight shining from another
direction.  The strength of this second spotlight is set by "spec2 <fraction>".
The second spotlight is included in the lighting model only if spec2 is greater
than zero.  The direction, color, and specular model is controlled by
"set pm3d spotlight".  Use and positioning of this spotlight is illustrated
in the interactive demo `spotlight.dem`.
See also hidden_compare.dem
@uref{http://www.gnuplot.info/demo/hidden_compare.html,(comparison of hidden3d and pm3d treatment of solid-color surfaces)
}
Example:
@example
     set pm3d lighting primary 0.8 spec 0.4 spec2 0.4
     set pm3d spot rgb "blue"
@end example

D spotlight 1

@node position, scanorder, lighting, pm3d
@subsubsection position

@c ?pm3d position
@c ?set pm3d position
The pm3d colored surface can be drawn at the true z position of the surface
or projected onto the base plane or the top plane.  This is controlled by
the `at` option with a string of up to 6 combinations of `b`, `t` and `s`.
For instance, `at b` plots at the bottom only, `at st` plots first at the
surface and then on the top plane, while `at bstbst` is unlikely to be useful.

Colored quadrangles are plotted one after another.  That means later
quadrangles can occlude or overlap the previous ones.  You may try to switch
between `scansforward` and `scansbackward` to force the first scan of the data
to be plotted first or last.  The default is `scansautomatic` where gnuplot
makes a guess about scans order.  The `depthorder` option completely reorders
the quadrangles by sorting on the distance from the viewpoint.  This allow to
visualize even complicated surfaces; see `pm3d depthorder` for more details.

@node scanorder, clipping, position, pm3d
@subsubsection scanorder

@c ?pm3d scanorder
@c ?pm3d depthorder
@c ?pm3d flush
@c ?pm3d ftriangles
@c ?set pm3d scanorder
@c ?set pm3d depthorder
@c ?set pm3d flush
@c ?set pm3d ftriangles
@cindex depthorder

@cindex flush

@cindex scansforward

@cindex scansautomatic

@cindex scansbackward

@cindex ftriangles

@example
     set pm3d @{scansautomatic | scansforward | scansbackward | depthorder@}

@end example

By default the quadrangles making up a pm3d solid surface are rendered in the
order they are encountered along the surface grid points.  This order may be
controlled by the options `scansautomatic`|`scansforward`|`scansbackward`.
These scan options are not in general compatible with hidden-surface removal.

If two successive scans do not have same number of points, then it has to be
decided whether to start taking points for quadrangles from the beginning of
both scans (`flush begin`), from their ends (`flush end`) or to center them
(`flush center`).  Note, that `flush (center|end)` are incompatible with
`scansautomatic`: if you specify `flush center` or `flush end` and
`scansautomatic` is set, it is silently switched to `scansforward`.

If two subsequent scans do not have the same number of points, the option
`ftriangles` specifies whether color triangles are drawn at the scan tail(s)
where there are not enough points in either of the scans. This can be used to
draw a smooth map boundary.

Gnuplot does not do true hidden surface removal for solid surfaces, but often
it is sufficient to render the component quadrangles in order from furthest
to closest.  This mode may be selected using the option
@example
      set pm3d depthorder
@end example

Note that the global option @ref{hidden3d} does not affect pm3d surfaces.

The `depthorder` option by itself tends to produce bad results when
applied to the long thin rectangles generated by @ref{boxes}.
It works better to add the keyword `base`, which performs the depth sort
using the intersection of the box with the plane at z=0.  This type of
plot is further improved by adding a lighting model.
Example:
@example
     set pm3d depthorder base
     set pm3d lighting
     set boxdepth 0.4
     splot $DATA using 1:2:3 with boxes

@end example


@node clipping, color_assignment, scanorder, pm3d
@subsubsection clipping

@c ?pm3d clipping
@c ?set pm3d clipping
@cindex clipcb

@cindex clip1in

@cindex clip4in

@c ?pm3d clipcb
@cindex noclipcb

@c ?pm3d noclipcb
Syntax:
@example
     set pm3d @{clip | clip1in | clip4in@}
     set pm3d @{no@}clipcb

@end example

The component quadrangles of a pm3d surface or other 3D object are by default
smoothly clipped against the current zrange.  This is a change from earlier
gnuplot versions.  In 2D projection (`set view map`) this mode also clips
against xrange and yrange.

Alternatively, surfaces can be clipped by rendering whole quadrangles but only
those with all 4 corners in-range on x, y, and z (`set pm3d clip4in`), or only
those with at least one corner in-range on x, y, and z (`set pm3d clip1in`).
The options `clip`, `clip1in`, and `clip4in` are mutually exclusive.

Separate from clipping based on spatial x, y, and z coordinates, quadrangles
can be rendered or not based on extreme palette color values.
`clipcb`: (default) palette color values < cbmin are treated as cbmin;
palette color values > cbmax are treated as cbmax.
`noclipcb`: quadrangles with color value outside cbrange are not drawn at all.


@node color_assignment, corners2color, clipping, pm3d
@subsubsection color_assignment

@c ?pm3d color_assignment
The default pm3d coloring assigns an individual color to each quadrangle of
the surface grid.  For alternative coloring schemes that assign uniform color to
the entire surface, see @ref{fillcolor}.

A single gray/color value (i.e. not a gradient) is assigned to each quadrangle.
This value is calculated from the z-coordinates the four quadrangle corners
according to `corners2color <option>`.  The value is then used to select a
color from the current palette.  See @ref{palette}.
It is not possible to change palettes inside a single `splot` command.

If a fourth column of data is provided, the coloring of individual quadrangles
works as above except that the color value is distinct from the z value.
As a separate coloring option, the fourth data column may provide instead
an RGB color. See `rgbcolor variable`. In this case the plotting command
must be

@example
      splot ... using 1:2:3:4 with pm3d lc rgb variable

@end example

Notice that ranges of z-values and color-values for surfaces are adjustable
independently by @ref{zrange}, @ref{cbrange}, `set log z`, `set log cb`, etc.

@node corners2color, border_, color_assignment, pm3d
@subsubsection corners2color

@c ?pm3d corners2color
@c ?set pm3d corners2color
@cindex corners2color

@cindex mean

@cindex geomean

@cindex harmean

@cindex median

@cindex min

@cindex max

@cindex rms

The color of each quadrangle in a pm3d surface is assigned based on the color
values of its four bounding vertices.
The options 'mean' (default), 'geomean', 'harmean, 'rms', and 'median' produce
various kinds of surface color smoothing, while options 'min' and 'max' choose
minimal or maximal value, respectively. This may not be desired for pixel
images or for maps with sharp and intense peaks, in which case the options
'c1', 'c2', 'c3' or 'c4' can be used instead to assign the quadrangle color
based on the z-coordinate of only one corner.  Some experimentation may be
needed to determine which corner corresponds to 'c1', as the orientation
depends on the drawing direction.  Because the pm3d algorithm does not extend
the colored surface outside the range of the input data points, the 'c<j>'
coloring options will result in pixels along two edges of the grid not
contributing to the color of any quadrangle.  For example, applying the pm3d
algorithm to the 4x4 grid of data points in script `demo/pm3d.dem` (please have
a look) produces only (4-1)x(4-1)=9 colored rectangles.

@node border_, fillcolor, corners2color, pm3d
@subsubsection border

@c ?set pm3d hidden3d
@c ?pm3d hidden3d
@c ?set pm3d border
@c ?pm3d border
@example
     set pm3d border @{retrace@} @{line-properties@}
     set pm3d noborder

@end example

This option draws bounding lines around each pm3d quadrangle as it is rendered.
Additional line properties (linetype, color, linewidth) are optional.
By default the border is drawn as a solid black line with width 1.

`set pm3d border retrace` causes a border to be drawn in the same color as the
quadrangle.  In principle this should give the same result as `noborder`, but
some output modes can suffer from antialiasing artifacts between adjacent
filled quadrangles. Retracing the border hides these artifacts, at the cost of
a larger output file.

@node fillcolor, interpolate, border_, pm3d
@subsubsection fillcolor

@c ?pm3d fillcolor
@example
     splot FOO with pm3d fillcolor <colorspec>

@end example

Plot style `with pm3d` accepts an optional fillcolor in the splot command.
This specification is applied to the entire pm3d surface.  See @ref{colorspec}.
Most fillcolor specifications will result in a single solid color, which is
hard to interpret visually unless there is also a lighting model present to
distinguish surface components based on orientation.  See @ref{lighting}.

There are a few special cases.  @ref{palette} would produce
the same result as the default pm3d palette-based coloring, and is therefore
not a useful option. `with pm3d fillcolor linestyle N` is more interesting.
This variant assigns distinct colors to the top and bottom of the pm3d
surface, similar to the color scheme used by gnuplot's @ref{hidden3d} mode.
Linestyle N is used for the top surface; linestyle N+1 for the bottom surface.
Note that "top" and "bottom" depend on the scan order, so that the colors are
inverted for `pm3d scansbackward` as compared to `pm3d scansforward`.
This coloring option works best with `pm3d depthorder`, however, which
unfortunately does not allow you to control the scan order so you may have
to instead swap the colors defined for linestyles N and N+1.

@node interpolate, deprecated_options, fillcolor, pm3d
@subsubsection interpolate

@c ?set pm3d interpolate
@c ?pm3d interpolate
The option `interpolate m,n` will interpolate between grid points to generate
a finer mesh.  For data files, this smooths the color surface and enhances the
contrast of spikes in the surface.  When working with functions, interpolation
makes little sense.  It would usually make more sense to increase @ref{samples} and
@ref{isosamples}.

For positive m and n, each quadrangle or triangle is interpolated m-times and
n-times in the respective direction.  For negative m and n, the interpolation
frequency is chosen so that there will be at least |m| and |n| points drawn;
you can consider this as a special gridding function.

Note: `interpolate 0,0`, will automatically choose an optimal number of
interpolated surface points.

Note: Currently color interpolation is always linear, even if corners2color
is set to a nonlinear scheme such as the geometric mean.

@node deprecated_options,  , interpolate, pm3d
@subsubsection deprecated_options

@c ?set pm3d deprecated_options
@c ?pm3d deprecated_options
@c ?set pm3d map
@c ?pm3d map
@cindex map

The deprecated option `set pm3d map` was equivalent to
`set pm3d at b; set view map; set style data pm3d; set style func pm3d;`

The deprecated option `set pm3d hidden3d N` was equivalent to
`set pm3d border ls N`.

@node pointintervalbox, pointsize, pm3d, set-show
@subsection pointintervalbox

@c ?commands set pointintervalbox
@c ?set pointintervalbox
@cindex pointintervalbox
@opindex pointintervalbox


The `pointinterval` and `pointnumber` properties of a line type are used only
in plot style @ref{linespoints}.  A negative value of pointinterval or pointnumber,
e.g. -N, means that before the selected set of point symbols are drawn a box
(actually circle) behind each point symbol is blanked out by filling with the
background color.  The command @ref{pointintervalbox} controls the radius of
this blanked-out region.  It is a multiplier for the default radius, which is
equal to the point size. @ref{pointintervalbox} draws no blanked-out region.

@node pointsize, polar, pointintervalbox, set-show
@subsection pointsize

@c ?commands set pointsize
@c ?commands show pointsize
@c ?set pointsize
@c ?show pointsize
@cindex pointsize
@opindex pointsize


The @ref{pointsize} command scales the size of the points used in plots.

Syntax:
@example
      set pointsize <multiplier>
      show pointsize

@end example

The default is a multiplier of 1.0.  Larger pointsizes may be useful to
make points more visible in bitmapped graphics.

The pointsize of a single plot may be changed on the `plot` command.
See `plot with` for details.

Please note that the pointsize setting is not supported by all terminal
types.

@node polar, print_, pointsize, set-show
@subsection polar

@c ?commands set polar
@c ?commands unset polar
@c ?commands show polar
@c ?set polar
@c ?unset polar
@c ?show polar
@cindex polar
@opindex polar


@cindex nopolar

The `set polar` command changes the meaning of the plot from rectangular
coordinates to polar coordinates.

Syntax:
@example
      set polar
      set polar grid <grid options>
      unset polar
      show polar

@end example

In polar coordinates, the dummy variable (t) represents an angle theta.
The default range of t is [0:2*pi], or [0:360] if degree units have been
selected (see @ref{angles}).

The command `unset polar` changes the meaning of the plot back to the default
rectangular coordinate system.

The `set polar` command affects only 2D plotting.
See the @ref{mapping} command for analogous 3D functionality.

While in polar coordinates the meaning of an expression in t is really
r = f(t), where t is an angle of rotation.  The trange controls the domain
(the angle) of the function. The r, x and y ranges control the extent of the
graph in the x and y directions.  Each of these ranges, as well as the
rrange, may be autoscaled or set explicitly.  For details, see @ref{rrange}
and @ref{xrange}.

Example:
@example
      set polar
      plot t*sin(t)
      set trange [-2*pi:2*pi]
      set rrange [0:3]
      plot t*sin(t)

@end example

The first `plot` uses the default polar angular domain of 0 to 2*pi.  The
radius and the size of the graph are scaled automatically.  The second `plot`
expands the domain, and restricts the size of the graph to the area within
3 units of the origin.  This has the effect of limiting x and y to [-3:3].

By default polar plots are oriented such that theta=0 is at the far right,
with theta increasing counterclockwise.  You can change both the origin and
the sense explicitly.  See @ref{theta}.

You may want to `set size square` to have `gnuplot` try to make the aspect
ratio equal to unity, so that circles look circular.  Tic marks around the
perimeter can be specified using @ref{ttics}.
See also
@uref{http://www.gnuplot.info/demo/polar.html,polar demos (polar.dem)
}
and
@uref{http://www.gnuplot.info/demo/poldat.html,polar data plot (poldat.dem).
}

@menu
* polar_grid::
@end menu

@node polar_grid,  , polar, polar
@subsubsection polar grid

@c ?commands set polar grid
@c ?set polar grid
@c ?polar grid
Syntax:
@example
      set polar grid @{<theta_segments>, <radial_segments>@}
                     @{ qnorm @{<power>@} | gauss | cauchy | exp | box | hann @}
                     @{ kdensity @} @{ scale <scale> @}
                     @{theta [min:max]@} @{r [min:max]@}

@end example

The polar grid settings are used in conjunction with the plot style
`with surface` to generate a heat map from a set of polar coordinate points.
The surface consists of a grid filling a circle divided into segments formed
by discrete ranges on theta and r.

Each segment is assigned a value derived from the input set of individual
scattered points [x,y,z] by applying a filter operation.
The default filter is `qnorm 1`, which averages each point's z value weighted
by the inverse of the point's distance from the center of that grid segment.

Alternative filter operations gauss, cauchy, exp, box, and hann are described
in more detail elsewhere.  See @ref{dgrid3d}.

`kdensity`: This keyword tells the program to use the weighted sum of
contributions from all points rather than the weighted average.

`scale`: This scale facter (default 1.0) is applied to all distances prior to
using them in the weighting calculation.

Masking:  All input points are used to calculate grid values.
The full gridded surface always spans theta range [0:360] and the radial
defined by autoscaling or by a previous @ref{rrange} command.
However the portion of the surface that actually appears in the plot
can be restricted to a truncated wedge bounded by lower and upper
limits on theta and r.  Theta limits must be given in degrees.

For example the following commands will generate a plot which is auto-scaled
in size to show all input points.  The contributions of all input points are
summed, not averaged (`kdensity`), and only a wedge of the resulting gridded
surface is displayed.

@example
     set rrange [0:*]
     set polar grid qnorm kdensity theta [0:190]
     plot DATA with surface, DATA with points

@end example


@node print_, psdir, polar, set-show
@subsection print

@c ?commands set print
@c ?commands show print
@c ?set print
@c ?show print
The `set print` command redirects the output of the `print` command.

Syntax:
@example
      set print
      set print "-"
      set print "<filename>" [append]
      set print "|<shell_command>"
      set print $datablock [append]

@end example

`set print` with no parameters restores output to <STDERR>.  The <filename>
"-" means <STDOUT>. The `append` flag causes the file to be opened in append
mode.  A <filename> starting with "|" is opened as a pipe to the
<shell_command> on platforms that support piping.

The destination for `print` commands can also be a named data block. Data
block names start with '$', see also `inline data`.
When printing a string to a data block, embedded newline characters are
expanded to generate multiple data block entries.

@node psdir, raxis, print_, set-show
@subsection psdir

@c ?commands set psdir
@c ?commands show psdir
@c ?set psdir
@c ?show psdir
@cindex psdir
@opindex psdir


The `set psdir <directory>` command controls the search path used by the
postscript terminal to find prologue.ps and character encoding files.
You can use this mechanism to switch between different sets of
locally-customized prolog files.
The search order is
@example
      1) The directory specified by @ref{psdir}, if any
      2) The directory specified by environmental variable GNUPLOT_PS_DIR
      3) A built-in header or one from the default system directory
      4) Directories set by @ref{loadpath}

@end example

@node raxis, rgbmax, psdir, set-show
@subsection raxis

@c ?commands set raxis
@cindex raxis
@opindex raxis


@c ?set raxis
@c ?unset raxis
The commands @ref{raxis} and @ref{raxis} toggle whether the polar axis
is drawn separately from grid lines and the x axis.  If the minimum of the
current rrange is non-zero (and not autoscaled), then a white circle is drawn
at the center of the polar plot to indicate that the plot lines and axes do
not reach 0.  The axis line is drawn using the same line type as the plot
border.  See `polar`, @ref{rrange}, @ref{rtics}, @ref{rlabel}, `set grid`.

@node rgbmax, rlabel, raxis, set-show
@subsection rgbmax

@c ?commands set rgbmax
@c ?set rgbmax
@cindex rgbmax
@opindex rgbmax


@c ?unset rgbmax
@cindex rgbimage

Syntax:
@example
     set rgbmax @{1.0 | 255@}
     unset rgbmax
@end example

The red/green/blue color components of an rgbimage plot are by default
interpreted as integers in the range [0:255].  `set rgbmax 1.0` tells the
program that data values used to generate the color components of a plot
with @ref{rgbimage} or @ref{rgbalpha} are floating point values in the range [0:1].
@ref{rgbmax} returns to the default integer range [0:255].

@node rlabel, rmargin, rgbmax, set-show
@subsection rlabel

@c ?commands set rlabel
@cindex rlabel
@opindex rlabel


@c ?set rlabel
@c ?unset rlabel
This command places a label above the r axis. The label will be drawn whether
or not the plot is in polar mode.  See @ref{xlabel} for additional keywords.

@node rmargin, rrange, rlabel, set-show
@subsection rmargin

@c ?commands set rmargin
@c ?set rmargin
@cindex rmargin
@opindex rmargin


The command @ref{rmargin} sets the size of the right margin.
Please see @ref{margin} for details.

@node rrange, rtics, rmargin, set-show
@subsection rrange

@c ?commands set rrange
@c ?commands show rrange
@c ?set rrange
@c ?show rrange
@cindex rrange
@opindex rrange


The @ref{rrange} command sets the range of the radial coordinate for a graph
in polar mode.  This has the effect of setting both xrange and yrange as well.
The resulting xrange and yrange are both [-(rmax-rmin) : +(rmax-rmin)].
However if you later change the x or y range, for example by zooming, this does
not change rrange, so data points continue to be clipped against rrange.
Unlike other axes, autoscaling the raxis always results in rmin = 0.
The `reverse` autoscaling flag is ignored.
Note: Setting a negative value for rmin may produce unexpected results.

@node rtics, samples, rrange, set-show
@subsection rtics

@c ?commands set rtics
@c ?commands show rtics
@c ?set rtics
@c ?show rtics
@cindex rtics
@opindex rtics


The @ref{rtics} command places tics along the polar axis.  The tics and labels
are drawn to the right of the origin. The `mirror` keyword causes them to be
drawn also to the left of the origin. See `polar`, `set xtics`, and
`set mxtics` for discussion of keywords.

@node samples, size, rtics, set-show
@subsection samples

@c ?commands set samples
@c ?commands show samples
@c ?set samples
@c ?show samples
@cindex samples
@opindex samples


Function plots are constructed by sampling the function at a given number of x
values and drawing line segments to connect the values f(x0)..f(x1)..f(x2)...
The default sampling rate for functions, or for interpolating data, may be
changed by the @ref{samples} command.  To change the sampling range for a
particular component of a `plot` or `splot` command, see @ref{sampling}.

Syntax:
@example
      set samples <samples_1> @{,<samples_2>@}
      show samples

@end example

By default, sampling is set to 100 points.  A higher sampling rate will
produce more accurate plots, but will take longer.  This parameter has no
effect on data file plotting unless one of the interpolation/approximation
options is used.  See @ref{smooth}, @ref{cntrparam} and @ref{dgrid3d}.

When a 2D graph is being done, only the value of <samples_1> is relevant.

When a surface plot is being done without the removal of hidden lines, the
value of samples specifies the number of samples that are to be evaluated for
the isolines.  Each iso-v line will have <sample_1> samples and each iso-u
line will have <sample_2> samples.  If you only specify <samples_1>,
<samples_2> will be set equal to <samples_1>.
See also @ref{isosamples}.

@node size, spiderplot_, samples, set-show
@subsection size

@c ?commands set size
@c ?commands show size
@c ?set size
@c ?show size
@cindex size
@opindex size


@c ?aspect ratio
@c ?set size square
@c ?set size ratio
@cindex ratio

@cindex square

Syntax:
@example
      set size @{@{no@}square | ratio <r> | noratio@} @{<xscale>,<yscale>@}
      show size

@end example

The <xscale> and <yscale> values are scale factors for the size of the plot,
which includes the graph, labels, and margins.

Historical note: In early versions of gnuplot some terminal types used
@ref{size} to control also the size of the output canvas.
Now there are two distinct properties: `'set size'` and `'set term ... size'`.

`set term <terminal_type> size <x units>, <y units>` controls the size of the
output file, or `canvas`. Please see individual terminal documentation for the
units of the size parameters.  By default, the plot will fill this canvas.

`set size <xscale>, <yscale>` scales the plot itself relative to the size of
the canvas.  Scale values less than 1.0 cause the plot to fill only part of the
canvas. This can be used together with @ref{multiplot} to inset a small plot inside
a larger plot or to place several small plots side-by-side.
Scale values greater than 1.0 are not supported and may cause errors.

`ratio` causes `gnuplot` to try to create a graph with an aspect ratio of <r>
(the ratio of the y-axis length to the x-axis length) within the portion of
the plot specified by <xscale> and <yscale>.

The meaning of a negative value for <r> is different.  If <r>=-1, gnuplot
tries to set the scales so that the unit length along on both the x and y axes
is the same; i.e. they are isotropic.  See also @ref{isotropic}.
This is the 2D equivalent to the 3D command `set view equal xy`.
If <r>=-2, the unit on y has twice the length of the unit on x, and so on.
See also @ref{isotropic}.

The success of `gnuplot` in producing the requested aspect ratio depends on
the terminal selected.  The graph area will be the largest rectangle of
aspect ratio <r> that will fit into the specified portion of the output
(leaving adequate margins, of course).
@cindex square


`set size square` is a synonym for `set size ratio 1`.

Both `noratio` and `nosquare` return the graph to the default aspect ratio
of the terminal, but do not return <xscale> or <yscale> to their default
values (1.0).

`ratio` and `square` have no effect on 3D plots, but do affect 3D projections
created using `set view map`.  See also `set view equal`, which forces
the x and y axes of a 3D onto the same scale.

Examples:

To set the size so that the plot fills the available canvas:
@example
      set size 1,1

@end example

To make the graph half size and square use:
@example
      set size square 0.5,0.5

@end example

To make the graph twice as high as wide use:
@example
      set size ratio 2

@end example

@node spiderplot_, style, size, set-show
@subsection spiderplot

@c ?set spiderplot
The @ref{spiderplot} command switches interpretation of coordinates to a
polar system in which each data point is mapped to a position along a
radial axis.  paxis 1 is always vertical; axes 2 to N proceed clockwise
with even spacing. The command must be issued prior to plotting. It has
additional effects equivalent to
@example
     set style data spiderplot
     unset border
     unset tics
     set key noautotitle
     set size ratio 1.0
@end example

Use @ref{reset} to restore these after plotting.


@node style, surface_, spiderplot_, set-show
@subsection style

@c ?set style
@c ?show style
@c ?unset style
Default plotting styles are chosen with the `set style data` and
`set style function` commands.  See `plot with` for information about how to
override the default plotting style for individual functions and data sets.
See `plotting styles` or `plot with` for a complete list of styles.

Syntax:
@example
      set style function <style>
      set style data <style>
      show style function
      show style data

@end example

Default styles for specific plotting elements may also be set.

Syntax:
@example
      set style arrow <n> <arrowstyle>
      set style boxplot <boxplot style options>
      set style circle radius <size> @{clip|noclip@}
      set style ellipse size <size> units @{xy|xx|yy@} @{clip|noclip@}
      set style fill <fillstyle>
      set style histogram <histogram style options>
      set style line <n> <linestyle>
      set style rectangle <object options> <linestyle> <fillstyle>
      set style textbox @{<n>@} @{opaque|transparent@} @{@{no@}border@} @{fillcolor@}
      set style watchpoint labels <label options>

@end example


@menu
* set_style_arrow::
* boxplot_::
* set_style_data::
* set_style_fill::
* set_style_function::
* set_style_histogram::
* set_style_increment::
* set_style_line::
* set_style_circle::
* set_style_rectangle::
* set_style_ellipse::
* set_style_parallelaxis::
* set_style_spiderplot::
* set_style_textbox::
* set_style_watchpoint::
@end menu

@node set_style_arrow, boxplot_, style, style
@subsubsection set style arrow

@c ?commands set style arrow
@c ?commands unset style arrow
@c ?commands show style arrow
@c ?set style arrow
@c ?unset style arrow
@c ?show style arrow
@cindex arrowstyle

You can use `set style arrow` to define a set of arrow types.  Each type has
its own width, point type, color, etc so that you can refer to them later by
an index instead of repeating all the information at each invocation.

Syntax:
@example
      set style arrow <index> default
      set style arrow <index> @{nohead | head | backhead | heads@}
                              @{size <length>,<angle>@{,<backangle>@} @{fixed@}@}
                              @{filled | empty | nofilled | noborder@}
                              @{front | back@}
                              @{ @{linestyle | ls <line_style>@}
                                | @{linetype | lt <line_type>@}
                                  @{linewidth | lw <line_width@}
                                  @{linecolor | lc <colorspec>@}
                                  @{dashtype | dt <dashtype>@} @}
      unset style arrow
      show style arrow

@end example

<index> is an integer that identifies the arrowstyle.

If `default` is given all arrow style parameters are set to their default
values.

If the linestyle <index> already exists, only the given parameters are
changed while all others are preserved.  If not, all undefined values are
set to the default values.

An arrow style invoked from a `plot` or `splot` command can include a
data-dependent linecolor (`lc variable` or `lc rgb variable`) that consumes
an additional column of data in the corresponding `using` specification.
In this case the style is probably not useful for individual arrows created
by `set arrow`.

Specifying `nohead` produces arrows drawn without a head---a line segment.
This gives you yet another way to draw a line segment on the plot.  By
default, arrows have one head. Specifying `heads` draws arrow heads on both
ends of the line.

Head size can be modified using `size <length>,<angle>` or
`size <length>,<angle>,<backangle>`, where `<length>` defines length of each
branch of the arrow head and `<angle>` the angle (in degrees) they make with
the arrow.  `<Length>` is in x-axis units; this can be changed by `first`,
`second`, `graph`, `screen`, or `character` before the <length>;  see
`coordinates` for details.

By default the size of the arrow head is reduced for very short arrows.
This can be disabled using the `fixed` keyword after the @ref{size} command.

`<backangle>` is the angle (in degrees) the back branches make with the arrow
(in the same direction as `<angle>`). It is ignored if the style is `nofilled`.

Specifying `filled` produces filled arrow heads with a border line around the
arrow head.  Specifying `noborder` produces filled arrow heads with no border.
In this case the tip of the arrow head lies exactly on the endpoint of the
vector and the arrow head is slightly smaller overall. Dashed arrows should
always use `noborder`, since a dashed border is ugly.
Not all terminals support filled arrow heads.

The line style may be selected from a user-defined list of line styles
(see `set style line`) or may be defined here by providing values for
`<line_type>` (an index from the default list of styles) and/or
`<line_width>` (which is a  multiplier for the default width).

Note, however, that if a user-defined line style has been selected, its
properties (type and width) cannot be altered merely by issuing another
`set style arrow` command with the appropriate index and `lt` or `lw`.

If `front` is given, the arrows are written on top of the graphed data. If
`back` is given (the default), the arrow is written underneath the graphed
data.  Using `front` will prevent a arrow from being obscured by dense data.

Examples:

To draw an arrow without an arrow head and double width, use:
@example
      set style arrow 1 nohead lw 2
      set arrow arrowstyle 1

@end example

See also `set arrow` for further examples.


@node boxplot_, set_style_data, set_style_arrow, style
@subsubsection boxplot

@c ?commands set style boxplot
@c ?commands unset style boxplot
@c ?commands show style boxplot
@c ?set style boxplot
@c ?unset style boxplot
@c ?show style boxplot
The @ref{boxplot} command allows you to change the layout of plots
created using the @ref{boxplot} plot style.

Syntax:
@example
      set style boxplot @{range <r> | fraction <f>@}
                        @{@{no@}outliers@} @{pointtype <p>@}
                        @{candlesticks | financebars@}
                        @{medianlinewidth <width>@}
                        @{separation <x>@}
                        @{labels off | auto | x | x2@}
                        @{sorted | unsorted@}

@end example

The box in the boxplot always spans the range of values from the first
quartile to the third quartile of the data points.  The limit of the whiskers
that extend from the box can be controlled in two different ways. By default
the whiskers extend from each end of the box for a range equal to 1.5 times
the interquartile range (i.e. the vertical height of the box proper).
Each whisker is truncated back toward the median so that it terminates at a
y value belonging to some point in the data set. Since there may be no point
whose value is exactly 1.5 times the interquartile distance, the whisker may
be shorter than its nominal range.  This default corresponds to
@example
      set style boxplot range 1.5

@end example

Alternatively, you can specify the fraction of the total number of points
that the whiskers should span.  In this case the range is extended
symmetrically from the median value until it encompasses the requested fraction
of the data set.  Here again each whisker is constrained to end at a point in
the data set.  To span 95% of the points in the set
@example
      set style boxplot fraction 0.95

@end example

Any points that lie outside the range of the whiskers are considered outliers.
By default these are drawn as individual circles (pointtype 7).  The option
`nooutliers` disables this.
If outliers are not drawn they do not contribute to autoscaling.

By default boxplots are drawn in a style similar to candlesticks, but you have
the option of using instead a style similar to finance bars.

A crossbar indicating the median is drawn using the same line type as box
boundary.  If you want a thicker line for the median
@example
      set style boxplot medianlinewidth 2.0
@end example

If you want no median line, set this to 0.

If the using specification for a boxplot contains a fourth column, the values
in that column will be interpreted as a discrete category to which this data
point belongs.  In this case one boxplot is drawn for each category found in
the input.  These boxplots will be drawn next to each other spaced by 1.0
along x (in x-axis units).  This spacing can be changed by the option
`set style boxplot separation`.

The @ref{labels} option governs how and where these boxplots (each representing a
part of the dataset) are labeled.  By default the category identifier is used
as a tick label on the horizontal axis -- x or x2, depending on which one is
used for the plot itself.  This setting corresponds to option `labels auto`.
The labels can be forced to use either of the x or x2 axes -- options
`labels x` and `labels x2`, respectively --, or they can be turned off
altogether with the option `labels off`.

By default the boxplots corresponding to different categories will be drawn
in the same order the levels are encountered in the data file. This behavior
corresponds to the `unsorted` option. If the `sorted` option is active, the
category identifiers are first sorted alphabetically, and the boxplots are
drawn in the sorted order.

The `separation`, @ref{labels}, `sorted` and `unsorted` option only have an effect
if a fourth column is given the plot specification.

See @ref{boxplot}, @ref{candlesticks}, @ref{financebars}.


@node set_style_data, set_style_fill, boxplot_, style
@subsubsection set style data

@c ?commands set style data
@c ?commands show style data
@c ?set style data
@c ?show style data
@c ?data style
The `set style data` command changes the default plotting style for data
plots.

Syntax:
@example
      set style data <plotting-style>
      show style data

@end example

See `plotting styles` for the choices.
`show style data` shows the current default data plotting style.

@node set_style_fill, set_style_function, set_style_data, style
@subsubsection set style fill

@c ?commands set style fill
@c ?commands show style fill
@c ?set style fill
@c ?show style fill
@cindex fillstyle

The `set style fill` command is used to set the default style of the plot
elements in plots with boxes, histograms, candlesticks and filledcurves.
This default can be superseded by fillstyles attached to individual plots.
Note that there is a separate default fill style for rectangles created by
`set obj`. See @ref{rectangle}.

Syntax:
@example
      set style fill @{empty
                      | @{transparent@} solid @{<density>@}
                      | @{transparent@} pattern @{<n>@}@}
                     @{border @{lt@} @{lc <colorspec>@} | noborder@}

@end example

The default fillstyle is `empty`.

The `solid` option causes filling with a solid color, if the terminal
supports that. The <density> parameter specifies the intensity of the
fill color. At a <density> of 0.0, the box is empty, at <density> of 1.0,
the inner area is of the same color as the current linetype.
Some terminal types can vary the density continuously; others implement
only a few levels of partial fill.  If no <density> parameter is given,
it defaults to 1.

The `pattern` option causes filling to be done with a fill pattern supplied
by the terminal driver.  The kind and number of available fill patterns
depend on the terminal driver.  If multiple datasets using filled boxes are
plotted, the pattern cycles through all available pattern types, starting
from pattern <n>, much as the line type cycles for multiple line plots.

The `empty` option causes filled boxes not to be filled. This is the default.

@cindex fillcolor

@cindex fc

Fill color (`fillcolor <colorspec>`) is distinct from fill style.  I.e.  plot
elements or objects can share a fillstyle while retaining separate colors.
In most places where a fillstyle is accepted you can also specify a fill color.
Fillcolor may be abbreviated `fc`.
Otherwise the fill color is take from the current linetype.
Example:

@example
      plot FOO with boxes fillstyle solid 1.0 fillcolor "cyan"

@end example



@noindent --- SET STYLE FILL BORDER ---

@c ?commands set style fill border
@c ?set style fill border
@c ?fillstyle border
@cindex border
@opindex border


The bare keyword @ref{border} causes the filled object to be surrounded by a
solid line of the current linetype and color.  You can change the color of
this line by adding either a linetype or a linecolor.
`noborder` specifies that no bounding line is drawn.
Examples:
@example
     # Half-intensity fill, full intensity border in same color
     set style fill solid 0.5 border
     # Half-transparent fill, solid black border (linetype -1)
     set style fill transparent solid 0.5 border -1
     # Pattern fill in current color, border using color of linetype 5
     plot ... with boxes fillstyle pattern 2 border lt 5
     # Fill area in cyan, border in blue
     plot ... with boxes fillcolor "cyan" fs solid border linecolor "blue"

@end example

Note: The border property of a fill style only affects plots drawn
@ref{filledcurves} in the default mode (closed curve).


@noindent --- SET STYLE FILL TRANSPARENT ---

@c ?commands set style fill transparent
@c ?set style fill transparent
@c ?fillstyle transparent
@cindex transparent

Some terminals support the attribute `transparent` for filled areas.
In the case of transparent solid fill areas, the `density` parameter is
interpreted as an alpha value; that is, density 0 is fully transparent,
density 1 is fully opaque.  In the case of transparent pattern fill, the
background of the pattern is either fully transparent or fully opaque.

Note that there may be additional limitations on the creation or viewing of
graphs containing transparent fill areas.  For example, the png terminal can
only use transparent fill if the "truecolor" option is set.  Some pdf viewers
may not correctly display the fill areas even if they are correctly described
in the pdf file. Ghostscript/gv does not correctly display pattern-fill areas
even though actual PostScript printers generally have no problem.

@node set_style_function, set_style_histogram, set_style_fill, style
@subsubsection set style function

@c ?commands set style function
@c ?commands show style function
@c ?set style function
@c ?show style function
The `set style function` command changes the default plotting style for
function plots (e.g. lines, points, filledcurves).  See `plotting styles`.

Syntax:
@example
      set style function <plotting-style>
      show style function

@end example

@node set_style_histogram, set_style_increment, set_style_function, style
@subsubsection set style histogram

@c ?commands set style histogram
See @ref{histograms}.

@node set_style_increment, set_style_line, set_style_histogram, style
@subsubsection set style increment

@c ?commands set style increment
@c ?set style increment
By default, successive plots within the same graph will use successive
linetypes.  `set style increment userstyles` changed this to step through
successive user-defined line styles instead.

DEPRECATED.  This command is present in gnuplot version 6.0 only if your
copy was built with configuration option --enable-backward-compatibility.
Instead use `set linetype` to redefine a convenient range of linetypes
for the program to use.  See `set linetype`.

@node set_style_line, set_style_circle, set_style_increment, style
@subsubsection set style line

@c ?commands set style line
@c ?commands unset style line
@c ?commands show style line
@c ?set style line
@c ?unset style line
@c ?show style line
@cindex linestyle

@cindex linewidth

@cindex linewidth

@cindex interval

@cindex linespoints

@cindex pointinterval

@cindex pointnumber

Each terminal has a default set of line and point types, which can be seen
by using the command `test`.  `set style line` defines a set of line types
and widths and point types and sizes so that you can refer to them later by
an index instead of repeating all the information at each invocation.

Syntax:
@example
      set style line <index> default
      set style line <index> @{@{linetype  | lt@} <line_type> | <colorspec>@}
                             @{@{linecolor | lc@} <colorspec>@}
                             @{@{linewidth | lw@} <line_width>@}
                             @{@{pointtype | pt@} <point_type>@}
                             @{@{pointsize | ps@} <point_size>@}
                             @{@{pointinterval | pi@} <interval>@}
                             @{@{pointnumber | pn@} <max_symbols>@}
                             @{@{dashtype | dt@} <dashtype>@}
                             @{palette@}
      unset style line
      show style line

@end example

`default` sets all line style parameters to those of the linetype with
that same index.

If the linestyle <index> already exists, only the given parameters are
changed while all others are preserved.  If not, all undefined values are
set to the default values.

Line styles created by this mechanism do not replace the default linetype
styles; both may be used.  Line styles are temporary. They are lost whenever
you execute a @ref{reset} command.  To redefine the linetype itself,
please see `set linetype`.

The line and point types default to the index value. The exact symbol that is
drawn for that index value may vary from one terminal type to another.

The line width and point size are multipliers for the current terminal's
default width and size (but note that <point_size> here is unaffected by
the multiplier given by the command@ref{pointsize}).

The `pointinterval` controls the spacing between points in a plot drawn with
style @ref{linespoints}.  The default is 0 (every point is drawn). For example,
`set style line N pi 3` defines a linestyle that uses pointtype N, pointsize
and linewidth equal to the current defaults for the terminal, and will draw
every 3rd point in plots using @ref{linespoints}.  A negative value for the
interval is treated the same as a positive value, except that some terminals
will try to interrupt the line where it passes through the point symbol.

The `pointnumber` property is similar to `pointinterval` except that rather
than plotting every Nth point it limits the total number of points to N.

Not all terminals support the `linewidth` and @ref{pointsize} features; if
not supported, the option will be ignored.

Terminal-independent colors may be assigned using either
`linecolor <colorspec>` or `linetype <colorspec>`, abbreviated `lc` or `lt`.
This requires giving a RGB color triple, a known palette color name,
a fractional index into the current palette, or a constant value from the
current mapping of the palette onto cbrange.
See `colors`, @ref{colorspec}, @ref{palette}, @ref{colornames}, @ref{cbrange}.

`set style line <n> linetype <lt>` will set both a terminal-dependent dot/dash
pattern and color. The commands`set style line <n> linecolor <colorspec>` or
`set style line <n> linetype <colorspec>` will set a new line color while
leaving the existing dot-dash pattern unchanged.

In 3d mode (`splot` command), the special keyword @ref{palette} is allowed as a
shorthand for "linetype palette z".  The color value corresponds to the
z-value (elevation) of the splot, and varies smoothly along a line or surface.

Examples:
Suppose that the default lines for indices 1, 2, and 3 are red, green, and
blue, respectively, and the default point shapes for the same indices are a
square, a cross, and a triangle, respectively.  Then

@example
      set style line 1 lt 2 lw 2 pt 3 ps 0.5

@end example

defines a new linestyle that is green and twice the default width and a new
pointstyle that is a half-sized triangle.  The commands

@example
      set style function lines
      plot f(x) lt 3, g(x) ls 1

@end example

will create a plot of f(x) using the default blue line and a plot of g(x)
using the user-defined wide green line.  Similarly the commands

@example
      set style function linespoints
      plot p(x) lt 1 pt 3, q(x) ls 1

@end example

will create a plot of p(x) using the default triangles connected by a red
line and q(x) using small triangles connected by a green line.

@example
      splot sin(sqrt(x*x+y*y))/sqrt(x*x+y*y) w l pal

@end example

creates a surface plot using smooth colors according to @ref{palette}. Note,
that this works only on some terminals. See also @ref{palette}, `set pm3d`.

@example
      set style line 10 linetype 1 linecolor rgb "cyan"

@end example

will assign linestyle 10 to be a solid cyan line on any terminal that
supports rgb colors.


@node set_style_circle, set_style_rectangle, set_style_line, style
@subsubsection set style circle

@c ?commands set style circle
@c ?commands unset style circle
@c ?commands show style circle
@c ?set style circle
@c ?unset style circle
@c ?show style circle

Syntax:
@example
      set style circle @{radius @{graph|screen@} <R>@}
                       @{@{no@}wedge@}
                       @{clip|noclip@}

@end example

This command sets the default radius used in plot style "with circles".  It
applies to data plots with only 2 columns of data (x,y) and to function plots.
The default is "set style circle radius graph 0.02".  `Nowedge` disables
drawing of the two radii that connect the ends of an arc to the center.
The default is `wedge`. This parameter has no effect on full circles. `Clip`
clips the circle at the plot boundaries, `noclip` disables this. Default is
`clip`.


@node set_style_rectangle, set_style_ellipse, set_style_circle, style
@subsubsection set style rectangle

@c ?commands set style rectangle
@c ?commands unset style rectangle
@c ?commands show style rectangle
@c ?set style rectangle
@c ?unset style rectangle
@c ?show style rectangle

Rectangles defined with the @ref{object} command can have individual styles.
However, if the object is not assigned a private style then it inherits a
default that is taken from the @ref{rectangle} command.

Syntax:
@example
    set style rectangle @{front|back@} @{lw|linewidth <lw>@}
                        @{fillcolor <colorspec>@} @{fs <fillstyle>@}

@end example

See @ref{colorspec} and `fillstyle`.  @ref{fillcolor} may be abbreviated as `fc`.

Examples:
@example
    set style rectangle back fc rgb "white" fs solid 1.0 border lt -1
    set style rectangle fc linestyle 3 fs pattern 2 noborder

@end example

The default values correspond to solid fill with the background color and a
black border.


@node set_style_ellipse, set_style_parallelaxis, set_style_rectangle, style
@subsubsection set style ellipse

@c ?commands set style ellipse
@c ?commands show style ellipse
@c ?set style ellipse
@c ?unset style ellipse
@c ?show style ellipse

Syntax:
@example
      set style ellipse @{units xx|xy|yy@}
                        @{size @{graph|screen@} <a>, @{@{graph|screen@} <b>@}@}
                        @{angle <angle>@}
                        @{clip|noclip@}

@end example

This command governs whether the diameters of ellipses are interpreted in
the same units or not.
Default is `xy`, which means that the major diameter (first axis) of
ellipses will be interpreted in the same units as the x (or x2) axis,
while the minor (second) diameter in those of the y (or y2) axis.
In this mode the ratio of the ellipse axes depends on the scales of the
plot axes and aspect ratio of the plot.  When set to `xx` or `yy`,
both axes of all ellipses will be interpreted in the same units.
This means that the ratio of the axes of the plotted ellipses will be
correct even after rotation, but either their vertical or horizontal extent
will not be correct.

This is a global setting that affects all ellipses, both those defined as
objects and those generated with the `plot` command, however, the value of
`units` can also be redefined on a per-plot and per-object basis.

It is also possible to set a default size for ellipses with the @ref{size}
keyword.  This default size applies to data plots with only
2 columns of data (x,y) and to function plots.  The two values are
interpreted as the major and minor diameters (as opposed to semi-major
and semi-minor axes) of the ellipse.

The default is "set style ellipse size graph 0.05,0.03".

Last, but not least it is possible to set the default orientation with the
`angle` keyword. The orientation, which is defined as the angle between the
major axis of the ellipse and the plot's x axis, must be given in degrees.

`Clip` clips the ellipse at the plot boundaries, `noclip` disables this.
Default is `clip`.

For defining ellipse objects, see `set object ellipse`;
for the 2D plot style, see @ref{ellipses}.

@node set_style_parallelaxis, set_style_spiderplot, set_style_ellipse, style
@subsubsection set style parallelaxis

@c ?commands set style parallelaxis
@c ?set style parallelaxis
@c ?show style parallelaxis

Syntax:
@example
      set style parallelaxis @{front|back@} @{line-properties@}

@end example

Determines the line type and layer for drawing the vertical axes in plots
@ref{parallelaxes}.  See @ref{parallelaxes}, @ref{paxis}.

@node set_style_spiderplot, set_style_textbox, set_style_parallelaxis, style
@subsubsection set style spiderplot

@c ?commands set style spiderplot
@c ?set style spiderplot

Syntax:
@example
        set style spiderplot
                  @{fillstyle <fillstyle-properties>@}
                  @{<line-properties> | <point-properties>@}
@end example

This commands controls the default appearance of spider plots.
The fill, line, and point properties can be modified in the first component
of the plot command.  The overall appearance of the plot is also affected
by other settings such as @ref{spiderplot}.  See also @ref{paxis},
@ref{spiderplot}.
Example:
@example
     # Default spider plot will be a polygon with a thick border but no fill
     set style spiderplot fillstyle empty border lw 3
     # This one will additionally place an open circle (pt 6) at each axis
     plot for [i=1:6] DATA pointtype 6 pointsize 3

@end example


@node set_style_textbox, set_style_watchpoint, set_style_spiderplot, style
@subsubsection set style textbox

@c ?commands set style textbox
@c ?commands show style textbox
@c ?set style textbox
@c ?unset style textbox
@c ?show style textbox
@cindex textbox

@cindex boxed


Syntax:
@example
        set style textbox @{<boxstyle-index>@}
                  @{opaque|transparent@} @{fillcolor <color>@}
                  @{@{no@}border @{linecolor <colorspec>@}@}@{linewidth <lw>@}
                  @{margins <xmargin>,<ymargin>@}

@end example

This command controls the appearance of labels with the attribute 'boxed'.
Terminal types that do not support boxed text will ignore this style.
Note: Implementation for some terminals (svg, latex) is incomplete.
Most terminals cannot place a box correctly around rotated text.

Three numbered textbox styles can be defined.  If no boxstyle index <bs>
is given, the default (unnumbered) style is changed.
Example:

@example
     # default style has only a black border
     set style textbox transparent border lc "black"
     # style 2 (bs 2) has a light blue background with no border
     set style textbox 2 opaque fc "light-cyan" noborder
     set label 1 "I'm in a box" boxed
     set label 2 "I'm blue" boxed bs 2

@end example


@node set_style_watchpoint,  , set_style_textbox, style
@subsubsection set style watchpoint

@c ?commands set style watchpoint
@c ?commands show style watchpoint
@c ?set style watchpoint

Syntax:
@example
     set style watchpoint nolabels
     set style watchpoint labels @{label-options@}

@end example

The watchpoint target "mouse" always prints a label to the plot.
Other watchpoint targets either print or do not print a label depending on
whether the style is set to `label` or `nolabel`.

The appearance of watchpoint labels can be customized using the full range
of label properties available to other gnuplot labels, including font,
textcolor, point type and size of a point marking the exact x,y coordinates.
See `set label`.

Currently the text of the label is always autogenerated by the program
using the axis tic formats for the current plot to produce the string
" x-coordinate : y-coordinate".

Examples:
@example
     set style watchpoint labels point pt 4 ps 2
     set style watchpoint labels font ":Italic,6" textcolor "blue"
     set style watchpoint labels boxed offset 1, 0.5

@end example


@node surface_, table, style, set-show
@subsection surface

@c ?commands set surface
@c ?commands unset surface
@c ?commands show surface
@c ?set surface
@c ?unset surface
@c ?show surface
@cindex surface
@opindex surface


@cindex nosurface

The `set surface` command is only relevant for 3D plots (`splot`).

Syntax:
@example
      set surface @{implicit|explicit@}
      unset surface
      show surface

@end example

`unset surface` will cause `splot` to not draw points or lines corresponding
to any of the function or data file points.  This is mainly useful for drawing
only contour lines rather than the surface they were derived from.  Contours
may still be drawn on the surface, depending on the `set contour` option.
To turn off the surface for an individual function or data file while leaving
others active, use the `nosurface` keyword in the `splot` command.
The combination `unset surface; set contour base` is useful for displaying
contours on the grid base.  See also `set contour`.

If a 3D data set is recognizable as a mesh (grid) then by default the program
implicitly treats the plot style `with lines` as requesting a gridded surface.
See `grid_data`.  The command `set surface explicit` suppresses this expansion,
plotting only the individual lines described by separate blocks of data in the
input file.  A gridded surface can still be plotted by explicitly requesting
splot `with surface`.

@node table, terminal, surface_, set-show
@subsection table

@c ?commands set table
@c ?set table
@cindex table
@opindex table


When @ref{table} mode is enabled, `plot` and `splot` commands print out a
multicolumn text table of values
@example
     X Y @{Z@} <flag>
@end example

rather than creating an actual plot on the current terminal. The flag character
is "i" if the point is in the active range, "o" if it is out-of-range, or "u"
if it is undefined.  The data format is determined by the format of the axis
tickmarks (see `set format`), and the columns are separated by single spaces.
This can be useful if you want to generate contours and then save them for
further use.  The same method can be used to save interpolated data
(see @ref{samples} and @ref{dgrid3d}).

Syntax:
@example
      set table @{"outfile" | $datablock@} @{append@}
                @{separator @{whitespace|tab|comma|"<char>"@}@}
      plot <whatever>
      unset table

@end example

Subsequent tabular output is written to "outfile", if specified, otherwise it
is written to stdout or other current value of @ref{output}.  If `outfile`
exists it will be replaced unless the `append` keyword is given.
Alternatively, tabular output can be redirected to a named data block.
Data block names start with '$', see also `inline data`. You must explicitly
@ref{table} in order to go back to normal plotting on the current terminal.

The `separator` character can be used to output csv (comma separated value)
files.  This mode only affects plot style @ref{table}.  See @ref{table}.


@menu
* plot_with_table::
@end menu

@node plot_with_table,  , table, table
@subsubsection plot with table

@c ?plot with table
@c ?with table
This discussion applies only to the special plot style @ref{table}.

To avoid any style-dependent processing of the input data being tabulated
(filters, smoothing, errorbar expansion, secondary range checking, etc),
or to increase the number of columns that can be tabulated, use the keyword
"table" instead of a normal plot style.
In this case the output does not contain an extra column containing a
flag `i`, `o`, `u` indicating inrange/outrange/undefined.
The destination for output must first be specified with `set table <where>`.
For example

@example
     set table $DATABLOCK1
     plot <file> using 1:2:3:4:($5+$6):(func($7)):8:9:10 with table

@end example

Because there is no actual plot style in this case the columns do not
correspond to specific axes.  Therefore xrange, yrange, etc are ignored.

If a `using` term evaluates to a string, the string is tabulated.
Numerical data is always written with format %g.  If you want some other format
use sprintf or gprintf to create a formatted string.

@example
     plot <file> using ("File 1"):1:2:3 with table
     plot <file> using (sprintf("%4.2f",$1)) : (sprintf("%4.2f",$3)) with table

@end example

@cindex csv

To create a csv file use
@example
     set table "tab.csv" separator comma
     plot <foo> using 1:2:3:4 with table

@end example

[EXPERIMENTAL] To select only a subset of the data points for tabulation you
can provide an input filter condition (`if <expression>`) at the end of the
command.  Note that the input filter may reference data columns that are not
part of the output.  Details of this feature may change in a future version.

@example
     plot <file> using 1:2:($4+$5) with table if (strcol(3) eq "Red")
     plot <file> using 1:2:($4+$5) with table if (10. < $1 && $1 < 100.)
     plot <file> using 1:2:($4+$5) with table if (filter($6,$7) != 0)

@end example

@node terminal, termoption, table, set-show
@subsection terminal

@c ?commands set terminal
@c ?commands show terminal
@c ?set terminal
@c ?set term
@c ?show terminal
@c ?show term
@c ?set terminal push
@c ?set term push
@c ?terminal push
@c ?term push
@cindex push

@c ?set terminal pop
@c ?set term pop
@c ?terminal pop
@c ?term pop
@cindex pop

`gnuplot` supports many different graphics devices.  Use @ref{terminal} to
tell `gnuplot` what kind of output to generate. Use @ref{output} to redirect
that output to a file or device.

Syntax:
@example
      set terminal @{<terminal-type> | push | pop@}
      show terminal

@end example

If <terminal-type> is omitted, `gnuplot` will list the available terminal
types.  <terminal-type> may be abbreviated.

If both @ref{terminal} and @ref{output} are used together, it is safest to
give @ref{terminal} first, because some terminals set a flag which is needed
in some operating systems.

Some terminals have many additional options.
The options used by a previous invocation `set term <term> <options>` of a
given `<term>` are remembered, thus subsequent `set term <term>` does
not reset them.  This helps in printing, for instance, when switching
among different terminals---previous options don't have to be repeated.

The command `set term push` remembers the current terminal including its
settings while `set term pop` restores it. This is equivalent to `save term`
and `load term`, but without accessing the filesystem. Therefore they can be
used to achieve platform independent restoring of the terminal after printing,
for instance. After gnuplot's startup, the default terminal or that from
`startup` file is pushed automatically. Therefore portable scripts can rely
that `set term pop` restores the default terminal on a given platform unless
another terminal has been pushed explicitly.

For more information, see the `complete list of terminals`.


@node termoption, theta, terminal, set-show
@subsection termoption

@c ?commands set termoption
@c ?set termoption
@cindex termoption
@opindex termoption


The @ref{termoption} command allows you to change the behaviour of the
current terminal without requiring a new @ref{terminal} command. Only one
option can be changed per command, and only a small number of options can
be changed this way. Currently the only options accepted are

@example
     set termoption @{no@}enhanced
     set termoption font "<fontname>@{,<fontsize>@}"
     set termoption fontscale <scale>
     set termoption @{linewidth <lw>@}@{lw <lw>@} @{dashlength <dl>@}@{dl <dl>@}
     set termoption @{pointscale <scale>@} @{ps <scale>@}

@end example


@node theta, tics, termoption, set-show
@subsection theta

@c ?commands set theta
@c ?set theta
@c ?unset theta
@cindex theta
@opindex theta


Polar coordinate plots are by default oriented such that theta = 0 is on the
right side of the plot, with theta increasing as you proceed counterclockwise
so that theta = 90 degrees is at the top.  @ref{theta} allows you to change
the origin and direction of the polar angular coordinate theta.
@example
     set theta @{right|top|left|bottom@}
     set theta @{clockwise|cw|counterclockwise|ccw@}
@end example

@ref{theta} restores the default state "set theta right ccw".

@node tics, ticslevel, theta, set-show
@subsection tics

@c ?commands set tics
@c ?commands unset tics
@c ?commands show tics
@c ?set tics scale
@c ?set tics
@c ?unset tics
@c ?show tics
@cindex tics
@opindex tics


The `set tics` command controls the tic marks and labels on all axes at once.

The tics may be turned off with the `unset tics` command, and may be turned on
(the default state) with `set tics`.  Fine control of tics on individual axes
is possible using the alternative commands `set xtics`, @ref{ztics}, etc.

Syntax:
@example
      set tics @{axis | border@} @{@{no@}mirror@}
               @{in | out@} @{front | back@}
               @{@{no@}rotate @{by <ang>@}@} @{offset <offset> | nooffset@}
               @{left | right | center | autojustify@}
               @{format "formatstring"@} @{font "name@{,<size>@}"@} @{@{no@}enhanced@}
               @{ textcolor <colorspec> @}
      set tics scale @{default | <major> @{,<minor>@}@}
      unset tics
      show tics

@end example

The options can be applied to a single axis (x, y, z, x2, y2, cb), e.g.
@example
      set xtics rotate by -90
      unset cbtics

@end example

All tic marks are drawn using the same line properties as the plot border
(see @ref{border}).

Set tics `back` or `front` applies to all axes at once, but only for 2D plots
(not splot).  It controls whether the tics are placed behind or in front of
the plot elements, in the case that there is overlap.

`axis` or @ref{border} tells `gnuplot` to put the tics (both the tics themselves
and the accompanying labels) along the axis or the border, respectively.  If
the axis is very close to the border, the `axis` option will move the
tic labels to outside the border in case the border is printed (see
@ref{border}).  The relevant margin settings will usually be sized badly by
the automatic layout algorithm in this case.

`mirror` tells `gnuplot` to put unlabeled tics at the same positions on the
opposite border.  `nomirror` does what you think it does.

`in` and `out` change the tic marks to be drawn inwards or outwards.

`set tics scale` controls the size of the tic marks.  The first value <major>
controls the auto-generated or user-specified major tics (level 0).  The
second value controls the auto-generated or user-specified minor tics
(level 1).  <major> defaults to 1.0, <minor> defaults to <major>/2.
Additional values control the size of user-specified tics with level 2, 3, ...
Default tic sizes are restored by `set tics scale default`.

`rotate` asks `gnuplot` to rotate the text through 90 degrees, which will be
done if the terminal driver in use supports text rotation.  `norotate`
cancels this. `rotate by <ang>` asks for rotation by <ang> degrees, supported
by some terminal types.

The defaults are `border mirror norotate` for tics on the x and y axes, and
`border nomirror norotate` for tics on the x2 and y2 axes.  For the z axis,
the default is `nomirror`.

The <offset> is specified by either x,y or x,y,z, and may be preceded by
`first`, `second`, `graph`, `screen`, or `character` to select the
coordinate system. <offset> is the offset of the tics texts from their
default positions, while the default coordinate system is `character`.
See `coordinates` for details. `nooffset` switches off the offset.

By default, tic labels are justified automatically depending on the axis and
rotation angle to produce aesthetically pleasing results. If this is not
desired, justification can be overridden with an explicit `left`, `right` or
`center` keyword. `autojustify` restores the default behavior.

`set tics` with no options restores mirrored, inward-facing tic marks for
the primary axes. All other settings are retained.

See also `set xtics` for more control of major (labeled) tic marks and
`set mxtics` for control of minor tic marks.  These commands provide control
of each axis independently.

@node ticslevel, ticscale, tics, set-show
@subsection ticslevel

@c ?commands set ticslevel
@c ?commands show ticslevel
@c ?set ticslevel
@c ?show ticslevel
@cindex ticslevel
@opindex ticslevel


Deprecated. See @ref{xyplane}.

@node ticscale, timestamp, ticslevel, set-show
@subsection ticscale

@c ?commands set ticscale
@c ?commands show ticscale
@c ?set ticscale
@c ?show ticscale
@cindex ticscale
@opindex ticscale


The @ref{ticscale} command is deprecated, use `set tics scale` instead.

@node timestamp, timefmt, ticscale, set-show
@subsection timestamp

@c ?commands set timestamp
@c ?commands unset timestamp
@c ?commands show timestamp
@c ?set timestamp
@c ?unset timestamp
@c ?show timestamp
@cindex timestamp
@opindex timestamp


@cindex notimestamp

The command @ref{timestamp} places the current time and date in the plot margin.

Syntax:
@example
      set timestamp @{"<format>"@} @{top|bottom@} @{@{no@}rotate@}
                    @{offset <xoff>@{,<yoff>@}@} @{font "<fontspec>"@}
                    @{textcolor <colorspec>@}
      unset timestamp
      show timestamp

@end example

The format string is used to write the date and time.  Its default value is
what asctime() uses: "%a %b %d %H:%M:%S %Y" (weekday, month name, day of the
month, hours, minutes, seconds, four-digit year).  With `top` or `bottom` you
can place the timestamp along the top left or bottom left margin
(default: bottom).  `rotate` writes the timestamp vertically. The constants
<xoff> and <yoff> are offsets that let you adjust the position more finely.
<font> is used to specify the font with which the time is to be written.

Example:
@example
      set timestamp "%d/%m/%y %H:%M" offset 80,-2 font "Helvetica"

@end example

See @ref{timefmt} for more information about time format strings.

@node timefmt, title_, timestamp, set-show
@subsection timefmt

@c ?commands set timefmt
@c ?commands show timefmt
@c ?set timefmt
@c ?show timefmt
@cindex timefmt
@opindex timefmt


This command sets the default format used to input time data.
See `set xdata time`, `timecolumn`.

Syntax:
@example
      set timefmt "<format string>"
      show timefmt

@end example

The valid formats for both @ref{timefmt} and `timecolumn` are:


@example
      Format       Explanation
      %d           day of the month, 1--31
      %m           month of the year, 1--12
      %y           year, 0--99
      %Y           year, 4-digit
      %j           day of the year, 1--365
      %H           hour, 0--24
      %M           minute, 0--60
      %s           seconds since the Unix epoch (1970-01-01, 00:00 UTC)
      %S           second, integer 0--60 on output, (double) on input
      %b           three-character abbreviation of the name of the month
      %B           name of the month
      %p           two character match to one of:  am AM pm PM

@end example



@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="center">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr>    <th>Format</th>    <th>Explanation</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr>    <td><tt>%d</tt></td>    <td>day of the month, 1&ndash;31</td></tr>
@c ^<tr>    <td><tt>%m</tt></td>    <td>month of the year, 1&ndash;12</td></tr>
@c ^<tr>    <td><tt>%y</tt></td>    <td>year, 0&ndash;99</td></tr>
@c ^<tr>    <td><tt>%Y</tt></td>    <td>year, 4-digit</td></tr>
@c ^<tr>    <td><tt>%j</tt></td>    <td>day of the year, 1&ndash;365</td></tr>
@c ^<tr>    <td><tt>%H</tt></td>    <td>hour, 0&ndash;24</td></tr>
@c ^<tr>    <td><tt>%M</tt></td>    <td>minute, 0&ndash;60</td></tr>
@c ^<tr>    <td><tt>%s</tt></td>    <td>seconds since the Unix epoch (1970-01-01 00:00 UTC)</td></tr>
@c ^<tr>    <td><tt>%S</tt></td>    <td>second, integer 0&ndash;60 on output, (double) on input</td></tr>
@c ^<tr>    <td><tt>%b</tt></td>    <td>three-character abbreviation of the name of the month</td></tr>
@c ^<tr>    <td><tt>%B</tt></td>    <td>name of the month</td></tr>
@c ^<tr>    <td><tt>%p</tt></td>    <td>two-character match to one of: am AM pm PM</td></tr>
@c ^</tbody>
@c ^</table>

Any character is allowed in the string, but must match exactly.  \t (tab) is
recognized.  Backslash-octals (\nnn) are converted to char.  If there is no
separating character between the time/date elements, then %d, %m, %y, %H, %M
and %S read two digits each.  If a decimal point immediately follows the field
read by %S, the decimal and any following digits are interpreted as a
fractional second.  %Y reads four digits. %j reads three digits.
%b requires three characters, and %B requires as many as it needs.

Spaces are treated slightly differently.  A space in the string stands for
zero or more whitespace characters in the file.  That is, "%H %M" can be used
to read "1220" and "12     20" as well as "12 20".

Each set of non-blank characters in the timedata counts as one column in the
`using n:n` specification.  Thus `11:11  25/12/76  21.0` consists of three
columns.  To avoid confusion, `gnuplot` requires that you provide a complete
`using` specification if your file contains timedata.

If the date format includes the day or month in words, the format string must
exclude this text.  But it can still be printed with the "%a", "%A", "%b", or
"%B" specifier.  `gnuplot` will determine the proper month and weekday from the
numerical values.  See `set format` for more details about these and other
options for printing time data.

When reading two-digit years with %y, values 69-99 refer to the 20th century,
while values 00-68 refer to the 21st century.   NB: This is in accordance with
the UNIX98 spec, but conventions vary widely and two-digit year values are
inherently ambiguous.

If the %p format returns "am" or "AM", hour 12 will be interpreted as hour 0.
If the %p format returns "pm" or "PM", hours < 12 will be increased by 12.

See also @ref{xdata} `time/date` and `time_specifiers` for more information.

Example:
@example
      set timefmt "%d/%m/%Y\t%H:%M"
@end example

tells `gnuplot` to read date and time separated by tab.  (But look closely at
your data---what began as a tab may have been converted to spaces somewhere
along the line; the format string must match what is actually in the file.)
See also
@uref{http://www.gnuplot.info/demo/timedat.html,time data demo.
}

@node title_, tmargin, timefmt, set-show
@subsection title

@c ?commands set title
@c ?commands show title
@c ?set title
@c ?show title
@cindex title
@opindex title


The @ref{title} command produces a plot title that is centered at the top of
the plot.  @ref{title} is a special case of `set label`.

Syntax:
@example
      set title @{"<title-text>"@} @{offset <offset>@} @{font "<font>@{,<size>@}"@}
                @{@{textcolor | tc@} @{<colorspec> | default@}@} @{@{no@}enhanced@}
      show title

@end example

If <offset> is specified by either x,y or x,y,z the title is moved by the
given offset.  It may be preceded by `first`, `second`, `graph`, `screen`,
or `character` to select the coordinate system.  See `coordinates` for
details.  By default, the `character` coordinate system is used.  For
example, "`set title offset 0,-1`" will change only the y offset of the
title, moving the title down by roughly the height of one character.  The
size of a character depends on both the font and the terminal.

<font> is used to specify the font with which the title is to be written;
the units of the font <size> depend upon which terminal is used.

`textcolor <colorspec>` changes the color of the text. <colorspec> can be a
linetype, an rgb color, or a palette mapping. See help for @ref{colorspec} and
@ref{palette}.

`noenhanced` requests that the title not be processed by the enhanced text
mode parser, even if enhanced text mode is currently active.

@ref{title} with no parameters clears the title.

See `syntax` for details about the processing of backslash sequences and
the distinction between single- and double-quotes.

@node tmargin, trange, title_, set-show
@subsection tmargin

@c ?commands set tmargin
@c ?set tmargin
@cindex tmargin
@opindex tmargin


The command @ref{tmargin} sets the size of the top margin.
Please see @ref{margin} for details.

@node trange, ttics, tmargin, set-show
@subsection trange

@c ?commands set trange
@c ?commands show trange
@c ?set trange
@c ?show trange
@cindex trange
@opindex trange


Syntax:    set trange [tmin:tmax]
The range of the parametric variable t is useful in three contexts.
@itemize @bullet
@item
In parametric mode `plot` commands it limits the range of sampling
for both generating functions.  See @ref{parametric}, @ref{samples}.
@item
In polar mode `plot` commands it limits or defines the acceptable
range of the angular parameter theta during input.  Data points
with theta value outside this range are excluded from the plot even
if they would otherwise lie inside the plot boundary. See `polar`.
@item
In `plot` or `splot` commands using 1-dimensional sampled data via
the pseudofile "+".  See `sampling 1D`, @ref{special-filenames}.
@end itemize

@node ttics, urange, trange, set-show
@subsection ttics

@c ?commands set ttics
@c ?commands show ttics
@c ?set ttics
@c ?show ttics
@cindex ttics
@opindex ttics


The @ref{ttics} command places tics around the perimeter of a polar plot.
This is the border if `set border polar` is enabled, otherwise the outermost
circle of the polar grid drawn at the rightmost ticmark along the r axis.
See `set grid`, @ref{rtics}. The angular position is always labeled in degrees.
The full perimeter can be labeled regardless of the current trange setting.
The desired range of the tic labels should be given as shown below.
Additional properties of the tic marks can be set. See `xtics`.

@example
     set ttics -180, 30, 180
     set ttics add ("Theta = 0" 0)
     set ttics font ":Italic" rotate
@end example

D ttics 3

@node urange, version, ttics, set-show
@subsection urange

@c ?commands set urange
@c ?commands show urange
@c ?set urange
@c ?show urange
@cindex urange
@opindex urange


Syntax:     set urange [umin:umax]
The range of the parametric variables u and v is useful in two contexts.
1) `splot` in parametric mode. See @ref{parametric}, @ref{isosamples}.
2) generating 2-dimension sampled data for either `plot` or `splot` using the
pseudofile "++". See `sampling 2D`.

@node version, vgrid, urange, set-show
@subsection version

@c ?show version
@c ?show version long
The @ref{version} command lists the version of gnuplot being run, its last
modification date, the copyright holders, and email addresses for the FAQ,
the gnuplot-info mailing list, and reporting bugs--in short, the information
listed on the screen when the program is invoked interactively.

Syntax:
@example
      show version @{long@}

@end example

Show version `long` also lists the operating system, configuration and
compilation options used when this copy of `gnuplot` was built.

@node vgrid, view, version, set-show
@subsection vgrid

@c ?commands set vgrid
@c ?set vgrid
@c ?unset vgrid
@c ?show vgrid
@cindex vgrid
@opindex vgrid


Syntax:
@example
     set vgrid $gridname @{size N@}
     unset vgrid $gridname
     show vgrid

@end example

If the named grid already exists, mark it as active (use it for subsequent
@ref{vfill} and `voxel` operations).  If a new size is given, replace the existing
content with a zero-filled N x N x N grid.  If a grid with this name does not
already exist, allocate an N x N x N grid (default N=100), zero the contents,
and mark it as active.  Note that grid names must begin with '$'.

@ref{vgrid} lists all currently defined voxel grids.
Example output:
@example
      $vgrid1: (active)
               size 100 X 100 X 100
               vxrange [-4:4]  vyrange[-4:4]  vzrange[-4:4]
               non-zero voxel values:  min 0.061237 max 94.5604
               number of zero voxels:  992070   (99.21%)

@end example

`unset vgrid $gridname` releases all data structures associated with that
voxel grid.  The data structures are also released by `reset session`.
The function `voxel(x,y,z)` returns the value of the active grid point
nearest that coordinate. See also `splot voxel-grids`.


@node view, vrange, vgrid, set-show
@subsection view

@c ?commands set view
@c ?commands show view
@c ?set view
@c ?set view map
@c ?show view
@cindex view
@opindex view


The @ref{view} command sets the viewing angle for `splot`s.  It controls how
the 3D coordinates of the plot are mapped into the 2D screen space.  It
provides controls for both rotation and scaling of the plotted data, but
supports orthographic projections only.  It supports both 3D projection or
orthogonal 2D projection into a 2D plot-like map.

Syntax:
@example
      set view <rot_x>@{,@{<rot_z>@}@{,@{<scale>@}@{,<scale_z>@}@}@}
      set view map @{scale <scale>@}
      set view projection @{xy|xz|yz@}
      set view @{no@}equal @{xy|xyz@}
      set view azimuth <angle>
      show view

@end example

where <rot_x> and <rot_z> control the rotation angles (in degrees) in a
virtual 3D coordinate system aligned with the screen such that initially
(that is, before the rotations are performed) the screen horizontal axis is
x, screen vertical axis is y, and the axis perpendicular to the screen is z.
The first rotation applied is <rot_x> around the x axis.  The second rotation
applied is <rot_z> around the new z axis.

Command `set view map` is used to represent the drawing as a map. It is useful
for `contour` plots or 2D heatmaps using pm3d mode rather than `with image`.
In the latter case, take care that you properly use @ref{zrange} and @ref{cbrange} for
input data point filtering and color range scaling, respectively.

<rot_x> is bounded to the [0:180] range with a default of 60 degrees, while
<rot_z> is bounded to the [0:360] range with a default of 30 degrees.
<scale> controls the scaling of the entire `splot`, while <scale_z> scales
the z axis only.  Both scales default to 1.0.

Examples:
@example
      set view 60, 30, 1, 1
      set view ,,0.5

@end example

The first sets all the four default values.  The second changes only scale,
to 0.5.

@menu
* azimuth::
* equal_axes::
* projection::
@end menu

@node azimuth, equal_axes, view, view
@subsubsection azimuth

@c ?set view azimuth
@c ?view azimuth
@cindex azimuth

@example
      set view azimuth <angle-in-degrees>
@end example

The setting of azimuth affects the orientation of the z axis in a 3D graph
(splot). At the default azimuth = 0 the z axis of the plot lies in the plane
orthogonal to the screen horizontal.  I.e. the projection of the z axis lies
along the screen vertical.  Non-zero azimuth rotates the plot about the line
of sight through the origin so that a projection of the z axis is no longer
vertical.  When azimuth = 90 the z axis is horizontal rather than vertical.
During interactive viewing, hot-key `z` resets azimuth to 0.

@node equal_axes, projection, azimuth, view
@subsubsection equal_axes

@c ?set view equal_axes
@c ?set view equal xyz
@c ?set view equal
@c ?view equal_axes
@c ?view equal xyz
@cindex equal_axes

@c ?equal xyz
The command `set view equal xy` forces the unit length of the x and y axes
to be on the same scale, and chooses that scale so that the plot will fit on
the page.  The command `set view equal xyz` additionally sets the z axis
scale to match the x and y axes; however there is no guarantee that the
z axis range will fit within the plot boundary.  See also @ref{isotropic}.
By default all three axes are scaled independently to fill the available area.

See also @ref{xyplane}.

@node projection,  , equal_axes, view
@subsubsection projection

@c ?set view projection
@c ?view projection
@cindex projection

Syntax:
@example
     set view projection @{xy|xz|yz@}
@end example

Rotates the view angles of a 3D plot so that one of the primary planes
xy, xz, or yz lies in the plane of the plot.  Axis label and tic positioning
is adjusted accordingly;  tics and labels on the third axis are disabled.
The plot is scaled up to approximately match the size that 'plot' would
generate for the same axis ranges.
`set view projection xy` is equivalent to `set view map`.

When the x and y coordinates used to specify objects, labels, arrows and other
elements are both provided as "graph" coordinates, then in projection views
they are interpreted as "horizontal/vertical" rather than "x/y".

@example
    set key top right at graph 0.95, graph 0.95     # works in any projection

@end example


@node vrange, vxrange, view, set-show
@subsection vrange

@c ?commands set vrange
@c ?commands show vrange
@c ?set vrange
@c ?show vrange
@cindex vrange
@opindex vrange


Syntax:     set vrange [vmin:vmax]
The range of the parametric variables u and v is useful in two contexts.
1) `splot` in parametric mode. See @ref{parametric}, @ref{isosamples}.
2) generating 2-dimension sampled data for either `plot` or `splot` using the
pseudofile "++". See `sampling 2D`.

@node vxrange, vyrange, vrange, set-show
@subsection vxrange

@c ?commands set vxrange
@c ?set vxrange
@cindex vxrange
@opindex vxrange


Syntax:      set vxrange [vxmin:vxmax]

Establishes the range of x coordinates spanned by the active voxel grid.
Analogous commands @ref{vyrange} and @ref{vzrange} exist for the other two
dimensions of the voxel grid.  If no explicit ranges have been set prior to
the first @ref{vclear}, @ref{vfill}, or `voxel(x,y,z) = ` command, vmin and vmax
will be copied from the current values of @ref{xrange}.

@node vyrange, vzrange, vxrange, set-show
@subsection vyrange

@c ?commands set vyrange
@c ?set vyrange
@cindex vyrange
@opindex vyrange


See @ref{vxrange}

@node vzrange, walls, vyrange, set-show
@subsection vzrange

@c ?commands set vzrange
@c ?set vzrange
@cindex vzrange
@opindex vzrange


See @ref{vxrange}

@node walls, watchpoints, vzrange, set-show
@subsection walls

@c ?commands set walls
@c ?commands show walls
@c ?set walls
@c ?show walls
@c ?unset walls
@cindex walls
@opindex walls


Syntax:
@example
     set walls
     set wall @{x0|y0|z0|x1|y1@} @{<fillstyle>@} @{fc <fillcolor>@}

@end example

3D surfaces drawn by `splot` lie within a normalized unit cube regardless
of the x y and z axis ranges. The bounding walls of this cube are described by
the planes (graph coord x == 0), (graph coord x == 1), etc.  The @ref{walls}
command renders the walls x0 y0 and z0 as solid surfaces.  By default these
surfaces are semi-transparent (fillstyle transparent solid 0.5).  You can
customize which walls are drawn and also their individual color and fill style.
If you choose to enable walls, you may also want to use `set xyplane 0`.

Example:
@example
     set wall x0; set wall y1; set wall z0 fillstyle solid 1.0 fillcolor "gray"
     splot f(x,y) with pm3d fc "goldenrod"

@end example


@node watchpoints, x2data, walls, set-show
@subsection watchpoints

@c ?commands show watchpoints
@c ?show watchpoints

One or more watchpoints may be set for each component plot in a plot command.
All watchpoint targets and hits from the previous plot command are summarized
by the command @ref{watchpoints}.

Example:
@example
     plot DATA using 1:2 smooth cnormal watch y=0.25 watch y=0.5 watch y=0.75
     show watchpoints

@end example

@example
         Plot title:     "DATA using 1:2 smooth cnormal"
           Watch 1 target y = 0.25         (1 hits)
                   hit 1   x 50.6  y 0.25
           Watch 2 target y = 0.5          (1 hits)
                   hit 1   x 63.6  y 0.5
           Watch 3 target y = 0.75         (1 hits)
                   hit 1   x 68.3  y 0.75

@end example

The coordinates of all points satisfying the first watchpoint (y=0.25) are
stored in an array WATCH_1.  The points satisfying (y=0.5) are stored in an
array WATCH_2, and so on.

Each hit is stored as a complex number with x as the real component and
y as the imaginary component.  So the first hit of watchpoint 2 has
x = real(WATCH_2[1])  y = imag(WATCH_2[1]).  In this example only the
x coordinates of the hits are interesting, as the y coordinates will always
match the corresponding target y value.  However if the watchpoint target
is a z value or a function f(x,y), neither the x or the y coordinate of a hit
is known in advance.


@node x2data, x2dtics, watchpoints, set-show
@subsection x2data

@c ?commands set x2data
@c ?commands show x2data
@c ?set x2data
@c ?show x2data
@cindex x2data
@opindex x2data


The @ref{x2data} command sets data on the x2 (top) axis to timeseries
(dates/times).  Please see @ref{xdata}.

@node x2dtics, x2label, x2data, set-show
@subsection x2dtics

@c ?commands set x2dtics
@c ?commands unset x2dtics
@c ?commands show x2dtics
@c ?set x2dtics
@c ?unset x2dtics
@c ?show x2dtics
@cindex x2dtics
@opindex x2dtics


@cindex nox2dtics

The @ref{x2dtics} command changes tics on the x2 (top) axis to days of the
week.  Please see @ref{xdtics} for details.

@node x2label, x2mtics, x2dtics, set-show
@subsection x2label

@c ?commands set x2label
@c ?commands show x2label
@c ?set x2label
@c ?show x2label
@cindex x2label
@opindex x2label


The @ref{x2label} command sets the label for the x2 (top) axis.
Please see @ref{xlabel}.

@node x2mtics, x2range, x2label, set-show
@subsection x2mtics

@c ?commands set x2mtics
@c ?commands unset x2mtics
@c ?commands show x2mtics
@c ?set x2mtics
@c ?unset x2mtics
@c ?show x2mtics
@cindex x2mtics
@opindex x2mtics


@cindex nox2mtics

The @ref{x2mtics} command changes tics on the x2 (top) axis to months of the
year.  Please see @ref{xmtics} for details.

@node x2range, x2tics, x2mtics, set-show
@subsection x2range

@c ?commands set x2range
@c ?commands show x2range
@c ?set x2range
@c ?show x2range
@cindex x2range
@opindex x2range


The @ref{x2range} command sets the horizontal range that will be displayed on
the x2 (top) axis.  See @ref{xrange} for the full set of command options.
See also @ref{link}.

@node x2tics, x2zeroaxis, x2range, set-show
@subsection x2tics

@c ?commands set x2tics
@c ?commands unset x2tics
@c ?commands show x2tics
@c ?set x2tics
@c ?unset x2tics
@c ?show x2tics
@cindex x2tics
@opindex x2tics


@cindex nox2tics

The @ref{x2tics} command controls major (labeled) tics on the x2 (top) axis.
Please see `set xtics` for details.

@node x2zeroaxis, xdata, x2tics, set-show
@subsection x2zeroaxis

@c ?commands set x2zeroaxis
@c ?commands unset x2zeroaxis
@c ?commands show x2zeroaxis
@c ?set x2zeroaxis
@c ?unset x2zeroaxis
@c ?show x2zeroaxis
@cindex x2zeroaxis
@opindex x2zeroaxis


@cindex nox2zeroaxis

The @ref{x2zeroaxis} command draws a line at the origin of the x2 (top) axis
(y2 = 0).  For details, please see @ref{zeroaxis}.

@node xdata, xdtics, x2zeroaxis, set-show
@subsection xdata

@c ?commands set xdata
@c ?commands show xdata
@c ?set xdata
@c ?show xdata
@cindex xdata
@opindex xdata


This command controls interpretation of data on the x axis.
An analogous command acts on each of the other axes.

Syntax:
@example
      set xdata @{time@}
      show xdata

@end example

The same syntax applies to @ref{ydata}, @ref{zdata}, @ref{x2data}, @ref{y2data} and @ref{cbdata}.

The `time` option signals that data represents a time/date in seconds.
Gnuplot version 6 stores time to millisecond precision.

@ref{xdata} (with no `time` keyword) restores data interpretation to normal.

@menu
* time_::
@end menu

@node time_,  , xdata, xdata
@subsubsection time

@c ?commands set xdata time
@c ?set xdata time
`set xdata time` indicates that the x coordinate represents a date or time to
millisecond precision.  There is an analogous command `set ydata time`.

There are separate format mechanisms for interpretation of time data on input
and output.  Input data is read from a file either by using the global
@ref{timefmt} or by using the function timecolumn() as part of the plot command.
These input mechanisms also apply to using time values to set an axis range.
See @ref{timefmt}, `timecolumn`.

Example:

@example
     set xdata time
     set timefmt "%d-%b-%Y"
     set xrange ["01-Jan-2013" : "31-Dec-2014"]
     plot DATA using 1:2
@end example

or
@example
     plot DATA using (timecolumn(1,"%d-%b-%Y")):2

@end example

For output, i.e. tick labels along that axis or coordinates output by mousing,
the function 'strftime' (type "man strftime" on unix to look it up) is used to
convert from the internal time in seconds to a string representation of a date.
`gnuplot` tries to figure out a reasonable format for this.  You can customize
the format using either `set format x` or `set xtics format`.
See `time_specifiers` for a special set of time format specifiers.
See also `time/date` for more information.

@node xdtics, xlabel, xdata, set-show
@subsection xdtics

@c ?commands set xdtics
@c ?commands unset xdtics
@c ?commands show xdtics
@c ?set xdtics
@c ?unset xdtics
@c ?show xdtics
@cindex xdtics
@opindex xdtics


@cindex noxdtics

The @ref{xdtics} commands converts the x-axis tic marks to days of the week
where 0=Sun and 6=Sat.  Overflows are converted modulo 7 to dates.  `set
noxdtics` returns the labels to their default values.  Similar commands do
the same things for the other axes.

Syntax:
@example
      set xdtics
      unset xdtics
      show xdtics

@end example

The same syntax applies to @ref{ydtics}, @ref{zdtics}, @ref{x2dtics}, @ref{y2dtics} and
@ref{cbdtics}.

See also the `set format` command.

@node xlabel, xmtics, xdtics, set-show
@subsection xlabel

@c ?commands set xlabel
@c ?commands show xlabel
@c ?set xlabel
@c ?show xlabel
@cindex xlabel
@opindex xlabel


The @ref{xlabel} command sets the x axis label.  Similar commands set labels
on the other axes.

Syntax:
@example
      set xlabel @{"<label>"@} @{offset <offset>@} @{font "<font>@{,<size>@}"@}
                 @{textcolor <colorspec>@} @{@{no@}enhanced@}
                 @{rotate by <degrees> | rotate parallel | norotate@}
      show xlabel

@end example

The same syntax applies to @ref{x2label}, @ref{ylabel}, @ref{y2label}, @ref{zlabel} and
@ref{cblabel}.

If <offset> is specified by either x,y or x,y,z the label is moved by the
given offset.  It may be preceded by `first`, `second`, `graph`, `screen`,
or `character` to select the coordinate system.  See `coordinates` for
details.  By default, the `character` coordinate system is used.  For
example, "`set xlabel offset -1,0`" will change only the x offset of the
title, moving the label roughly one character width to the left.  The size
of a character depends on both the font and the terminal.

<font> is used to specify the font in which the label is written; the units
of the font <size> depend upon which terminal is used.

`noenhanced` requests that the label text not be processed by the enhanced text
mode parser, even if enhanced text mode is currently active.

To clear a label, put no options on the command line, e.g., "@ref{y2label}".

The default positions of the axis labels are as follows:

xlabel:  The x-axis label is centered below the bottom of the plot.

ylabel:  The y-axis label is centered to the left of the plot, defaulting to
either horizontal or vertical orientation depending on the terminal type.
The program may not reserve enough space to the left of the plot to hold long
non-rotated ylabel text.  You can adjust this with @ref{lmargin}.

zlabel: The z-axis label is centered along the z axis and placed in the space
above the grid level.

cblabel: The color box axis label is centered along the box and placed below
or to the right according to horizontal or vertical color box gradient.

y2label: The y2-axis label is placed to the right of the y2 axis.  The
position is terminal-dependent in the same manner as is the y-axis label.

x2label: The x2-axis label is placed above the plot but below the title.
It is also possible to create an x2-axis label by using new-line
characters to make a multi-line plot title, e.g.,

@example
      set title "This is the title\n\nThis is the x2label"

@end example

Note that double quotes must be used.  The same font will be used for both
lines, of course.

The orientation (rotation angle) of the x, x2, y and y2 axis labels in 2D plots
can be changed by specifying `rotate by <degrees>`.  The orientation of the x
and y axis labels in 3D plots defaults to horizontal but can be changed to run
parallel to the axis by specifying `rotate parallel`.

If you are not satisfied with the default position of an axis label, use `set
label` instead--that command gives you much more control over where text is
placed.

Please see `syntax` for further information about backslash processing
and the difference between single- and double-quoted strings.

@node xmtics, xrange, xlabel, set-show
@subsection xmtics

@c ?commands set xmtics
@c ?commands unset xmtics
@c ?commands show xmtics
@c ?set xmtics
@c ?unset xmtics
@c ?show xmtics
@cindex xmtics
@opindex xmtics


@cindex noxmtics

The @ref{xmtics} command converts the x-axis tic marks to months of the
year where 1=Jan and 12=Dec.  Overflows are converted modulo 12 to months.
The tics are returned to their default labels by @ref{xmtics}.  Similar
commands perform the same duties for the other axes.

Syntax:
@example
      set xmtics
      unset xmtics
      show xmtics

@end example

The same syntax applies to @ref{x2mtics}, @ref{ymtics}, @ref{y2mtics}, @ref{zmtics} and
@ref{cbmtics}.

See also the `set format` command.

@node xrange, xtics, xmtics, set-show
@subsection xrange

@c ?commands set xrange
@c ?commands show xrange
@c ?set xrange
@c ?show xrange
@c ?set range
@cindex writeback

@cindex restore

@cindex xrange
@opindex xrange


The @ref{xrange} command sets the horizontal range that will be displayed.
A similar command exists for each of the other axes, as well as for the
polar radius r and the parametric variables t, u, and v.

Syntax:
@example
      set xrange [@{@{<min>@}:@{<max>@}@}] @{@{no@}reverse@} @{@{no@}writeback@} @{@{no@}extend@}
                 | restore
      show xrange

@end example

where <min> and <max> terms are constants, expressions or an asterisk to set
autoscaling.  If the data are time/date, you must give the range as a quoted
string according to the @ref{timefmt} format.
If <min> or <max> is omitted the current value will not be changed.
See below for full autoscaling syntax.  See also @ref{noextend}.

The same syntax applies to @ref{yrange}, @ref{zrange}, @ref{x2range}, @ref{y2range}, @ref{cbrange},
@ref{rrange}, @ref{trange}, @ref{urange} and @ref{vrange}.

See @ref{link} for options that link the ranges of x and x2, or y and y2.

The `reverse` option reverses the direction of an autoscaled axis. For example,
if the data values range from 10 to 100, it will autoscale to the equivalent of
set xrange [100:10].  The `reverse` flag has no effect if the axis is not
autoscaled.

Autoscaling:  If <min> (the same applies for correspondingly to <max>) is
an asterisk "*" autoscaling is turned on.  The range in which autoscaling
is being performed may be limited by a lower bound <lb> or an upper bound
<ub> or both.  The syntax is
@example
      @{ <lb> < @} * @{ < <ub> @}
@end example

For example,
@example
      0 < * < 200
@end example

sets <lb> = 0 and <ub> = 200.  With such a setting <min> would be autoscaled,
but its final value will be between 0 and 200 (both inclusive despite the
'<' sign).  If no lower or upper bound is specified, the '<' to also be
omitted.  If <ub> is lower than <lb> the constraints will be turned off
and full autoscaling will happen.
This feature is useful to plot measured data with autoscaling but providing
a limit on the range, to clip outliers, or to guarantee a minimum range
that will be displayed even if the data would not need such a big range.

The `writeback` option essentially saves the range found by @ref{autoscale} in
the buffers that would be filled by @ref{xrange}.  This is useful if you wish
to plot several functions together but have the range determined by only
some of them.  The `writeback` operation is performed during the `plot`
execution, so it must be specified before that command.  To restore,
the last saved horizontal range use `set xrange restore`.  For example,

@example
      set xrange [-10:10]
      set yrange [] writeback
      plot sin(x)
      set yrange restore
      replot x/2

@end example

results in a yrange of [-1:1] as found only from the range of sin(x); the
[-5:5] range of x/2 is ignored.  Executing @ref{yrange} after each command
in the above example should help you understand what is going on.

In 2D, @ref{xrange} and @ref{yrange} determine the extent of the axes, @ref{trange}
determines the range of the parametric variable in parametric mode or the
range of the angle in polar mode.  Similarly in parametric 3D, @ref{xrange},
@ref{yrange}, and @ref{zrange} govern the axes and @ref{urange} and @ref{vrange} govern the
parametric variables.

In polar mode, @ref{rrange} determines the radial range plotted.  <rmin> acts as
an additive constant to the radius, whereas <rmax> acts as a clip to the
radius---no point with radius greater than <rmax> will be plotted.  @ref{xrange}
and @ref{yrange} are affected---the ranges can be set as if the graph was of
r(t)-rmin, with rmin added to all the labels.

Any range may be partially or totally autoscaled, although it may not make
sense to autoscale a parametric variable unless it is plotted with data.

Ranges may also be specified on the `plot` command line.  A range given on
the plot line will be used for that single `plot` command; a range given by
a `set` command will be used for all subsequent plots that do not specify
their own ranges.  The same holds true for `splot`.

@menu
* examples__::
* extend::
@end menu

@node examples__, extend, xrange, xrange
@subsubsection examples

@c ?commands set xrange examples
@c ?set xrange examples
@c ?set range examples
@c ?xrange examples
Examples:

To set the xrange to the default:
@example
      set xrange [-10:10]

@end example

To set the yrange to increase downwards:
@example
      set yrange [10:-10]

@end example

To change zmax to 10 without affecting zmin (which may still be autoscaled):
@example
      set zrange [:10]

@end example

To autoscale xmin while leaving xmax unchanged:
@example
      set xrange [*:]

@end example

To autoscale xmin but keeping xmin positive:
@example
      set xrange [0<*:]

@end example

To autoscale x but keep minimum range of 10 to 50 (actual might be larger):
@example
      set xrange [*<10:50<*]

@end example

Autoscaling but limit maximum xrange to -1000 to 1000, i.e. autoscaling
within [-1000:1000]
@example
      set xrange [-1000<*:*<1000]

@end example

Make sure xmin is somewhere between -200 and 100:
@example
      set xrange [-200<*<100:]

@end example

@node extend,  , examples__, xrange
@subsubsection extend

@c ?commands set xrange noextend
@c ?set xrange noextend
@c ?set range noextend
@c ?xrange noextend
@c ?set xrange extend
@c ?set range extend
@c ?xrange extend
@ref{noextend} is the same as @ref{noextend}.
See @ref{noextend}.

@node xtics, xyplane, xrange, set-show
@subsection xtics

@c ?commands set xtics
@c ?commands unset xtics
@c ?commands show xtics
@c ?set xtics
@c ?unset xtics
@c ?show xtics
@cindex xtics
@opindex xtics


@cindex noxtics

Fine control of the major (labeled) tics on the x axis is possible with the
`set xtics` command.  The tics may be turned off with the `unset xtics`
command, and may be turned on (the default state) with `set xtics`.  Similar
commands control the major tics on the y, z, x2 and y2 axes.

Syntax:
@example
      set xtics @{axis | border@} @{@{no@}mirror@}
                @{in | out@} @{scale @{default | <major> @{,<minor>@}@}@}
                @{@{no@}rotate @{by <ang>@}@} @{offset <offset> | nooffset@}
                @{left | right | center | autojustify@}
                @{add@}
                @{  autofreq
                 | <incr>
                 | <start>, <incr> @{,<end>@}
                 | (@{"<label>"@} <pos> @{<level>@} @{,@{"<label>"@}...) @}
                @{format "formatstring"@} @{font "name@{,<size>@}"@} @{@{no@}enhanced@}
                @{ numeric | timedate | geographic @}
                @{@{no@}logscale@}
                @{ rangelimited @}
                @{ textcolor <colorspec> @}
      unset xtics
      show xtics

@end example

The same syntax applies to @ref{ytics}, @ref{ztics}, @ref{x2tics}, @ref{y2tics} and @ref{cbtics}.

`axis` or @ref{border} tells `gnuplot` to put the tics (both the tics themselves
and the accompanying labels) along the axis or the border, respectively.  If
the axis is very close to the border, the `axis` option will move the
tic labels to outside the border.  The relevant margin settings will usually
be sized badly by the automatic layout algorithm in this case.

`mirror` tells `gnuplot` to put unlabeled tics at the same positions on the
opposite border.  `nomirror` does what you think it does.

`in` and `out` change the tic marks to be drawn inwards or outwards.

With `scale`, the size of the tic marks can be adjusted. If <minor> is not
specified, it is 0.5*<major>.  The default size 1.0 for major tics and 0.5
for minor tics is requested by `scale default`.

`rotate` asks `gnuplot` to rotate the text through 90 degrees, which will be
done if the terminal driver in use supports text rotation.  `norotate`
cancels this. `rotate by <ang>` asks for rotation by <ang> degrees, supported
by some terminal types.

The defaults are `border mirror norotate` for tics on the x and y axes, and
`border nomirror norotate` for tics on the x2 and y2 axes.  For the z axis,
the `@{axis | border@}` option is not available and the default is
`nomirror`.  If you do want to mirror the z-axis tics, you might want to
create a bit more room for them with @ref{border}.

The <offset> is specified by either x,y or x,y,z, and may be preceded by
`first`, `second`, `graph`, `screen`, or `character` to select the
coordinate system. <offset> is the offset of the tics texts from their
default positions, while the default coordinate system is `character`.
See `coordinates` for details. `nooffset` switches off the offset.

Example:

Move xtics more closely to the plot.
@example
      set xtics offset 0,graph 0.05

@end example

To change the relative order of drawing axis tics and the plot itself, use
the `set grid` command with options 'front', 'back' or 'layerdefault'.
There is no option to assign different axis tics or grid lines to different
layers.

By default, tic labels are justified automatically depending on the axis and
rotation angle to produce aesthetically pleasing results. If this is not
desired, justification can be overridden with an explicit `left`, `right` or
`center` keyword. `autojustify` restores the default behavior.

`set xtics` with no options restores the default border or axis if xtics are
being displayed;  otherwise it has no effect.  Any previously specified tic
frequency or position @{and labels@} are retained.

Tic positions are calculated automatically by default or if the `autofreq`
option is given.

A series of tic positions can be specified by giving either a tic interval
alone, or a start point, interval, and end point (see `xtics series`).

Individual tic positions can be specified individually by providing an
explicit list of positions, where each position may have an associated
text label. See `xtics list`.

However they are specified, tics will only be plotted when in range.

Format (or omission) of the tic labels is controlled by `set format`, unless
the explicit text of a label is included in the `set xtics ("<label>")` form.

Minor (unlabeled) tics can be added automatically by the `set mxtics`
command, or at explicit positions by the `set xtics ("" <pos> 1, ...)` form.

The appearance of the tics (line style, line width etc.) is determined by the
border line (see @ref{border}), even if the tics are drawn at the axes.

@menu
* xtics_series::
* xtics_list::
* xtics_timedata::
* geographic::
* xtics_logscale::
* xtics_rangelimited::
@end menu

@node xtics_series, xtics_list, xtics, xtics
@subsubsection xtics series

@c ?set xtics series
@c ?xtics series
Syntax:
@example
     set xtics <incr>
     set xtics <start>, <incr>, <end>
@end example

The implicit <start>, <incr>, <end> form specifies that a series of tics will
be plotted on the axis between the values <start> and <end> with an increment
of <incr>.  If <end> is not given, it is assumed to be infinity.  The
increment may be negative.  If neither <start> nor <end> is given, <start> is
assumed to be negative infinity, <end> is assumed to be positive infinity,
and the tics will be drawn at integral multiples of <incr>.  If the axis is
logarithmic, the increment will be used as a multiplicative factor.

If you specify to a negative <start> or <incr> after a numerical value
(e.g., `rotate by <angle>` or `offset <offset>`), the parser fails because
it subtracts <start> or <incr> from that value.  As a workaround, specify
`0-<start>` resp. `0-<incr>` in that case.

Example:
@example
      set xtics border offset 0,0.5 -5,1,5
@end example

Fails with 'invalid expression' at the last comma.
Use instead
@example
      set xtics border offset 0,0.5 0-5,1,5
@end example

or
@example
      set xtics offset 0,0.5 border -5,1,5
@end example

These place tics at the border, tics text with an offset of 0,0.5 characters,
and sets the start, increment, and end to -5, 1, and 5, as requested.

Examples:

Make tics at 0, 0.5, 1, 1.5, ..., 9.5, 10.
@example
      set xtics 0,.5,10

@end example

Make tics at ..., -10, -5, 0, 5, 10, ...
@example
      set xtics 5

@end example

Make tics at 1, 100, 1e4, 1e6, 1e8.
@example
      set logscale x; set xtics 1,100,1e8

@end example


@node xtics_list, xtics_timedata, xtics_series, xtics
@subsubsection xtics list

@c ?set xtics list
@c ?set xtics add
@c ?xtics list
@c ?xtics add
Syntax:
@example
     set xtics @{add@} ("label1" <pos1> <level1>, "label2" <pos2> <level2>, ...)

@end example

The explicit ("label" <pos> <level>, ...) form allows arbitrary tic
positions or non-numeric tic labels.  In this form, the tics do not
need to be listed in numerical order.  Each tic has a
position, optionally with a label.

The label is a string enclosed by quotes or a string-valued expression.
It may contain formatting information for converting the position into its
label, such as "%3f clients", or it may be the empty string "".
See `set format` for more information.  If no string is given, the
default label (numerical) is used.

An explicit tic mark has a third parameter, the level.
The default is level 0, a major tic.  Level 1 generates a minor tic.
Labels are never printed for minor tics.  Major and minor tics may be
auto-generated by the program or specified explicitly by the user.
Tics with level 2 and higher must be explicitly specified by the user, and
take priority over auto-generated tics.  The size of tics marks at each
level is controlled by the command `set tics scale`.

Examples:
@example
      set xtics ("low" 0, "medium" 50, "high" 100)
      set xtics (1,2,4,8,16,32,64,128,256,512,1024)
      set ytics ("bottom" 0, "" 10, "top" 20)
      set ytics ("bottom" 0, "" 10 1, "top" 20)

@end example

In the second example, all tics are labeled.  In the third, only the end
tics are labeled.  In the fourth, the unlabeled tic is a minor tic.

Normally if explicit tics are given, they are used instead of auto-generated
tics. Conversely if you specify `set xtics auto` or the like it will erase
any previously specified explicit tics. You can mix explicit and auto-
generated tics by using the keyword `add`, which must appear before
the tic style being added.

Example:
@example
      set xtics 0,.5,10
      set xtics add ("Pi" 3.14159)

@end example

This will automatically generate tic marks every 0.5 along x, but will
also add an explicit labeled tic mark at pi.

@node xtics_timedata, geographic, xtics_list, xtics
@subsubsection xtics timedata

@c ?set xtics timedata
@c ?xtics timedata tics
@c ?set xtics time
@c ?xtics time
@c ?timedata tics
Times and dates are stored internally as a number of seconds.

Input: Non-numeric time and date values are converted to seconds on input using
the format specifier in @ref{timefmt}.  Axis range limits, tic placement, and plot
coordinates may be given as quoted dates or times interpreted using @ref{timefmt}.

Output: Axis tic labels are generated using a separate format specified either
by `set format` or `set xtics format`.  By default the usual numeric format
specifiers are expected (`set xtics numeric`).  Other options are geographic
coordinates (@ref{geographic}), or times or dates (`set xtics time`).

Note: For backward compatibility with earlier gnuplot versions, the command
`set xdata time` will implicitly also do `set xtics time`, and @ref{xdata}
or @ref{xdata} will implicitly reset to `set xtics numeric`.  However you
can change this with a later call to `set xtics`.

Examples:
@example
      set xdata time           # controls interpretation of input data
      set timefmt "%d/%m"      # format used to read input data
      set xtics timedate       # controls interpretation of output format
      set xtics format "%b %d" # format used for tic labels
      set xrange ["01/12":"06/12"]
      set xtics "01/12", 172800, "05/12"

@end example

@example
      set xdata time
      set timefmt "%d/%m"
      set xtics format "%b %d" time
      set xrange ["01/12":"06/12"]
      set xtics ("01/12", "" "03/12", "05/12")
@end example

Both of these will produce tics "Dec 1", "Dec 3", and "Dec 5", but in the
second example the tic at "Dec 3" will be unlabeled.

If the <start>, <incr>, <end> form is used, <incr> defaults to seconds but an
explicit time unit of `minutes`, `hours`, `days`, `weeks`, `months`, or `years`
can be appended.  The same is true if only an interval <incr> is given.

Examples
@example
     set xtics time 5 years     # place labeled tics at five year intervals
     set xtics "01-Jan-2000", 1 month, "01-Jan-2001"

@end example

There is also a special time mode for minor tics. See `set mxtics time`.

@node geographic, xtics_logscale, xtics_timedata, xtics
@subsubsection geographic

@c ?commands set xtics geographic
@c ?set xtics geographic
@cindex geographic

@ref{geographic} indicates that x-axis values are to be interpreted as
a geographic coordinate measured in degrees.  Use `set xtics format` or
`set format x` to specify the appearance of the axis tick labels.
The format specifiers for geographic data are as follows:
@example
       %D                   = integer degrees
       %<width.precision>d  = floating point degrees
       %M                   = integer minutes
       %<width.precision>m  = floating point minutes
       %S                   = integer seconds
       %<width.precision>s  = floating point seconds
       %E                   = label with E/W instead of +/-
       %N                   = label with N/S instead of +/-
@end example

For example, the command `set format x "%Ddeg %5.2mmin %E"` will cause
x coordinate -1.51 to be labeled as `" 1deg 30.60min W"`.

If the xtics are left in the default state (`set xtics numeric`) the coordinate
will be reported as a decimal number of degrees, and `format` will be assumed
to contain normal numeric format specifiers rather than the special set above.

To output degrees/minutes/seconds in a context other than axis tics, such as
placing labels on a map, you can use the relative time format specifiers
%tH %tM %tS for strptime.  See `time_specifiers`, @ref{strptime}.

@node xtics_logscale, xtics_rangelimited, geographic, xtics
@subsubsection xtics logscale

@c ?set xtics logscale
@c ?xtics logscale
@cindex logscale
@opindex logscale


If the @ref{logscale} attribute is set for a tic series along a log-scaled axis,
the tic interval is interpreted as a multiplicative factor rather than a
constant. For example:
@example
     # generate a series of tics at y=20 y=200 y=2000 y=20000
     set log y
     set ytics 20, 10, 50000 logscale
@end example

Note that no tic is placed at y=50000 because it is not in the series 2*10^x.
If the logscale property is disabled, the tic increment will be treated as
an additive constant even for a log-scaled axis.  For example:
@example
     # generate a series of tics at y=20 y=40 y=60 ... y=200
     set log y
     set yrange [20:200]
     set ytics 20 nologscale
@end example

The @ref{logscale} attribute is set automatically by the `set log` command,
so normally you do not need this keyword unless you want to force a
constant tic interval as in the second example above.

@node xtics_rangelimited,  , xtics_logscale, xtics
@subsubsection xtics rangelimited

@c ?set xtics rangelimited
@c ?xtics rangelimited
@cindex rangelimited

@cindex range-frame

This option limits both the auto-generated axis tic labels and the
corresponding plot border to the range of values actually present in the data
that has been plotted.  Note that this is independent of the current range
limits for the plot. For example, suppose that the data in "file.dat" all lies
in the range 2 < y < 4.  Then the following commands will create a plot for
which the left-hand plot border (y axis) is drawn for only this portion of the
total y range, and only the axis tics in this region are generated.
I.e., the plot will be scaled to the full range on y, but there will be a gap
between 0 and 2 on the left border and another gap between 4 and 10. This
style is sometimes referred to as a `range-frame` graph.
@example
      set border 3
      set yrange [0:10]
      set ytics nomirror rangelimited
      plot "file.dat"

@end example

@node xyplane, xzeroaxis, xtics, set-show
@subsection xyplane

@c ?commands set xyplane
@c ?commands show xyplane
@c ?set xyplane
@c ?show xyplane
@cindex xyplane
@opindex xyplane


The @ref{xyplane} command adjusts the position at which the xy plane is drawn
in a 3D plot.  The synonym "set ticslevel" is accepted for backwards
compatibility.

Syntax:
@example
      set xyplane at <zvalue>
      set xyplane relative <frac>
      set ticslevel <frac>        # equivalent to set xyplane relative
      show xyplane

@end example

The form `set xyplane relative <frac>` places the xy plane below the range in
Z, where the distance from the xy plane to Zmin is given as a fraction of the
total range in z.  The default value is 0.5.  Negative values are permitted,
but tic labels on the three axes may overlap.

The alternative form `set xyplane at <zvalue>` fixes the placement of the
xy plane at a specific Z value regardless of the current z range. Thus to
force the x, y, and z axes to meet at a common origin one would specify
`set xyplane at 0`.

See also @ref{view}, and @ref{zeroaxis}.

@node xzeroaxis, y2data, xyplane, set-show
@subsection xzeroaxis

@c ?commands set xzeroaxis
@c ?commands unset xzeroaxis
@c ?commands show xzeroaxis
@c ?set xzeroaxis
@c ?unset xzeroaxis
@c ?show xzeroaxis
@cindex xzeroaxis
@opindex xzeroaxis


@cindex noxzeroaxis

The @ref{xzeroaxis} command draws a line at y = 0.  For details,
please see @ref{zeroaxis}.

@node y2data, y2dtics, xzeroaxis, set-show
@subsection y2data

@c ?commands set y2data
@c ?commands show y2data
@c ?set y2data
@c ?show y2data
@cindex y2data
@opindex y2data


The @ref{y2data} command sets y2 (right-hand) axis data to timeseries
(dates/times).  Please see @ref{xdata}.

@node y2dtics, y2label, y2data, set-show
@subsection y2dtics

@c ?commands set y2dtics
@c ?commands unset y2dtics
@c ?set y2dtics
@c ?unset y2dtics
@c ?show y2dtics
@cindex y2dtics
@opindex y2dtics


@cindex noy2dtics

The @ref{y2dtics} command changes tics on the y2 (right-hand) axis to days of
the week.  Please see @ref{xdtics} for details.

@node y2label, y2mtics, y2dtics, set-show
@subsection y2label

@c ?commands set y2label
@c ?commands show y2label
@c ?set y2label
@c ?show y2label
@cindex y2label
@opindex y2label


The @ref{y2label} command sets the label for the y2 (right-hand) axis.
Please see @ref{xlabel}.

@node y2mtics, y2range, y2label, set-show
@subsection y2mtics

@c ?commands set y2mtics
@c ?commands unset y2mtics
@c ?commands show y2mtics
@c ?set y2mtics
@c ?unset y2mtics
@c ?show y2mtics
@cindex y2mtics
@opindex y2mtics


@cindex noy2mtics

The @ref{y2mtics} command changes tics on the y2 (right-hand) axis to months
of the year.  Please see @ref{xmtics} for details.

@node y2range, y2tics, y2mtics, set-show
@subsection y2range

@c ?commands set y2range
@c ?commands show y2range
@c ?set y2range
@c ?show y2range
@cindex y2range
@opindex y2range


The @ref{y2range} command sets the vertical range that will be displayed on
the y2 (right) axis.  See @ref{xrange} for the full set of command options.
See also @ref{link}.

@node y2tics, y2zeroaxis, y2range, set-show
@subsection y2tics

@c ?commands set y2tics
@c ?commands unset y2tics
@c ?commands show y2tics
@c ?set y2tics
@c ?unset y2tics
@c ?show y2tics
@cindex y2tics
@opindex y2tics


@cindex noy2tics

The @ref{y2tics} command controls major (labeled) tics on the y2 (right-hand)
axis.  Please see `set xtics` for details.

@node y2zeroaxis, ydata, y2tics, set-show
@subsection y2zeroaxis

@c ?commands set y2zeroaxis
@c ?commands unset y2zeroaxis
@c ?commands show y2zeroaxis
@c ?set y2zeroaxis
@c ?unset y2zeroaxis
@c ?show y2zeroaxis
@cindex y2zeroaxis
@opindex y2zeroaxis


@cindex noy2zeroaxis

The @ref{y2zeroaxis} command draws a line at the origin of the y2 (right-hand)
axis (x2 = 0).  For details, please see @ref{zeroaxis}.

@node ydata, ydtics, y2zeroaxis, set-show
@subsection ydata

@c ?commands set ydata
@c ?commands show ydata
@c ?set ydata
@c ?show ydata
@cindex ydata
@opindex ydata


The @ref{ydata} commands sets y-axis data to timeseries (dates/times).
Please see @ref{xdata}.

@node ydtics, ylabel, ydata, set-show
@subsection ydtics

@c ?commands set ydtics
@c ?commands unset ydtics
@c ?commands show ydtics
@c ?set ydtics
@c ?unset ydtics
@c ?show ydtics
@cindex ydtics
@opindex ydtics


@cindex noydtics

The @ref{ydtics} command changes tics on the y axis to days of the week.
Please see @ref{xdtics} for details.

@node ylabel, ymtics, ydtics, set-show
@subsection ylabel

@c ?commands set ylabel
@c ?commands show ylabel
@c ?set ylabel
@c ?show ylabel
@cindex ylabel
@opindex ylabel


This command sets the label for the y axis.  Please see @ref{xlabel}.

@node ymtics, yrange, ylabel, set-show
@subsection ymtics

@c ?commands set ymtics
@c ?commands unset ymtics
@c ?commands show ymtics
@c ?set ymtics
@c ?unset ymtics
@c ?show ymtics
@cindex ymtics
@opindex ymtics


@cindex noymtics

The @ref{ymtics} command changes tics on the y axis to months of the year.
Please see @ref{xmtics} for details.

@node yrange, ytics, ymtics, set-show
@subsection yrange

@c ?commands set yrange
@c ?commands show yrange
@c ?set yrange
@c ?show yrange
@cindex yrange
@opindex yrange


The @ref{yrange} command sets the vertical range that will be displayed on
the y axis.  Please see @ref{xrange} for details.

@node ytics, yzeroaxis, yrange, set-show
@subsection ytics

@c ?commands set ytics
@c ?commands unset ytics
@c ?commands show ytics
@c ?set ytics
@c ?unset ytics
@c ?show ytics
@cindex ytics
@opindex ytics


@cindex noytics

The @ref{ytics} command controls major (labeled) tics on the y axis.
Please see `set xtics` for details.

@node yzeroaxis, zdata, ytics, set-show
@subsection yzeroaxis

@c ?commands set yzeroaxis
@c ?commands unset yzeroaxis
@c ?commands show yzeroaxis
@c ?set yzeroaxis
@c ?unset yzeroaxis
@c ?show yzeroaxis
@cindex yzeroaxis
@opindex yzeroaxis


@cindex noyzeroaxis

The @ref{yzeroaxis} command draws a line at x = 0.  For details,
please see @ref{zeroaxis}.

@node zdata, zdtics, yzeroaxis, set-show
@subsection zdata

@c ?commands set zdata
@c ?commands show zdata
@c ?set zdata
@c ?show zdata
@cindex zdata
@opindex zdata


The @ref{zdata} command sets zaxis data to timeseries (dates/times).
Please see @ref{xdata}.

@node zdtics, zzeroaxis, zdata, set-show
@subsection zdtics

@c ?commands set zdtics
@c ?commands unset zdtics
@c ?commands show zdtics
@c ?set zdtics
@c ?unset zdtics
@c ?show zdtics
@cindex zdtics
@opindex zdtics


@cindex nozdtics

The @ref{zdtics} command changes tics on the z axis to days of the week.
Please see @ref{xdtics} for details.

@node zzeroaxis, cbdata, zdtics, set-show
@subsection zzeroaxis

@c ?commands set zzeroaxis
@c ?commands unset zzeroaxis
@c ?commands show zzeroaxis
@c ?set zzeroaxis
@c ?unset zzeroaxis
@c ?show zzeroaxis
@cindex zzeroaxis
@opindex zzeroaxis


@cindex nozzeroaxis

The @ref{zzeroaxis} command draws a line through (x=0,y=0).  This has no effect
on 2D plots, including splot with `set view map`. For details, please
see @ref{zeroaxis} and @ref{xyplane}.

@node cbdata, cbdtics, zzeroaxis, set-show
@subsection cbdata

@c ?commands set cbdata
@c ?commands show cbdata
@c ?set cbdata
@c ?show cbdata
@cindex cbdata
@opindex cbdata


Set color box axis data to timeseries (dates/times).  Please see @ref{xdata}.

@node cbdtics, zero, cbdata, set-show
@subsection cbdtics

@c ?commands set cbdtics
@c ?commands unset cbdtics
@c ?commands show cbdtics
@c ?set cbdtics
@c ?unset cbdtics
@c ?show cbdtics
@cindex cbdtics
@opindex cbdtics


@cindex nocbdtics

The @ref{cbdtics} command changes tics on the color box axis to days of the
week. Please see @ref{xdtics} for details.

@node zero, zeroaxis, cbdtics, set-show
@subsection zero

@c ?commands set zero
@c ?commands show zero
@c ?set zero
@c ?show zero
@cindex zero
@opindex zero


The `zero` value is the default threshold for values approaching 0.0.

Syntax:
@example
      set zero <expression>
      show zero

@end example

`gnuplot` will not plot a point if its imaginary part is greater in magnitude
than the `zero` threshold.  This threshold is also used in various other
parts of `gnuplot` as a (crude) numerical-error threshold.  The default
`zero` value is 1e-8.  `zero` values larger than 1e-3 (the reciprocal of the
number of pixels in a typical bitmap display) should probably be avoided, but
it is not unreasonable to set `zero` to 0.0.

@node zeroaxis, zlabel, zero, set-show
@subsection zeroaxis

@c ?commands set zeroaxis
@c ?commands unset zeroaxis
@c ?commands show zeroaxis
@c ?set zeroaxis
@c ?unset zeroaxis
@c ?show zeroaxis
@cindex zeroaxis
@opindex zeroaxis


The x axis may be drawn by @ref{xzeroaxis} and removed by @ref{xzeroaxis}.
Similar commands behave similarly for the y, x2, y2, and z axes.
`set zeroaxis ...` (no prefix) acts on the x, y, and z axes jointly.

Syntax:
@example
      set @{x|x2|y|y2|z@}zeroaxis @{ @{linestyle | ls <line_style>@}
                                 | @{linetype | lt <line_type>@}
                                   @{linewidth | lw <line_width>@}
                                   @{linecolor | lc <colorspec>@}
                                   @{dashtype | dt <dashtype>@} @}
      unset @{x|x2|y|y2|z@}zeroaxis
      show @{x|y|z@}zeroaxis

@end example


By default, these options are off.  The selected zero axis is drawn
with a line of type <line_type>, width <line_width>, color <colorspec>, and
dash type <dashtype> (if supported by the terminal driver currently in use),
or a user-defined style <line_style> (see `set style line`).

If no linetype is specified, any zero axes selected will be drawn
using the axis linetype (linetype 0).

Examples:

To simply have the y=0 axis drawn visibly:

@example
       set xzeroaxis

@end example

If you want a thick line in a different color or pattern, instead:

@example
       set xzeroaxis linetype 3 linewidth 2.5

@end example

@node zlabel, zmtics, zeroaxis, set-show
@subsection zlabel

@c ?commands set zlabel
@c ?commands show zlabel
@c ?set zlabel
@c ?show zlabel
@cindex zlabel
@opindex zlabel


This command sets the label for the z axis.  Please see @ref{xlabel}.

@node zmtics, zrange, zlabel, set-show
@subsection zmtics

@c ?commands set zmtics
@c ?commands unset zmtics
@c ?commands show zmtics
@c ?set zmtics
@c ?unset zmtics
@c ?show zmtics
@cindex zmtics
@opindex zmtics


@cindex nozmtics

The @ref{zmtics} command changes tics on the z axis to months of the year.
Please see @ref{xmtics} for details.

@node zrange, ztics, zmtics, set-show
@subsection zrange

@c ?commands set zrange
@c ?commands show zrange
@c ?set zrange
@c ?show zrange
@cindex zrange
@opindex zrange


The @ref{zrange} command sets the range that will be displayed on the z axis.
The zrange is used only by `splot` and is ignored by `plot`.  Please see
@ref{xrange} for details.

@node ztics, cblabel, zrange, set-show
@subsection ztics

@c ?commands set ztics
@c ?commands unset ztics
@c ?commands show ztics
@c ?set ztics
@c ?unset ztics
@c ?show ztics
@cindex ztics
@opindex ztics


@cindex noztics

The @ref{ztics} command controls major (labeled) tics on the z axis.
Please see `set xtics` for details.

@node cblabel, cbmtics, ztics, set-show
@subsection cblabel

@c ?commands set cblabel
@c ?commands show cblabel
@c ?set cblabel
@c ?show cblabel
@cindex cblabel
@opindex cblabel


This command sets the label for the color box axis.  Please see @ref{xlabel}.

@node cbmtics, cbrange, cblabel, set-show
@subsection cbmtics

@c ?commands set cbmtics
@c ?commands unset cbmtics
@c ?commands show cbmtics
@c ?set cbmtics
@c ?unset cbmtics
@c ?show cbmtics
@cindex cbmtics
@opindex cbmtics


@cindex nocbmtics

The @ref{cbmtics} command changes tics on the color box axis to months of the
year. Please see @ref{xmtics} for details.

@node cbrange, cbtics, cbmtics, set-show
@subsection cbrange

@c ?commands set cbrange
@c ?commands show cbrange
@c ?set cbrange
@c ?show cbrange
@cindex cbrange
@opindex cbrange


The @ref{cbrange} command sets the range of values which are colored using
the current @ref{palette} by styles `with pm3d`, `with image` and @ref{palette}.
Values outside of the color range use color of the nearest extreme.

If the cb-axis is autoscaled in `splot`, then the colorbox range is taken from
@ref{zrange}.  Points drawn in `splot ... pm3d|palette` can be filtered by using
different @ref{zrange} and @ref{cbrange}.

Please see @ref{xrange} for details on @ref{cbrange} syntax. See also
@ref{palette} and `set colorbox`.

@node cbtics,  , cbrange, set-show
@subsection cbtics

@c ?commands set cbtics
@c ?commands unset cbtics
@c ?commands show cbtics
@c ?set cbtics
@c ?unset cbtics
@c ?show cbtics
@cindex cbtics
@opindex cbtics


@cindex nocbtics

The @ref{cbtics} command controls major (labeled) tics on the color box axis.
Please see `set xtics` for details.

@node shell, show, set-show, Commands
@section shell

@c ?commands shell
@cindex shell
@cmindex shell


The @ref{shell} command spawns an interactive shell.  To return to `gnuplot`,
type @ref{exit} or the END-OF-FILE character if using Unix, or @ref{exit} if using
MS-DOS or OS/2.

The @ref{shell} command ignores anything else on the gnuplot command line.
If instead you want to pass a command string to a shell for immediate
execution, use the @ref{system} function or the shortcut `!`. See @ref{system}.

Examples:

@example
      shell
      system "print previous_plot.ps"
      ! print previous_plot.ps
      current_time = system("date")

@end example


@node show, splot, shell, Commands
@section show

Most `set` commands have a corresponding show command with no special options.
For example
@example
     show linetype 3
@end example

will report the current properties in effect from previous commands like
@example
     set linetype 3 linewidth 2 dashpattern '.-'
@end example

A few `show` commands that diverge from this pattern are documented separately.

@menu
* show_colornames::
* show_functions::
* show_palette::
* show_plot::
* show_variables::
@end menu

@node show_colornames, show_functions, show, show
@subsection show colornames

@c ?commands show colornames
@c ?show colornames
@c ?show palette colornames
Gnuplot knows about 100 colors by name (see @ref{colornames}).  You can dump
a list of these to the terminal by using the command @ref{colornames}.
There is currently no way to set new names.

@node show_functions, show_palette, show_colornames, show
@subsection show functions

@c ?commands show functions
@c ?show functions
The @ref{functions} command lists all user-defined functions and their
definitions.

Syntax:
@example
      show functions

@end example

For information about the definition and usage of functions in `gnuplot`,
please see `expressions`.
See also
@uref{http://www.gnuplot.info/demo/spline.html,splines as user defined functions (spline.dem)
}
and
@uref{http://www.gnuplot.info/demo/airfoil.html,use of functions and complex variables for airfoils (airfoil.dem).
}

@node show_palette, show_plot, show_functions, show
@subsection show palette

@c ?commands show palette
@c ?show palette
@cindex palette
@opindex palette


Syntax:
@example
      show palette
      show palette palette @{<ncolors>@} @{@{float | int | hex@}@}
      show palette gradient
      show palette rgbformulae
      test palette

@end example

The @ref{palette} command will plot the R,G,B profiles for the current
palette and store the profile values in a datablock $PALETTE.


@menu
* show_palette_gradient::
* show_palette_palette::
* show_palette_rgbformulae::
@end menu

@node show_palette_gradient, show_palette_palette, show_palette, show_palette
@subsubsection show palette gradient

@c ?commands show palette gradient
@c ?show palette gradient
`show palette gradient` displays the piecewise gradient established by a
prior @ref{defined} command.  If the current palette is based on
rgbformulae or a set of predefined values then this command does nothing.


@node show_palette_palette, show_palette_rgbformulae, show_palette_gradient, show_palette
@subsubsection show palette palette

@c ?commands show palette palette
@c ?show palette palette
@example
      show palette palette @{<ncolors>@} @{@{float | int | hex@}@}

@end example

`show palette palette <n>` prints to the screen or to the file given by
`set print` a table of color components for each entry in the current palette.
By default the continuous palette is sampled in 128 increments. Specifying
<ncolors> will sample the palette evenly at this number of increments
(rather than 128).  The default is a long listing in the form
@example
     0. gray=0.0000, (r,g,b)=(0.0000,0.0000,0.0000), #000000 =   0   0   0
     1. gray=0.1111, (r,g,b)=(0.3333,0.0014,0.6428), #5500a4 =  85   0 164
     2. gray=0.2222, (r,g,b)=(0.4714,0.0110,0.9848), #7803fb = 120   3 251
     ...
@end example

An optional trailing keyword @ref{float}, `int`, or `hex` instead prints only
single representation of the color components per entry:
@example
        int:        85       0     164
      float:    0.3333  0.0014  0.6428
        hex:  0x5500a4

@end example

By using `set print` to direct this output to a file, the current gnuplot
color palette can be loaded into other imaging applications such as Octave.

By using `set print` to direct output to a datablock, the current palette
can be saved so that it is available to future plot commands even if the
active palette is redefined.  This allows creating plots that draw from
multiple palettes, although the colorbox still represents only the current
active palette.


@node show_palette_rgbformulae,  , show_palette_palette, show_palette
@subsubsection show palette rgbformulae

@c ?commands show palette rgbformulae
@c ?show palette rgbformulae
@ref{rgbformulae} prints the available fixed gray -->
color transformation formulae.  It does _not_ show the state of the
current palette.


@node show_plot, show_variables, show_palette, show
@subsection show plot

@c ?commands show plot
@c ?show plot
The `show plot` command shows the most recent plotting command as it results
from the last `plot` and/or `splot` and possible subsequent @ref{replot} commands.

In addition, the `show plot add2history` command adds this current plot
command into the @ref{history}. It is useful if you have used @ref{replot} to add
more curves to the current plot and you want to edit the whole command now.

@node show_variables,  , show_plot, show
@subsection show variables

@c ?commands show variables
@c ?show variables all
@c ?show variables
The `show variables` command lists the current value of user-defined and
internal variables. Gnuplot internally defines variables whose names begin
with GPVAL_, MOUSE_, FIT_, and TERM_.

Syntax:
@example
      show variables      # show variables that do not begin with GPVAL_
      show variables all  # show all variables including those beginning GPVAL_
      show variables NAME # show only variables beginning with NAME

@end example


@node splot, stats_(Statistical_Summary), show, Commands
@section splot

@c ?commands splot
@cindex splot
@cmindex splot


`splot` is the command for drawing 3D plots (well, actually projections on a 2D
surface, but you knew that).  It is the 3D equivalent of the `plot` command.
`splot` provides only a single x, y, and z axis; there is no equivalent to the
x2 and y2 secondary axes provided by `plot`.

See the `plot` command for many options available in both 2D and 3D plots.

Syntax:
@example
      splot @{<ranges>@}
            @{<iteration>@}
            <function> | @{@{<file name> | <datablock name>@} @{datafile-modifiers@}@}
                       | <voxelgridname>
                       | keyentry
            @{<title-spec>@} @{with <style>@}
            @{, @{definitions@{,@}@} <function> ...@}

@end example

The `splot` command operates on a data generated by a function, read from
a data file, or stored previously in a named data block.  Data file names
are usually provided as a quoted string.  The function can be a mathematical
expression, or a triple of mathematical expressions in parametric mode.

Starting in version 5.4 `splot` can operate on voxel data.
See `voxel-grids`, @ref{vgrid}, @ref{vxrange}.  At present voxel grids can be
be plotted using styles @ref{dots}, `with points`, or @ref{isosurface}.
Voxel grid values can also be referenced in the `using` specifiers of other
plot styles, for example to assign colors.

By default `splot` draws the xy plane completely below the plotted data.
The offset between the lowest ztic and the xy plane can be changed by @ref{xyplane}.  The orientation of a `splot` projection is controlled by
@ref{view}.  See @ref{view} and @ref{xyplane} for more information.

The syntax for setting ranges on the `splot` command is the same as for `plot`.
In non-parametric mode, ranges must be given in the order
@example
      splot [<xrange>][<yrange>][<zrange>] ...
@end example

In parametric mode, the order is
@example
      splot [<urange>][<vrange>][<xrange>][<yrange>][<zrange>] ...

@end example

The @ref{title} option is the same as in `plot`.  The operation of `with` is also
the same as in `plot` except that not all 2D plotting styles are available.

The @ref{datafile} options have more differences.

As an alternative to surfaces drawn using parametric or function mode, the
pseudo-file '++' can be used to generate samples on a grid in the xy plane.

See also `show plot`, `set view map`, and @ref{sampling}.

@menu
* data-file::
* grid_data::
* splot_surfaces::
* voxel-grid::
@end menu

@node data-file, grid_data, splot, splot
@subsection data-file

@c ?commands splot datafile
@c ?splot datafile
`Splot`, like `plot`, can display from a file.

Syntax:
@example
      splot '<file_name>' @{binary <binary list>@}
                          @{@{nonuniform|sparse@} matrix@}
                          @{index <index list>@}
                          @{every <every list>@}
                          @{using <using list>@}

@end example

The special filenames `""` and `"-"` are permitted, as in `plot`.
See @ref{special-filenames}.

Keywords @ref{binary} and @ref{matrix} indicate that the data are in a special form,
@ref{index} selects which data sets in a multi-data-set file are plotted,
@ref{every} specifies a subset of lines within a single data set,
`using` determines how the columns within a single record are interpreted.

The options @ref{index} and @ref{every} behave the same way as with `plot`;  `using`
does so also, except that the `using` list must provide three entries
instead of two.

The `plot` option @ref{smooth} is not available for `splot`, but
@ref{cntrparam} and @ref{dgrid3d} provide limited smoothing capabilities.

Data file organization is essentially the same as for `plot`, except that
each point is an (x,y,z) triple.  If only a single value is provided, it
will be used for z, the block number will be used for y, and the index
of the data point in the block will be used for x.  If two or four values
are provided, `gnuplot` uses the last value for calculating the color in
pm3d plots.  Three values are interpreted as an (x,y,z) triple.  Additional
values are generally used as errors, which can be used by @ref{fit}.

Single blank records separate blocks of data in a `splot` datafile; `splot`
treats blocks as the equivalent of function y-isolines.  No line will join
points separated by a blank record.  If all blocks contain the same number of
points, `gnuplot` will draw cross-isolines between points in the blocks,
connecting corresponding points.  This is termed "grid data", and is required
for drawing a surface, for contouring (`set contour`) and hidden-line removal
(@ref{hidden3d}). See also `splot grid_data`.


@menu
* matrix::
* example_datafile_::
@end menu

@node matrix, example_datafile_, data-file, data-file
@subsubsection matrix

@c ?commands plot datafile matrix
@c ?commands splot datafile matrix
@c ?plot datafile matrix
@c ?splot datafile matrix
@c ?binary matrix
@cindex matrix

Matrix data can be input in several formats (`uniform`, `nonuniform`, `sparse`)
from either text or binary files.

The first variant assumes a uniform grid of x and y coordinates and assigns
each value in the input matrix to one element M[i,j] of this uniform grid.
The assigned x coordinates are the integers [0:NCOLS-1].
The assigned y coordinates are the integers [0:NROWS-1].
This is the default for text data input, but not for binary input.
See `uniform` for examples and additional keywords.

The second variant handles a non-uniform grid with explicit x and y
coordinates. The first row of input data contains the y coordinates;
the first column of input data contains the x coordinates.
For binary input data, the first element of the first row must contain the
number of columns.  This is the default for @ref{matrix} input,
but requires an additional keyword `nonuniform` for text input data.
See `nonuniform` for examples.

The @ref{matrix} variant defines a uniform grid into which any number of
individual point values are read from the input file, one per line,
in any order. This is primarily intended for the generation of heatmaps from
incomplete data.
See `sparse` for examples.



@noindent --- UNIFORM MATRIX ---

@c ?commands plot datafile matrix uniform
@c ?commands splot datafile matrix uniform
@c ?datafile matrix uniform
@c ?matrix uniform
@c ?binary matrix uniform
@cindex uniform

Example commands for plotting uniform matrix data:
@example
     splot 'file' matrix using 1:2:3          # text input
     splot 'file' binary general using 1:2:3  # binary input

@end example

In a uniform grid matrix the z-values are read in a row at a time, i. e.,
@example
    z11 z12 z13 z14 ...
    z21 z22 z23 z24 ...
    z31 z32 z33 z34 ...
@end example

and so forth.

For text input, if the first row contains column labels rather than data,
use the additional keyword @ref{columnheaders}.   Similarly if the first field
in each row contains a label rather than data, use the additional keyword
`rowheaders`.  Here is an example that uses both:
@example
    $DATA << EOD
    xxx A   B   C   D
    aa  z11 z12 z13 z14
    bb  z21 z22 z23 z24
    cc  z31 z32 z33 z34
    EOD
    plot $DATA matrix columnheaders rowheaders with image

@end example

For text input, a blank line or comment line ends the matrix, and starts a new
data block.  You can select among the data blocks in a file by the @ref{index}
option to the `splot` command, as usual.  The columnheaders option, if present,
is applied only to the first data block.


@noindent --- NONUNIFORM MATRIX ---

@c ?commands plot datafile matrix nonuniform
@c ?commands splot datafile matrix nonuniform
@c ?datafile matrix nonuniform
@c ?matrix nonuniform
@c ?binary matrix nonuniform
@cindex nonuniform

The first row of input data contains the y coordinates.
The first column of input data contains the x coordinates.
For binary input data, the first field of the first row must contain the
number of columns. (This number is ignored for text input).

Example commands for plotting non-uniform matrix data:
@example
     splot 'file' nonuniform matrix using 1:2:3  # text input
     splot 'file' binary matrix using 1:2:3      # binary input

@end example

Thus the data organization for non-uniform matrix input is

@example
      <N+1>  <x0>   <x1>   <x2>  ...  <xN>
       <y0> <z0,0> <z0,1> <z0,2> ... <z0,N>
       <y1> <z1,0> <z1,1> <z1,2> ... <z1,N>
        :      :      :      :   ...    :

@end example

which is then converted into triplets:
@example
      <x0> <y0> <z0,0>
      <x0> <y1> <z0,1>
      <x0> <y2> <z0,2>
       :    :     :
      <x0> <yN> <z0,N>

@end example

@example
      <x1> <y0> <z1,0>
      <x1> <y1> <z1,1>
       :    :     :

@end example

These triplets are then converted into `gnuplot` iso-curves and then
`gnuplot` proceeds in the usual manner to do the rest of the plotting.


@noindent --- SPARSE MATRIX ---

@c ?datafile sparse matrix
@cindex sparse

Syntax:
@example
      sparse matrix=(cols,rows) origin=(x0,y0) dx=<delx> dy=<dely>
@end example

The `sparse` matrix variant defines a uniform grid as part of the
`plot` or `splot` command line.  The grid is initially empty.
Any number of individual points are then read from the input file,
one per line, and assigned to the nearest grid point.  I.e. a data line
@example
      x y value
@end example

is evaluated as
@example
      i = (x - x0) / delx
      j = (y - y0) / dely
      matrix[i,j] = value
@end example

The size of the matrix is required.
@ref{origin} (optional) defaults to origin=(0,0).
`dx` (optional) defaults to dx=1.
`dy` (optional) defaults to dy=dx.

The intended use of this variant is to generate heatmaps from unordered,
possibly incomplete, data using the `image`, @ref{rgbimage}, or @ref{rgbalpha}
plot styles.  The example below generates a distance matrix in the form
of a 4x4 heatmap with only the upper triangle elements present:
@example
      $DATA << EOD
      1 1 10
      1 2 20
      1 3 30
      1 4 40
      2 2 10
      2 3 50
      2 4 60
      3 3 10
      3 4 20
      4 4 10
      EOD
      plot $DATA sparse matrix=(4,4) origin=(1,1) with image

@end example



@noindent --- EVERY ---

@c ?datafile matrix every
@c ?matrix every
The @ref{every} keyword has special meaning when used with matrix data.
Rather than applying to blocks of single points, it applies to rows and
column values.  Note that matrix rows and columns are indexed starting
from 0, so the row with index N is the (N+1)th row.
Syntax:
@example
      plot 'file' matrix every @{<column_incr>@}
                               @{:@{<row_incr>@}
                                 @{:@{<start_column>@}
                                   @{:@{<start_row>@}
                                     @{:@{<end_column>@}
                                       @{:<end_row>@}@}@}@}@}
@end example

Examples:
@example
      plot 'file' matrix every :::N::N   # plot all values in row with index N
      plot 'file' matrix every ::3::7    # plot columns 3 to 7 for all rows
      plot 'file' matrix every ::3:0:7:4 # submatrix bounded by [3,0] and [7,4]

@end example


@noindent --- EXAMPLES ---

@c ?commands plot datafile matrix examples
@c ?commands splot datafile matrix examples
@c ?datafile matrix examples
@c ?matrix examples
@c ?binary matrix examples
A collection of matrix and vector manipulation routines (in C) is provided
in `binary.c`.  The routine to write binary data is

@example
      int fwrite_matrix(file,m,nrl,nrl,ncl,nch,row_title,column_title)

@end example

An example of using these routines is provided in the file `bf_test.c`, which
generates binary files for the demo file `demo/binary.dem`.

Usage in `plot`:
@example
    plot 'a.dat' matrix
    plot 'a.dat' matrix using 1:3
    plot 'a.gpbin' @{matrix@} binary using 1:3
@end example

will plot rows of the matrix, while using 2:3 will plot matrix columns, and
using 1:2 the point coordinates (rather useless). Applying the @ref{every} option
you can specify explicit rows and columns.

Example -- rescale axes of a matrix in a text file:
@example
    splot `a.dat` matrix using (1+$1):(1+$2*10):3

@end example

Example -- plot the 3rd row of a matrix in a text file:
@example
    plot 'a.dat' matrix using 1:3 every 1:999:1:2
@end example

(rows are enumerated from 0, thus 2 instead of 3).

Gnuplot can read matrix binary files by use of the option @ref{binary} appearing
without keyword qualifications unique to general binary, i.e., `array`,
@ref{record}, `format`, or @ref{filetype}.  Other general binary keywords for
translation should also apply to matrix binary.  (See @ref{general} for
more details.)

@node example_datafile_,  , matrix, data-file
@subsubsection example datafile

@c ?commands splot datafile example
@c ?splot datafile example
@c ?splot example
A simple example of plotting a 3D data file is

@example
      splot 'datafile.dat'

@end example

where the file "datafile.dat" might contain:

@example
      # The valley of the Gnu.
         0 0 10
         0 1 10
         0 2 10

@end example

@example
         1 0 10
         1 1 5
         1 2 10

@end example

@example
         2 0 10
         2 1 1
         2 2 10

@end example

@example
         3 0 10
         3 1 0
         3 2 10

@end example

Note that "datafile.dat" defines a 4 by 3 grid ( 4 rows of 3 points each ).
Rows (blocks) are separated by blank records.

Note also that the x value is held constant within each dataline.  If you
instead keep y constant, and plot with hidden-line removal enabled, you will
find that the surface is drawn 'inside-out'.

Actually for grid data it is not necessary to keep the x values constant
within a block, nor is it necessary to keep the same sequence of y
values.  `gnuplot` requires only that the number of points be the same for
each block.  However since the surface mesh, from which contours are
derived, connects sequentially corresponding points, the effect of an
irregular grid on a surface plot is unpredictable and should be examined
on a case-by-case basis.

@node grid_data, splot_surfaces, data-file, splot
@subsection grid data

@c ?commands splot grid_data
@c ?splot grid_data
@cindex grid_data

The 3D routines are designed for points in a grid format, with one sample,
datapoint, at each mesh intersection; the datapoints may originate from
either evaluating a function, see @ref{isosamples}, or reading a datafile,
see @ref{datafile}.  The term "isoline" is applied to the mesh lines for
both functions and data.  Note that the mesh need not be rectangular in x
and y, as it may be parameterized in u and v, see @ref{isosamples}.

However, `gnuplot` does not require that format.  In the case of functions,
'samples' need not be equal to 'isosamples', i.e., not every x-isoline
sample need intersect a y-isoline. In the case of data files, if there
are an equal number of scattered data points in each block, then
"isolines" will connect the points in a block, and "cross-isolines"
will connect the corresponding points in each block to generate a
"surface".  In either case, contour and hidden3d modes may give different
plots than if the points were in the intended format.

Scattered data can be fit to a grid before plotting. See @ref{dgrid3d}.

The contour code tests for z intensity along a line between a point on a
y-isoline and the corresponding point in the next y-isoline.  Thus a `splot`
contour of a surface with samples on the x-isolines that do not coincide with
a y-isoline intersection will ignore such samples. Try:
@example
       set xrange [-pi/2:pi/2]; set yrange [-pi/2:pi/2]
       set style function lp
       set contour
       set isosamples 10,10; set samples 10,10;
       splot cos(x)*cos(y)
       set samples 4,10; replot
       set samples 10,4; replot

@end example


@node splot_surfaces, voxel-grid, grid_data, splot
@subsection splot surfaces

@c ?commands splot surfaces
@c ?splot surfaces
`splot` can display a surface as a collection of points, or by connecting
those points.  As with `plot`, the points may be read from a data file or
result from evaluation of a function at specified intervals, see
@ref{isosamples}.  The surface may be approximated by connecting the points
with straight line segments, see `set surface`, in which case the surface
can be made opaque with `set hidden3d.`  The orientation from which the 3d
surface is viewed can be changed with @ref{view}.

Additionally, for points in a grid format, `splot` can interpolate points
having a common amplitude (see `set contour`) and can then connect those
new points to display contour lines, either directly with straight-line
segments or smoothed lines (see @ref{cntrparam}).  Functions are already
evaluated in a grid format, determined by @ref{isosamples} and @ref{samples},
while file data must either be in a grid format, as described in @ref{data-file},
or be used to generate a grid (see @ref{dgrid3d}).

Contour lines may be displayed either on the surface or projected onto the
base.  The base projections of the contour lines may be written to a
file, and then read with `plot`, to take advantage of `plot`'s additional
formatting capabilities.

@node voxel-grid,  , splot_surfaces, splot
@subsection voxel-grid

@c ?commands splot voxel-grid
@c ?splot voxel-grids
@cindex voxel-grids

Syntax:
@example
     splot $voxelgridname with @{dots|points@} @{above <threshold>@} ...
     splot $voxelgridname with isosurface @{level <threshold>@} ...

@end example

Voxel data can be plotted with dots or points marking individual voxels whose
value is above the specified threshold value (default threshold = 0).
Color/pointtype/linewidth properties can be appended as usual.

At many view angles the voxel grid points will occlude each other or create
Moiré artifacts on the display. These effects can be avoided by introducing
jitter so that the displayed dot or point is displaced randomly from the
true voxel grid coordinate. See @ref{jitter}.

Dense voxel grids can be down-sampled by using the `pointinterval` property
(`pi` for short) to reduce the number of points drawn.
@example
     splot $vgrid with points pointtype 6 pointinterval 2

@end example

@ref{isosurface} will create a tessellated surface in 3D enclosing all voxels
with value greater than the requested threshold. The surface placement is
adjusted by linear interpolation to pass through the threshold value itself.

See @ref{vgrid}, @ref{vfill}.
See demos `vplot.dem`, `isosurface.dem`.


@node stats_(Statistical_Summary), system_, splot, Commands
@section stats (Statistical Summary)

@c ?commands stats
@cindex stats

@cindex statistics

@cindex filter

Syntax:
@example
     stats @{<ranges>@} 'filename' @{matrix | using N@{:M@}@} @{name 'prefix'@} @{@{no@}output@}
     stats $voxelgridname @{name 'prefix'@}

@end example

This command prepares a statistical summary of the data in one or two columns
of a file. The using specifier is interpreted in the same way as for plot
commands. See `plot` for details on the @ref{index}, @ref{every}, and `using`
directives. Data points are filtered against both xrange and yrange before
analysis. See @ref{xrange}. The summary is printed to the screen by default.
Output can be redirected to a file by prior use of the command `set print`,
or suppressed altogether using the `nooutput` option.

If the file cannot be found or cannot be read, a non-fatal warning is issued.
This can be used to test for the existence of a file without generating a
program error. See `stats test`.

In addition to printed output, the program stores the individual statistics
into three sets of variables.
The first set of variables reports how the data is laid out in the file.
The array of column headers is generated only if option
@ref{columnheaders} is in effect:

@example
     STATS_records           # total number N of in-range data records
     STATS_outofrange        # number of records filtered out by range limits
     STATS_invalid           # number of invalid/incomplete/missing records
     STATS_blank             # number of blank lines in the file
     STATS_blocks            # number of indexable blocks of data in the file
     STATS_columns           # number of data columns in the first row of data
     STATS_column_header     # array of strings holding column headers found

@end example


The second set reports properties of the in-range data from a single column.
This column is treated as y. If the y axis is autoscaled then no range limits
are applied. Otherwise only values in the range [ymin:ymax] are considered.

If two columns are analysed jointly by a single `stats` command, the suffix
"_x" or "_y" is appended to each variable name.
I.e. STATS_min_x is the minimum value found in the first column, while
STATS_min_y is the minimum value found in the second column.
In this case points are filtered by testing against both xrange and yrange.


@example
     STATS_min               # minimum value of in-range data points
     STATS_max               # maximum value of in-range data points
     STATS_index_min         # index i for which data[i] == STATS_min
     STATS_index_max         # index i for which data[i] == STATS_max
     STATS_lo_quartile       # value of the lower (1st) quartile boundary
     STATS_median            # median value
     STATS_up_quartile       # value of the upper (3rd) quartile boundary
     STATS_mean              # mean value of the in-range data points
     STATS_ssd               # sample standard deviation of the in-range data
                                  = sqrt( Sum[(y-ymean)^2] / (N-1) )
     STATS_stddev            # population standard deviation of the in-range data
                                  = sqrt( Sum[(y-ymean)^2] / N )
     STATS_sum               # sum
     STATS_sumsq             # sum of squares
     STATS_skewness          # skewness of the in-range data points
     STATS_kurtosis          # kurtosis of the in-range data points
     STATS_adev              # mean absolute deviation of the in-range data points
     STATS_mean_err          # standard error of the mean value
     STATS_stddev_err        # standard error of the standard deviation
     STATS_skewness_err      # standard error of the skewness
     STATS_kurtosis_err      # standard error of the kurtosis

@end example


The third set of variables is only relevant to analysis of two data columns.

@example
     STATS_correlation       # sample correlation coefficient between x and y values
     STATS_slope             # A corresponding to a linear fit y = Ax + B
     STATS_slope_err         # uncertainty of A
     STATS_intercept         # B corresponding to a linear fit y = Ax + B
     STATS_intercept_err     # uncertainty of B
     STATS_sumxy             # sum of x*y
     STATS_pos_min_y         # x coordinate of a point with minimum y value
     STATS_pos_max_y         # x coordinate of a point with maximum y value

@end example


Keyword @ref{matrix} indicates that the input consists of a matrix (see @ref{matrix});
the usual statistics are generated by considering all matrix elements.
The matrix dimensions are saved in variables STATS_size_x and STATS_size_y.

@example
     STATS_size_x            # number of matrix columns
     STATS_size_y            # number of matrix rows

@end example


The index reported in STATS_index_xxx corresponds to the value of pseudo-column
0 ($0) in plot commands.  I.e. the first point has index 0, the last point
has index N-1.

Data values are sorted to find the median and quartile boundaries.
If the total number of points N is odd, then the median value is taken as the
value of data point (N+1)/2. If N is even, then the median is reported as the
mean value of points N/2 and (N+2)/2. Equivalent treatment is used for the
quartile boundaries.

For an example of using the `stats` command to annotate a subsequent plot, see
@uref{http://www.gnuplot.info/demo/stats.html,stats.dem.
}

The `stats` command in this version of gnuplot can handle log-scaled data, but
not the content of time/date fields (`set xdata time` or `set ydata time`).
This restriction may be relaxed in a future version.

@menu
* name::
* test_for_existence_of_a_file::
* voxelgrid::
@end menu

@node name, test_for_existence_of_a_file, stats_(Statistical_Summary), stats_(Statistical_Summary)
@subsection name

@c ?stats name
@c ?statistics name
It may be convenient to track the statistics from more than one file or data
column in parallel. The @ref{name} option causes the default prefix "STATS" to be
replaced by a user-specified string.  For example, the mean value of column 2
data from two different files could be compared by
@example
     stats "file1.dat" using 2 name "A"
     stats "file2.dat" using 2 name "B"
     if (A_mean < B_mean) @{...@}

@end example

@cindex columnheader

Instead of providing a string constant as the name, the keyword `columnheader`
or function `columnheader(N)` can be used to generate the name from whatever
string is found in that column in the first row of the data file:
@example
     do for [COL=5:8] @{ stats 'datafile' using COL name columnheader @}

@end example

@node test_for_existence_of_a_file, voxelgrid, name, stats_(Statistical_Summary)
@subsection test for existence of a file

@c ?stats test
@c ?statistics test
Trying to plot a nonexistent or unreadable file will generate an error that
halts the progress of a script or iteration.  The stats command can be used
to avoid this as in the example below
@example
     do for [i=first:last] @{
         filename = sprintf("file%02d.dat", i)
         stats filename nooutput
         if (GPVAL_ERRNO) @{
             print GPVAL_ERRMSG
             continue
         @}
         plot filename title filename
     @}

@end example

@node voxelgrid,  , test_for_existence_of_a_file, stats_(Statistical_Summary)
@subsection voxelgrid

@c ?stats voxelgrid
@c ?statistics voxelgrid
@example
     stats $vgridname @{name "prefix"@}
@end example

The stats command can be used to interrogate the content of a voxel grid.
It yields the same information as @ref{vgrid} but saves it in variables
accessible for use in a script.


@example
     STATS_min               # minimum non-zero value over all voxels in grid
     STATS_max               # maximum value over all voxels in grid
     STATS_mean              # mean value of non-zero voxels in grid
     STATS_stderr            # standard deviation of non-zero voxel values
     STATS_sum               # sum over all values in grid
     STATS_nonzero           # number of non-zero voxels

@end example



@node system_, test, stats_(Statistical_Summary), Commands
@section system

@c ?commands system
@cindex system
@cmindex system


Syntax:
@example
      system "command string"
      ! command string
      output = system("command string")
      show variable GPVAL_SYSTEM

@end example

`system "command"` executes "command" in a subprocess by invoking the
operating system's default shell.  If called as a function, `system("command")`
returns the character stream from the subprocess's stdout as a string.
One trailing newline is stripped from the resulting string if present.
See also `backquotes`.

The exit status of the subprocess is reported in variables GPVAL_SYSTEM_ERRNO
and GPVAL_SYSTEM_ERRMSG.  Note that if the command string invokes more than
one programs, the subprocess may return "Success" even if one of the programs
produced an error.  E.g. file = system("ls -1 *.plt | tail -1") will return
"Success" even if there are no *.plt files because `tail` succeeds even if `ls`
does not.


@node test, toggle, system_, Commands
@section test

@c ?commands test
@c ?test palette
@cindex test
@cmindex test


This command graphically tests or presents terminal and palette capabilities.

Syntax:
@example
      test @{terminal | palette@}

@end example

`test` or @ref{terminal} creates a display of line and point styles and other
useful things supported by the @ref{terminal} you are currently using.

@ref{palette} plots profiles of R(z),G(z),B(z), where 0<=z<=1. These are the
RGB components of the current color palette as defined by @ref{palette}.
It also plots the apparent net intensity as calculated using NTSC coefficients
to map RGB onto a grayscale.  The command also loads the profile values into a
datablock named $PALETTE.
D viridis 1

@node toggle, undefine, test, Commands
@section toggle

@c ?commands toggle
@cindex toggle
@cmindex toggle


Syntax:
@example
      toggle @{<plotno> | "plottitle" | all@}

@end example

This command has the same effect as left-clicking on the key entry for a plot
currently displayed by an interactive terminal (qt, wxt, x11). If the plot is
showing, it is toggled off;  if it is currently hidden, it is toggled on.
`toggle all` acts on all active plots, equivalent to the hotkey "i".
`toggle "title"` requires an exact match to the plot title.  `toggle "ti*"`
acts on the first plot whose title matches the characters before the final '*'.
If the current terminal is not interactive, the toggle command has no effect.

@node undefine, unset, toggle, Commands
@section undefine

@c ?commands undefine
@cindex undefine
@cmindex undefine


Clear one or more previously defined user variables.  This is useful in order
to reset the state of a script containing an initialization test.

A variable name can contain the wildcard character `*` as last character. If the
wildcard character is found, all variables with names that begin with the prefix
preceding the wildcard will be removed. This is useful to remove several variables
sharing a common prefix. Note that the wildcard character is only allowed at the
end of the variable name! Specifying the wildcard character as sole argument to
`undefine` has no effect.

Example:

@example
      undefine foo foo1 foo2
      if (!exists("foo")) load "initialize.gp"

@end example

@example
      bar = 1; bar1 = 2; bar2 = 3
      undefine bar*                 # removes all three variables

@end example


@node unset, update, undefine, Commands
@section unset

@c ?commands unset
@cindex unset
@cmindex unset


@cindex iteration

Options set using the `set` command may be returned to their default state by
the corresponding @ref{unset} command.  The @ref{unset} command may contain an optional
iteration clause. See `plot for`.

Examples:
@example
      set xtics mirror rotate by -45 0,10,100
      ...
      unset xtics

@end example

@example
      # Unset labels numbered between 100 and 200
      unset for [i=100:200] label i

@end example

@menu
* linetype_::
* monochrome_::
* output_::
* terminal_::
* warnings::
@end menu

@node linetype_, monochrome_, unset, unset
@subsection linetype

@c ?unset linetype
Syntax:
@example
      unset linetype N
@end example

Remove all characteristics previously associated with a single linetype.
Subsequent use of this linetype will use whatever characteristics and color
that is native to the current terminal type (i.e. the default linetypes
properties available in gnuplot versions prior to 4.6).

@node monochrome_, output_, linetype_, unset
@subsection monochrome

@c ?unset monochrome
Switches the active set of linetypes from monochrome to color.
Equivalent to `set color`.

@node output_, terminal_, monochrome_, unset
@subsection output

@c ?unset output
Because some terminal types allow multiple plots to be written into a single
output file, the output file is not automatically closed after plotting.
In order to print or otherwise use the file safely, it should first be closed
explicitly by using @ref{output} or by using @ref{output} to close the
previous file and then open a new one.

@node terminal_, warnings, output_, unset
@subsection terminal

@c ?unset terminal
The default terminal that is active at the time of program entry depends on the
system platform, gnuplot build options, and the environmental variable GNUTERM.
Whatever this default may be, gnuplot saves it to internal variable GNUTERM.
The @ref{terminal} command restores the initial terminal type.
It is equivalent to `set terminal GNUTERM`.  However if the string in GNUTERM
contains terminal options in addition to the bare terminal name, you may want
to instead use `set terminal @@GNUTERM`.

@node warnings,  , terminal_, unset
@subsection warnings

@c ?unset warnings
@c ?set warnings
@example
     set warnings
     unset warnings

@end example

Warning messages for non-fatal errors are normally printed to stderr after
echoing the file name, line number, and command line that triggered the warning.
Warnings may be suppressed by the command @ref{warnings}.
A warning may be generated on demand by the command `warn "message"`.
They remain suppressed until explicitly reenabled by @ref{warnings}.

@node update, vclear, unset, Commands
@section update

@c ?commands update
@cindex update
@cmindex update


Note: This command is DEPRECATED.  Use @ref{fit} instead.

@node vclear, vfill, update, Commands
@section vclear

@c ?commands vclear
@cindex vclear
@cmindex vclear


Syntax:
@example
     vclear @{$gridname@}
@end example

Resets the value of all voxels in an existing grid to zero.
If no grid name is given, clears the currently active grid.

@node vfill, warn, vclear, Commands
@section vfill

@c ?commands vfill
@cindex vfill
@cmindex vfill


@cindex vgfill

@cindex VoxelDistance

@cindex VoxelDistance

@cindex GridDistance

@cindex GridDistance

Syntax:
@example
     vfill  FILE using x:y:z:radius:(<expression>)
     vgfill FILE using x:y:z:radius:(<expression>)

@end example

The @ref{vfill} command acts analogously to a `plot` command except that instead
of creating a plot it modifies voxels in the currently active voxel grid.
For each point read from the input file, the voxel containing that point and
also all other voxels within a sphere of given radius centered about (x,y,z)
are incremented as follows:
@itemize @bullet
@item
user variable VoxelDistance is set to the distance from (x,y,z) to that
voxel's origin in user coordinates (vx,vy,vz).
@item
user variable GridDistance is set to the distance from (x,y,z) to that
voxel's origin in grid coordinates.
@item
The expression provided in the 5th `using` specifier is evaluated.
This expression can use the new value of VoxelDistance and/or GridDistance.
@item
voxel(vx,vy,vz) += result of evaluating <expression>
@end itemize
Examples:
@example
     vfill "file.dat" using 1:2:3:(3.0):(1.0)
@end example

This command adds 1 to the value of every voxel within a sphere of radius 3.0
around each point in file.dat.  The number of voxels that this sphere impinges
on depends on the grid spacing in user coordinates, which may be different
along the x, y, and z directions.

@example
     vgfill "file.dat" using 1:2:3:(2):(1.0)
@end example

This command adds 1 to the value of voxels within a 5x5x5 cube of voxels
centered on the current point. The radius "2" is interpreted as extending
exactly 2 voxels in either direction along x, 2 voxels in either direction
along y, etc, regardless of the relative scaling of user coordinates along
those axes.

Example:
@example
     vfill "file.dat" using 1:2:3:4:(VoxelDistance < 1 ? 1 : 1/VoxelDistance)
@end example

This command modifies all voxels in a sphere whose radius is determined for
each point by the content of column 4.  The increment added to a voxel
decreases with its distance from the data point.

Note that @ref{vfill} and `vgfill` always increments existing values in the
current voxel grid.
To reset a single voxel to zero, use `voxel(x,y,z) = 0`.
To reset the entire grid to zero, use @ref{vclear}.

@node warn, While, vfill, Commands
@section warn

@cindex warn
@cmindex warn


@c ?commands warn
Syntax:
@example
      warn "message"
@end example

The `warn` command is essentially the same as @ref{printerr} except that it
prepends the current filename or function block name and the current line
number before printing the requested message to stderr.
Unlike @ref{printerr} the output from `warn` is suppressed by @ref{warnings}.

@node While,  , warn, Commands
@section While

@cindex while

@c ?commands while
Syntax:
@example
      while (<expr>) @{
          <commands>
      @}
@end example

Execute a block of commands repeatedly so long as <expr> evaluates to
a non-zero value.  This command cannot be mixed with old-style (un-bracketed)
if/else statements.  See also `do`, `continue`, `break`.

@node Terminal_types, Concept_Index, Commands, Top
@chapter Terminal types

@c ^ <h2> Terminal Types </h2>
@c ?complete list of terminals

@menu
* complete_list_of_terminals::
@end menu

@node complete_list_of_terminals,  , Terminal_types, Terminal_types
@section complete list of terminals

@cindex terminal
@opindex terminal


@cindex term

Gnuplot supports a large number of output formats. These are selected by
choosing an appropriate terminal type, possibly with additional modifying
options. See @ref{terminal}.

This document may describe terminal types that are not available to you
because they were not configured or installed on your system.
Terminals marked `legacy` are not built by default in recent gnuplot versions
and may not actually work.
To see a list of terminals available in a particular gnuplot session,
type 'set terminal' with no modifiers.

Several terminals are designed for use with TeX/LaTeX document preparation.
A summary of TeX-friendly terminals is available here:
@uref{http://www.gnuplot.info/docs/latex_demo.pdf,http://www.gnuplot.info/docs/latex_demo.pdf
}


@menu
* aifm::
* aqua::
* be::
* epscairo::
* canvas::
* cgm::
* context::
* corel::
* debug::
* svga::
* dumb::
* dxf::
* dxy800a::
* eepic::
* emf::
* epson_180dpi::
* excl::
* fig::
* png_::
* ggi::
* gpic::
* grass::
* hp2623a::
* hp2648::
* hp500c::
* hpgl::
* hpljii::
* hppj::
* imagen::
* kyo::
* latex::
* lua::
* mf::
* mp::
* mif::
* pbm::
* dospc::
* pdf::
* pstricks::
* qms::
* regis::
* svg::
* tek410x::
* tek40::
* texdraw::
* tgif::
* tkcanvas::
* tpic::
* windows::
* wxt::
* x11::
* xlib::
@end menu

@node aifm, aqua, complete_list_of_terminals, complete_list_of_terminals
@subsection aifm

@c ?commands set terminal aifm
@c ?set terminal aifm
@c ?set term aifm
@c ?terminal aifm
@c ?term aifm
@cindex aifm


@ref{terminal}, originally written for Adobe Illustrator 3.0+.
Since Adobe Illustrator understands PostScript level 1 commands directly,
you should use `set terminal post level1` instead.

Syntax:
@example
      set terminal aifm @{color|monochrome@} @{"<fontname>"@} @{<fontsize>@}

@end example


@node aqua, be, aifm, complete_list_of_terminals
@subsection aqua

@c ?commands set terminal aqua
@c ?set terminal aqua
@c ?set term aqua
@c ?terminal aqua
@c ?term aqua
@cindex aqua
@tmindex aqua


This terminal relies on AquaTerm.app for display on MacOS.

Syntax:
@example
      set terminal aqua @{<n>@} @{title "<wintitle>"@} @{size <x> <y>@}
                        @{font "<fontname>@{,<fontsize>@}"@}
                        @{linewidth <lw>@}"@}
                        @{@{no@}enhanced@} @{solid|dashed@} @{dl <dashlength>@}@}

@end example

where <n> is the number of the window to draw in (default is 0),
<wintitle> is the name shown in the title bar (default "Figure <n>"),
<x> <y> is the size of the plot (default is 846x594 pt = 11.75x8.25 in).

Use <fontname> to specify the font (default is "Times-Roman"),
and <fontsize> to specify the font size (default is 14.0 pt).

The aqua terminal supports enhanced text mode (see `enhanced`), except for
overprint. Font support is limited to the fonts available on the system.
Character encoding can be selected by @ref{encoding} and currently supports
iso_latin_1, iso_latin_2, cp1250, and UTF8 (default).

Lines can be drawn either solid or dashed, (default is solid) and the dash
spacing can be modified by <dashlength> which is a multiplier > 0.


@node be, epscairo, aqua, complete_list_of_terminals
@subsection be

@c ?commands set terminal be
@c ?set terminal be
@c ?set term be
@c ?terminal be
@c ?term be
@cindex be

@cindex BE

The `be` terminal type is present if gnuplot is built for the `beos`
operating system and for use with X servers.  It is selected at program
startup if the `DISPLAY` environment variable is set, if the `TERM`
environment variable is set to `xterm`, or if the `-display` command
line option is used.

Syntax:
@example
          set terminal be @{reset@} @{<n>@}

@end example

Multiple plot windows are supported: `set terminal be <n>` directs the
output to plot window number n.  If n>0, the terminal number will be
appended to the window title and the icon will be labeled `gplt <n>`.
The active window may distinguished by a change in cursor (from default
to crosshair.)

Plot windows remain open even when the `gnuplot` driver is changed to a
different device.  A plot window can be closed by pressing the letter q
while that window has input focus, or by choosing `close` from a window
manager menu.  All plot windows can be closed by specifying @ref{reset}, which
actually terminates the subprocess which maintains the windows (unless
`-persist` was specified).

Plot windows will automatically be closed at the end of the session
unless the `-persist` option was given.

The size or aspect ratio of a plot may be changed by resizing the `gnuplot`
window.

Linewidths and pointsizes may be changed from within `gnuplot` with
`set linestyle`.

For terminal type `be`, `gnuplot` accepts (when initialized) the standard
X Toolkit options and resources such as geometry, font, and name from the
command line arguments or a configuration file.  See the X(1) man page
(or its equivalent) for a description of such options.

A number of other `gnuplot` options are available for the `be` terminal.
These may be specified either as command-line options when `gnuplot` is
invoked or as resources in the configuration file ".Xdefaults".  They are
set upon initialization and cannot be altered during a `gnuplot` session.

@menu
* command-line_options::
* monochrome_options::
* color_resources::
* grayscale_resources::
* line_resources::
@end menu

@node command-line_options, monochrome_options, be, be
@subsubsection command-line_options

@c ?commands set terminal be command-line-options
@c ?set terminal be command-line-options
@c ?set term be command-line-options
@c ?be command-line-options
In addition to the X Toolkit options, the following options may be specified
on the command line when starting `gnuplot` or as resources in your
".Xdefaults" file:

@example
 `-mono`        forces monochrome rendering on color displays.
 `-gray`        requests grayscale rendering on grayscale or color displays.
                        (Grayscale displays receive monochrome rendering by default.)
 `-clear`   requests that the window be cleared momentarily before a
                        new plot is displayed.
 `-raise`   raises plot window after each plot
 `-noraise` does not raise plot window after each plot
 `-persist` plots windows survive after main gnuplot program exits

@end example

The options are shown above in their command-line syntax.  When entered as
resources in ".Xdefaults", they require a different syntax.

Example:
@example
          gnuplot*gray: on

@end example

`gnuplot` also provides a command line option (`-pointsize <v>`) and a
resource, `gnuplot*pointsize: <v>`, to control the size of points plotted
with the `points` plotting style.  The value `v` is a real number (greater
than 0 and less than or equal to ten) used as a scaling factor for point
sizes.  For example, `-pointsize 2` uses points twice the default size, and
`-pointsize 0.5` uses points half the normal size.

@node monochrome_options, color_resources, command-line_options, be
@subsubsection monochrome_options

@c ?commands set terminal be monochrome_options
@c ?set terminal be monochrome_options
@c ?set term be monochrome_options
@c ?be monochrome_options
For monochrome displays, `gnuplot` does not honor foreground or background
colors.  The default is black-on-white.  `-rv` or `gnuplot*reverseVideo: on`
requests white-on-black.


@node color_resources, grayscale_resources, monochrome_options, be
@subsubsection color_resources

@c ?commands set terminal be color_resources
@c ?set terminal be color_resources
@c ?set term be color_resources
@c ?be color_resources
For color displays, `gnuplot` honors the following resources (shown here
with their default values) or the greyscale resources.  The values may be
color names as listed in the BE rgb.txt file on your system, hexadecimal
RGB color specifications (see BE documentation), or a color name followed
by a comma and an `intensity` value from 0 to 1.  For example, `blue, 0.5`
means a half intensity blue.

@example
 gnuplot*background:  white
 gnuplot*textColor:   black
 gnuplot*borderColor: black
 gnuplot*axisColor:   black
 gnuplot*line1Color:  red
 gnuplot*line2Color:  green
 gnuplot*line3Color:  blue
 gnuplot*line4Color:  magenta
 gnuplot*line5Color:  cyan
 gnuplot*line6Color:  sienna
 gnuplot*line7Color:  orange
 gnuplot*line8Color:  coral

@end example


The command-line syntax for these is, for example,

Example:
@example
          gnuplot -background coral

@end example


@node grayscale_resources, line_resources, color_resources, be
@subsubsection grayscale_resources

@c ?commands set terminal be grayscale_resources
@c ?set terminal be grayscale_resources
@c ?set term be grayscale_resources
@c ?be grayscale_resources
When `-gray` is selected, `gnuplot` honors the following resources for
grayscale or color displays (shown here with their default values).  Note
that the default background is black.

@example
 gnuplot*background: black
 gnuplot*textGray:   white
 gnuplot*borderGray: gray50
 gnuplot*axisGray:   gray50
 gnuplot*line1Gray:  gray100
 gnuplot*line2Gray:  gray60
 gnuplot*line3Gray:  gray80
 gnuplot*line4Gray:  gray40
 gnuplot*line5Gray:  gray90
 gnuplot*line6Gray:  gray50
 gnuplot*line7Gray:  gray70
 gnuplot*line8Gray:  gray30

@end example



@node line_resources,  , grayscale_resources, be
@subsubsection line_resources

@c ?commands set terminal be line_resources
@c ?set terminal be line_resources
@c ?set term be line_resources
@c ?be line_resources
`gnuplot` honors the following resources for setting the width (in pixels) of
plot lines (shown here with their default values.)  0 or 1 means a minimal
width line of 1 pixel width.  A value of 2 or 3 may improve the appearance of
some plots.

@example
 gnuplot*borderWidth: 2
 gnuplot*axisWidth:   0
 gnuplot*line1Width:  0
 gnuplot*line2Width:  0
 gnuplot*line3Width:  0
 gnuplot*line4Width:  0
 gnuplot*line5Width:  0
 gnuplot*line6Width:  0
 gnuplot*line7Width:  0
 gnuplot*line8Width:  0

@end example


`gnuplot` honors the following resources for setting the dash style used for
plotting lines.  0 means a solid line.  A two-digit number `jk` (`j` and `k`
are >= 1  and <= 9) means a dashed line with a repeated pattern of `j` pixels
on followed by `k` pixels off.  For example, '16' is a "dotted" line with one
pixel on followed by six pixels off.  More elaborate on/off patterns can be
specified with a four-digit value.  For example, '4441' is four on, four off,
four on, one off.  The default values shown below are for monochrome displays
or monochrome rendering on color or grayscale displays.  For color displays,
the default for each is 0 (solid line) except for `axisDashes` which defaults
to a '16' dotted line.

@example
 gnuplot*borderDashes:   0
 gnuplot*axisDashes:        16
 gnuplot*line1Dashes:        0
 gnuplot*line2Dashes:   42
 gnuplot*line3Dashes:   13
 gnuplot*line4Dashes:   44
 gnuplot*line5Dashes:   15
 gnuplot*line6Dashes: 4441
 gnuplot*line7Dashes:   42
 gnuplot*line8Dashes:   13

@end example


@node epscairo, canvas, be, complete_list_of_terminals
@subsection epscairo

@c ?set terminal epscairo
@c ?terminal epscairo
@c ?set term epscairo
@c ?term epscairo
@cindex epscairo
@tmindex epscairo


The `epscairo` terminal device generates encapsulated PostScript (*.eps) using
the cairo and pango support libraries.  cairo version >= 1.6 is required.

Please read the help for the `pdfcairo` terminal."


@node canvas, cgm, epscairo, complete_list_of_terminals
@subsection canvas

@c ?commands set terminal canvas
@c ?set terminal canvas
@c ?set term canvas
@c ?terminal canvas
@c ?term canvas
@cindex canvas terminal


The `canvas` terminal creates a set of javascript commands that draw onto the
HTML5 canvas element.
Syntax:
@example
      set terminal canvas @{size <xsize>, <ysize>@} @{background <rgb_color>@}
                          @{font @{<fontname>@}@{,<fontsize>@}@} | @{fsize <fontsize>@}
                          @{@{no@}enhanced@} @{linewidth <lw>@}
                          @{rounded | butt | square@}
                          @{dashlength <dl>@}
                          @{standalone @{mousing@} | name '<funcname>'@}
                          @{jsdir 'URL/for/javascripts'@}
                          @{title '<some string>'@}

@end example

where <xsize> and <ysize> set the size of the plot area in pixels.
The default size in standalone mode is 600 by 400 pixels.
The default font size is 10.

NB: Only one font is available, the ascii portion of Hershey simplex Roman
provided in the file canvastext.js. You can replace this with the file
canvasmath.js, which contains also UTF-8 encoded Hershey simplex Greek and
math symbols. For consistency with other terminals, it is also possible to
use `font "name,size"`. Currently the font @ref{name} is ignored, but browser
support for named fonts is likely to arrive eventually.

The default `standalone` mode creates an html page containing javascript
code that renders the plot using the HTML 5 canvas element.  The html page
links to two required javascript files 'canvastext.js' and 'gnuplot_common.js'.
An additional file 'gnuplot_dashedlines.js' is needed to support dashed lines.
By default these point to local files, on unix-like systems usually in
directory /usr/local/share/gnuplot/<version>/js.  See installation notes for
other platforms. You can change this by using the `jsdir` option to specify
either a different local directory or a general URL.  The latter is usually
appropriate if the plot is exported for viewing on remote client machines.

All plots produced by the canvas terminal are mouseable.  The additional
keyword `mousing` causes the `standalone` mode to add a mouse-tracking box
underneath the plot. It also adds a link to a javascript file
'gnuplot_mouse.js' and to a stylesheet for the mouse box 'gnuplot_mouse.css'
in the same local or URL directory as 'canvastext.js'.

The @ref{name} option creates a file containing only javascript. Both the
javascript function it contains and the id of the canvas element that it
draws onto are taken from the following string parameter.  The commands
@example
      set term canvas name 'fishplot'
      set output 'fishplot.js'
@end example

will create a file containing a javascript function fishplot() that will
draw onto a canvas with id=fishplot.  An html page that invokes this
javascript function must also load the canvastext.js function as described
above.  A minimal html file to wrap the fishplot created above might be:

@example
      <html>
      <head>
          <script src="canvastext.js"></script>
          <script src="gnuplot_common.js"></script>
      </head>
      <body onload="fishplot();">
          <script src="fishplot.js"></script>
          <canvas id="fishplot" width=600 height=400>
              <div id="err_msg">No support for HTML 5 canvas element</div>
          </canvas>
      </body>
      </html>

@end example

The individual plots drawn on this canvas will have names fishplot_plot_1,
fishplot_plot_2, and so on. These can be referenced by external javascript
routines, for example gnuplot.toggle_visibility("fishplot_plot_2").


@node cgm, context, canvas, complete_list_of_terminals
@subsection cgm

@c ?commands set terminal cgm
@c ?set terminal cgm
@c ?set term cgm
@c ?terminal cgm
@c ?term cgm
@cindex cgm
@tmindex cgm


The `cgm` terminal generates a Computer Graphics Metafile, Version 1.
This file format is a subset of the ANSI X3.122-1986 standard entitled
"Computer Graphics - Metafile for the Storage and Transfer of Picture
Description Information".

Syntax:
@example
      set terminal cgm @{color | monochrome@} @{solid | dashed@} @{@{no@}rotate@}
                       @{<mode>@} @{width <plot_width>@} @{linewidth <line_width>@}
                       @{font "<fontname>,<fontsize>"@}
                       @{background <rgb_color>@}
  [deprecated]         @{<color0> <color1> <color2> ...@}

@end example

`solid` draws all curves with solid lines, overriding any dashed patterns;
<mode> is `landscape`, `portrait`, or `default`;
<plot_width> is the assumed width of the plot in points;
<line_width> is the line width in points (default 1);
<fontname> is the name of a font (see list of fonts below)
<fontsize> is the size of the font in points (default 12).

The first six options can be in any order.  Selecting `default` sets all
options to their default values.

The mechanism of setting line colors in the `set term` command is
deprecated.  Instead you should set the background using a separate
keyword and set the line colors using `set linetype`.
The deprecated mechanism accepted colors of the form 'xrrggbb', where x is
the literal character 'x' and 'rrggbb' are the red, green and blue components
in hex. The first color was used for the background, subsequent colors are
assigned to successive line types.

Examples:
@example
      set terminal cgm landscape color rotate dashed width 432 \\
                     linewidth 1  'Helvetica Bold' 12       # defaults
      set terminal cgm linewidth 2  14  # wider lines & larger font
      set terminal cgm portrait "Times Italic" 12
      set terminal cgm color solid      # no pesky dashes!

@end example


@menu
* cgm_font::
* cgm_fontsize::
* cgm_linewidth::
* cgm_rotate::
* cgm_solid::
* cgm_size::
* cgm_width::
* cgm_nofontlist::
@end menu

@node cgm_font, cgm_fontsize, cgm, cgm
@subsubsection cgm font

@c ?commands set terminal cgm font
@c ?set terminal cgm font
@c ?set term cgm font
@c ?cgm font
The first part of a Computer Graphics Metafile, the metafile description,
includes a font table.  In the picture body, a font is designated by an
index into this table.  By default, this terminal generates a table with
the following 35 fonts, plus six more with `italic` replaced by
`oblique`, or vice-versa (since at least the Microsoft Office and Corel
Draw CGM import filters treat `italic` and `oblique` as equivalent):


@example
      Helvetica
      Helvetica Bold
      Helvetica Oblique
      Helvetica Bold Oblique
      Times Roman
      Times Bold
      Times Italic
      Times Bold Italic
      Courier
      Courier Bold
      Courier Oblique
      Courier Bold Oblique
      Symbol
      Hershey/Cartographic_Roman
      Hershey/Cartographic_Greek
      Hershey/Simplex_Roman
      Hershey/Simplex_Greek
      Hershey/Simplex_Script
      Hershey/Complex_Roman
      Hershey/Complex_Greek
      Hershey/Complex_Script
      Hershey/Complex_Italic
      Hershey/Complex_Cyrillic
      Hershey/Duplex_Roman
      Hershey/Triplex_Roman
      Hershey/Triplex_Italic
      Hershey/Gothic_German
      Hershey/Gothic_English
      Hershey/Gothic_Italian
      Hershey/Symbol_Set_1
      Hershey/Symbol_Set_2
      Hershey/Symbol_Math
      ZapfDingbats
      Script
      15

@end example

@c ^<table align="center" border="1" rules="groups" frame="hsides" cellpadding="3">
@c ^<colgroup>
@c ^  <col align="left">
@c ^  <col align="left">
@c ^</colgroup>
@c ^<thead>
@c ^<tr><th colspan=2 align="center">CGM fonts</th></tr>
@c ^</thead>
@c ^<tbody>
@c ^<tr><td>Helvetica</td><td>Hershey/Cartographic_Roman</td></tr>
@c ^<tr><td>Helvetica Bold</td><td>Hershey/Cartographic_Greek</td></tr>
@c ^<tr><td>Helvetica Oblique</td><td>Hershey/Simplex_Roman</td></tr>
@c ^<tr><td>Helvetica Bold Oblique</td><td>Hershey/Simplex_Greek</td></tr>
@c ^<tr><td>Times Roman</td><td>Hershey/Simplex_Script</td></tr>
@c ^<tr><td>Times Bold</td><td>Hershey/Complex_Roman</td></tr>
@c ^<tr><td>Times Italic</td><td>Hershey/Complex_Greek</td></tr>
@c ^<tr><td>Times Bold Italic</td><td>Hershey/Complex_Italic</td></tr>
@c ^<tr><td>Courier</td><td>Hershey/Complex_Cyrillic</td></tr>
@c ^<tr><td>Courier Bold</td><td>Hershey/Duplex_Roman</td></tr>
@c ^<tr><td>Courier Oblique</td><td>Hershey/Triplex_Roman</td></tr>
@c ^<tr><td>Courier Bold Oblique</td><td>Hershey/Triplex_Italic</td></tr>
@c ^<tr><td>Symbol</td><td>Hershey/Gothic_German</td></tr>
@c ^<tr><td>ZapfDingbats</td><td>Hershey/Gothic_English</td></tr>
@c ^<tr><td>Script</td><td>Hershey/Gothic_Italian</td></tr>
@c ^<tr><td>15</td><td>Hershey/Symbol_Set_1</td></tr>
@c ^<tr><td></td><td>Hershey/Symbol_Set_2</td></tr>
@c ^<tr><td></td><td>Hershey/Symbol_Math</td></tr>
@c ^</tbody>
@c ^</table>

The first thirteen of these fonts are required for WebCGM.  The
Microsoft Office CGM import filter implements the 13 standard fonts
listed above, and also 'ZapfDingbats' and 'Script'.  However, the
script font may only be accessed under the name '15'.  For more on
Microsoft import filter font substitutions, check its help file which
you may find here:
@example
  C:\\Program Files\\Microsoft Office\\Office\\Cgmimp32.hlp
@end example

and/or its configuration file, which you may find here:
@example
  C:\\Program Files\\Common Files\\Microsoft Shared\\Grphflt\\Cgmimp32.cfg

@end example

In the `set term` command, you may specify a font name which does not
appear in the default font table.  In that case, a new font table is
constructed with the specified font as its first entry. You must ensure
that the spelling, capitalization, and spacing of the name are
appropriate for the application that will read the CGM file.  (Gnuplot
and any MIL-D-28003A compliant application ignore case in font names.)
If you need to add several new fonts, use several `set term` commands.

Example:
@example
      set terminal cgm 'Old English'
      set terminal cgm 'Tengwar'
      set terminal cgm 'Arabic'
      set output 'myfile.cgm'
      plot ...
      set output

@end example

You cannot introduce a new font in a `set label` command.


@node cgm_fontsize, cgm_linewidth, cgm_font, cgm
@subsubsection cgm fontsize

@c ?commands set terminal cgm fontsize
@c ?set terminal cgm fontsize
@c ?set term cgm fontsize
@c ?cgm fontsize
Fonts are scaled assuming the page is 6 inches wide.  If the @ref{size}
command is used to change the aspect ratio of the page or the CGM file
is converted to a different width, the resulting font sizes will be
scaled up or down accordingly.  To change the assumed width, use the
`width` option.


@node cgm_linewidth, cgm_rotate, cgm_fontsize, cgm
@subsubsection cgm linewidth

@c ?commands set terminal cgm linewidth
@c ?set terminal cgm linewidth
@c ?set term cgm linewidth
@c ?cgm linewidth
The `linewidth` option sets the width of lines in pt.  The default width
is 1 pt.  Scaling is affected by the actual width of the page, as
discussed under the `fontsize` and `width` options.


@node cgm_rotate, cgm_solid, cgm_linewidth, cgm
@subsubsection cgm rotate

@c ?commands set terminal cgm rotate
@c ?set terminal cgm rotate
@c ?set term cgm rotate
@c ?cgm rotate
The `norotate` option may be used to disable text rotation.  For
example, the CGM input filter for Word for Windows 6.0c can accept
rotated text, but the DRAW editor within Word cannot.  If you edit a
graph (for example, to label a curve), all rotated text is restored to
horizontal.  The Y axis label will then extend beyond the clip boundary.
With `norotate`, the Y axis label starts in a less attractive location,
but the page can be edited without damage.  The `rotate` option confirms
the default behavior.


@node cgm_solid, cgm_size, cgm_rotate, cgm
@subsubsection cgm solid

@c ?set terminal cgm solid
@c ?set term cgm solid
@c ?cgm solid
The `solid` option may be used to disable dashed line styles in the
plots.  This is useful when color is enabled and the dashing of the
lines detracts from the appearance of the plot. The `dashed` option
confirms the default behavior, which gives a different dash pattern to
each line type.


@node cgm_size, cgm_width, cgm_solid, cgm
@subsubsection cgm size

@c ?commands set terminal cgm size
@c ?set terminal cgm size
@c ?set term cgm size
@c ?cgm size
Default size of a CGM plot is 32599 units wide and 23457 units high for
landscape, or 23457 units wide by 32599 units high for portrait.


@node cgm_width, cgm_nofontlist, cgm_size, cgm
@subsubsection cgm width

@c ?commands set terminal cgm width
@c ?set terminal cgm width
@c ?set term cgm width
@c ?cgm width
All distances in the CGM file are in abstract units.  The application
that reads the file determines the size of the final plot.  By default,
the width of the final plot is assumed to be 6 inches (15.24 cm).  This
distance is used to calculate the correct font size, and may be changed
with the `width` option.  The keyword should be followed by the width in
points.  (Here, a point is 1/72 inch, as in PostScript.  This unit is
known as a "big point" in TeX.)  Gnuplot `expressions` can be used to
convert from other units.

Example:
@example
      set terminal cgm width 432            # default
      set terminal cgm width 6*72           # same as above
      set terminal cgm width 10/2.54*72     # 10 cm wide

@end example


@node cgm_nofontlist,  , cgm_width, cgm
@subsubsection cgm nofontlist

@c ?commands set terminal cgm nofontlist
@c ?set terminal cgm nofontlist
@c ?set term cgm nofontlist
@c ?cgm nofontlist
@c ?set terminal cgm winword6
@c ?set term cgm winword6
@c ?cgm winword6
The default font table includes the fonts recommended for WebCGM, which
are compatible with the Computer Graphics Metafile input filter for
Microsoft Office and Corel Draw.  Another application might use
different fonts and/or different font names, which may not be
documented.  The `nofontlist` (synonym `winword6`) option deletes the font
table from the CGM file.  In this case, the reading application should
use a default table.  Gnuplot will still use its own default font table
to select font indices.  Thus, 'Helvetica' will give you an index of 1,
which should get you the first entry in your application's default font
table. 'Helvetica Bold' will give you its second entry, etc.



@node context, corel, cgm, complete_list_of_terminals
@subsection context

@c ?commands set terminal context
@c ?set terminal context
@c ?terminal context
@c ?set term context
@c ?term context
@cindex context
@tmindex context


ConTeXt is a macro package for TeX, highly integrated with Metapost
(for drawing figures) and intended for creation of high-quality PDF documents.
The terminal outputs Metafun source, which can be edited manually,
but you should be able to configure most things from outside.

For an average user of ConTeXt + gnuplot module it's recommended to refer to
`Using ConTeXt` rather than reading this page
or to read the manual of the gnuplot module for ConTeXt.

The `context` terminal supports the following options:

Syntax:
@example
     set term context @{default@}
             @{defaultsize | size <scale> | size <xsize>@{in|cm@}, <ysize>@{in|cm@}@}
             @{input | standalone@}
             @{timestamp | notimestamp@}
             @{noheader | header "<header>"@}
             @{color | colour | monochrome@}
             @{rounded | mitered | beveled@} @{round | butt | squared@}
             @{dashed | solid@} @{dashlength | dl <dl>@}
             @{linewidth | lw <lw>@}
             @{fontscale <fontscale>@}
             @{mppoints | texpoints@}
             @{inlineimages | externalimages@}
             @{defaultfont | font "@{<fontname>@}@{,<fontsize>@}"@}

@end example

In non-standalone (`input`) graphic only parameters @ref{size} to select graphic
size, `fontscale` to scale all the labels for a factor <fontscale>
and font size, make sense, the rest is silently
ignored and should be configured in the .tex file which inputs the graphic.
It's highly recommended to set the proper fontsize if document font differs from
12pt, so that gnuplot will know how much space to reserve for labels.

`default` resets all the options to their default values.

`defaultsize` sets the plot size to 5in,3in.
@ref{size} <scale> sets the plot size to <scale> times <default value>.
If two arguments are given (separated with ','), the first one sets
the horizontal size and the second one the vertical size.
Size may be given without units (in which case it means relative to the default
value), with inches ('in') or centimeters ('cm').

`input` (default) creates a graphic that can be included into another ConTeXt
document.
`standalone` adds some lines, so that the document might be compiled as-is.
You might also want to add `header` in that case.

Use `header` for any additional settings/definitions/macros
that you might want to include in a standalone graphic. `noheader` is the default.

`notimestamp` prevents printing creation time in comments
(if version control is used, one may prefer not to commit new version when only date changes).

`color` to make color plots is the default, but @ref{monochrome} doesn't do anything special yet.
If you have any good ideas how the behaviour should differ to suit the monochrome printers better,
your suggestions are welcome.

`rounded` (default), `mitered` and `beveled` control the shape of line joins.
`round` (default), `butt` and `squared` control the shape of line caps.
See PostScript or PDF Reference Manual for explanation. For wild-behaving functions
and thick lines
it is better to use `rounded` and `round` to prevent sharp corners in line joins.
(Some general support for this should be added to Gnuplot, so that the same options
could be set for each line (style) separately).

`dashed` (default) uses different dash patterns for different line types,
`solid` draws all plots with solid lines.

`dashlength` or `dl` scales the length of the dashed-line segments by <dl>.
`linewidth` or `lw` scales all linewidths by <lw>.
(lw 1 stands for 0.5bp, which is the default line width when drawing with Metapost.)
`fontscale` scales text labels for factor <fontscale> relative to default document font.

`mppoints` uses predefined point shapes, drawn in Metapost.
`texpoints` uses easily configurable set of symbols, defined with ConTeXt
in the following way:
@example
     \\defineconversion[my own points][+,@{\\ss x@},\\mathematics@{\\circ@}]
     \\setupGNUPLOTterminal[context][points=tex,pointset=my own points]

@end example

`inlineimages` writes binary images to a string and only works in ConTeXt MKIV.
`externalimages` writes PNG files to disk and also works with ConTeXt MKII.
Gnuplot needs to have support for PNG images built in for this to work.

With `font` you can set font name and size in standalone graphics.
In non-standalone (`input`) mode only the font size is important
to reserve enough space for text labels.
The command
@example
     set term context font "myfont,ss,10"
@end example

will result in
@example
     \\setupbodyfont[myfont,ss,10pt]
@end example

If you additionally set `fontscale` to 0.8 for example,
then the resulting font will be 8pt big and
@example
     set label ... font "myfont,12"
@end example

will come out as 9.6pt.

It is your own responsibility to provide proper typescripts (and header),
otherwise switching the font will have no effect.
For a standard font in ConTeXt MKII (pdfTeX) you could use:
@example
     set terminal context standalone header '\\usetypescript[iwona][ec]' \\
         font "iwona,ss,11"
@end example

Please take a look into ConTeXt documentation, wiki or mailing list (archives)
for any up-to-date information about font usage.

Examples:
@example
     set terminal context size 10cm, 5cm     # 10cm, 5cm
     set terminal context size 4in, 3in      # 4in, 3in
@end example

For standalone (whole-page) plots with labels in UTF-8 encoding:
@example
     set terminal context standalone header '\\enableregime[utf-8]'
@end example

, /* TODO: LaTeX formatting */

@menu
* Requirements::
* Calling_gnuplot_from_ConTeXt::
@end menu

@node Requirements, Calling_gnuplot_from_ConTeXt, context, context
@subsubsection Requirements

You need gnuplot module for ConTeXt
@uref{http://ctan.org/pkg/context-gnuplot,http://ctan.org/pkg/context-gnuplot
}
and a recent version of ConTeXt.
If you want to call gnuplot on-the-fly, you also need write18 enabled.
In most TeX distributions this can be set with shell_escape=t in texmf.cnf.

See
@uref{http://wiki.contextgarden.net/Gnuplot,http://wiki.contextgarden.net/Gnuplot
}
for details about this terminal and for more exhaustive help & examples.


@node Calling_gnuplot_from_ConTeXt,  , Requirements, context
@subsubsection Calling gnuplot from ConTeXt

The easiest way to make plots in ConTeXt documents is
@example
     \\usemodule[gnuplot]
     \\starttext
     \\title@{How to draw nice plots with @{\\sc gnuplot@}?@}
     \\startGNUPLOTscript[sin]
     set format y "%.1f"
     plot sin(x) t '$\\sin(x)$'
     \\stopGNUPLOTscript
     \\useGNUPLOTgraphic[sin]
     \\stoptext
@end example

This will run gnuplot automatically and include the resulting figure in the document."

@node corel, debug, context, complete_list_of_terminals
@subsection corel

@c ?commands set terminal corel
@c ?set terminal corel
@c ?set term corel
@c ?terminal corel
@c ?term corel
@cindex corel
@tmindex corel


Legacy terminal for CorelDraw (circa 1995).

Syntax:
@example
      set terminal corel @{monochrome | color@} @{"<font>" @{<fontsize>@}@}
                         @{<xsize> <ysize> @{<linewidth> @}@}

@end example

where the fontsize and linewidth are specified in points and the sizes in
inches.  The defaults are monochrome, "SwitzerlandLight", 22, 8.2, 10 and 1.2."

@node debug, svga, corel, complete_list_of_terminals
@subsection debug

@c ?commands set terminal debug
@c ?set terminal debug
@c ?set term debug
@c ?terminal debug
@c ?term debug
@cindex debug
@tmindex debug


This terminal is provided to allow for the debugging of `gnuplot`.  It is
likely to be of use only for users who are modifying the source code."

@node svga, dumb, debug, complete_list_of_terminals
@subsection svga

@c ?commands set terminal svga
@c ?set terminal svga
@c ?set term svga
@c ?terminal svga
@c ?term svga
@cindex svga
@tmindex svga


Legacy terminal. The `svga` terminal driver supports PCs with SVGA graphics.
It is typically only compiled with DJGPP and uses the GRX graphics library.
There is also a variant for Windows 32bit, which is mainly used for
debugging. The underlying library also supports X11, Linux console and SDL,
but these targets are currently not supported.

Syntax:
@example
      set terminal svga @{font "<fontname>"@}
                        @{@{no@}enhanced@}
                        @{background <rgb color>@}
                        @{linewidth|lw <lw>@}
                        @{pointscale|ps <scale>@}
                        @{fontscale|fs <scale>@}

@end example

Enhanced text support can be activated using the `enhanced` option,
" see `enhanced text`.  Note that changing the font size in enhanced text is
currently not supported. Hence, super- and subscripts will have the same size.

The `linewidth` parameter scales the width of lines. The `pointscale`
parameter sets the scale factor for point symbols. You can use `fontscale`
to scale the bitmap font. This might be useful if you have a hi-res display.
Note that integer factors give best results."

@node dumb, dxf, svga, complete_list_of_terminals
@subsection dumb

@c ?commands set terminal dumb
@c ?set terminal dumb
@c ?set term dumb
@c ?terminal dumb
@c ?term dumb
@cindex dumb
@tmindex dumb


The `dumb` terminal driver plots into a text block using ascii characters.
It has an optional size specification and a trailing linefeed flag.

Syntax:
@example
      set terminal dumb @{size <xchars>,<ychars>@} @{[no]feed@}
                        @{aspect <htic>@{,<vtic>@}@}
                        @{[no]enhanced@}
                        @{fillchar @{solid|"<char>"@}@}
                        @{[no]attributes@}
                        @{mono|ansi|ansi256|ansirgb@}

@end example

where <xchars> and <ychars> set the size of the text block. The default is
79 by 24. The last newline is printed only if `feed` is enabled.

The `aspect` option can be used to control the aspect ratio of the plot by
setting the length of the horizontal and vertical tic marks. Only integer
values are allowed. Default is 2,1 -- corresponding to the aspect ratio of
common screen fonts.

The character "#" is used for area-fill. You can replace this with any
character available in the terminal font.  `fillchar solid` is short for
`fillchar "\\U+2588"` (unicode FULL BLOCK).

The `ansi`, `ansi256`, and `ansirgb` options will include escape
sequences in the output to handle colors.  Note that these might
not be handled by your terminal.  Default is `mono`.
To obtain the best color match in `ansi` mode, you should use
`set colorsequence classic`.
Depending on the mode, the `dumb` terminal will emit the
following sequences (without the additional whitespace):

@example
      ESC [ 0 m           reset attributes to defaults
      foreground color:
      ESC [ 1 m           set intense/bold
      ESC [ 22 m          intense/bold off
      ESC [ <fg> m        with color code 30 <= <fg> <= 37
      ESC [ 39 m          reset to default
      ESC [ 38; 5; <c> m  with palette index 16 <= <c> <= 255
      ESC [ 38; 2; <r>; <g>; <b> m  with components 0 <= <r,g,b> <= 255
      background color:
      ESC [ <bg> m        with color code 40 <= <bg> <= 47
      ESC [ 49 m          reset to default
      ESC [ 48; 5; <c> m  with palette index 16 <= <c> <= 231
      ESC [ 48; 2; <r>; <g>; <b> m  with components 0 <= <r,g,b> <= 255

@end example

See also e.g. the description at
@uref{https://en.wikipedia.org/wiki/ANSI_escape_code#Colors,https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
}


The `attributes` option enables bold and italic text on terminals or
emulators that support the escape sequences
@example
      ESC [ 1 m / 22 m    for bold on/off and
      ESC [ 3 m / 23 m    for italic on /off.

@end example

Example:
@example
      set term dumb mono size 60,15 aspect 1
      set tics nomirror scale 0.5
      plot [-5:6.5] sin(x) with impulse ls -1

@end example

@example
          1 +-------------------------------------------------+
        0.8 +|||++                   ++||||++                 |
        0.6 +|||||+                 ++|||||||+  sin(x) +----+ |
        0.4 +||||||+               ++|||||||||+               |
        0.2 +|||||||+             ++|||||||||||+             +|
          0 ++++++++++++++++++++++++++++++++++++++++++++++++++|
       -0.2 +        +|||||||||||+              +|||||||||||+ |
       -0.4 +         +|||||||||+                +|||||||||+  |
       -0.6 +          +|||||||+                  +|||||||+   |
       -0.8 +           ++||||+                    ++||||+    |
         -1 +---+--------+--------+-------+--------+--------+-+
               -4       -2        0       2        4        6  "

@end example

@node dxf, dxy800a, dumb, complete_list_of_terminals
@subsection dxf

@c ?commands set terminal dxf
@c ?set terminal dxf
@c ?set term dxf
@c ?terminal dxf
@c ?term dxf
@cindex dxf
@tmindex dxf


Terminal driver `dxf` for export to  AutoCad (Release 10.x).
It has no options. The default size is 120x80 AutoCad units.
`dxf` uses seven colors (white, red, yellow, green, cyan, blue and magenta)
that can be changed only by modifying the source file.  If a black-and-white
plotting device is used the colors are mapped to differing line thicknesses.
Note: someone please update this terminal to the 2012 DXF standard!"

@node dxy800a, eepic, dxf, complete_list_of_terminals
@subsection dxy800a

@c ?commands set terminal dxy800a
@c ?set terminal dxy800a
@c ?set term dxy800a
@c ?terminal dxy800a
@c ?term dxy800a
@cindex dxy800a
@tmindex dxy800a


Note: legacy terminal.
This terminal driver supports the Roland DXY800A plotter.  It has no options."

@node eepic, emf, dxy800a, complete_list_of_terminals
@subsection eepic

@c ?commands set terminal eepic
@c ?set terminal eepic
@c ?set term eepic
@c ?terminal eepic
@c ?term eepic
@cindex eepic
@tmindex eepic


Note: Legacy terminal (not built by default).
The latex, emtex, eepic, and tpic terminals in older versions of gnuplot
provided minimal support for graphics styles beyond simple lines and points.
They have been directly superseded by the `pict2e` terminal.
For more capable TeX/LaTeX compatible terminal types see
`cairolatex`, `context`, `epslatex`, `mp`, `pstricks`, and `tikz`.

The output of this terminal is intended for use with the "eepic.sty" macro
package for LaTeX.  To use it, you need "eepic.sty", "epic.sty" and a
DVI driver that supports the "tpic" \\specials.  If your driver doesn't
support those \\specials, "eepicemu.sty" will enable you to use some
of them.
dvips and dvipdfm do support the "tpic" \\specials, pdflatex does not.

Syntax:
@example
   set terminal eepic @{default@} @{color|monochrome|dashed@}
                      @{rotate@} @{size XX,YY@}
                      @{small|tiny|<fontsize>@}

@end example

`color` causes gnuplot to produce \\color@{...@} commands so that the graphs are
colored. Using this option, you must include \\usepackage@{color@} in the preamble
of your latex document.

`dashed` will allow dashed line types; without this option, only solid lines
with varying thickness will be used.
`dashed` and `color` are mutually exclusive; if `color` is specified, then
`dashed` will be ignored.

`rotate` will enable true rotated text (by 90 degrees). Otherwise, rotated text
will be typeset with letters stacked above each other. If you use this option
you must include \\usepackage@{graphicx@} in the preamble.

`small` will use \\scriptsize symbols as point markers. Default is to use the"
default math size. `tiny` uses \\scriptscriptstyle symbols.

The default size of an eepic plot is 5x3 inches. You can change this using
the @ref{size} terminal option.

<fontsize> is a number which specifies the font size inside the picture
environment; the unit is pt (points), i.e., 10 pt equals approx. 3.5 mm.
If fontsize is not specified, then all text inside the picture will be set
in \\footnotesize.

`default` resets all options to their defaults = no color, no dashed lines,
pseudo-rotated (stacked) text, large point symbols.

Notes:

Remember to escape the # character (or other chars meaningful to (La-)TeX)
by \\\\ (2 backslashes).

It seems that dashed lines become solid lines when the vertices of a plot
are too close. (I do not know if that is a general problem with the tpic
specials, or if it is caused by a bug in eepic.sty or dvips/dvipdfm.)

Points, among other things, are drawn using the LaTeX commands "\\Diamond",
"\\Box", etc.  These commands no longer belong to the LaTeX2e core; they are
included in the latexsym package, which is part of the base distribution and
thus part of any LaTeX implementation. Please do not forget to use this package.
Instead of latexsym, you can also include the amssymb package.

All drivers for LaTeX offer a special way of controlling text positioning:
If any text string begins with '@{', you also need to include a '@}' at the
end of the text, and the whole text will be centered both horizontally and
vertically.  If the text string begins with '[', you need to follow this with
a position specification (up to two out of t,b,l,r), ']@{', the text itself,
and finally '@}'.  The text itself may be anything LaTeX can typeset as an
LR-box.  '\\rule@{@}@{@}'s may help for best positioning.

Examples:
@example
       set term eepic
@end example

output graphs as eepic macros inside a picture environment;
\\input the resulting file in your LaTeX document.
@example
       set term eepic color tiny rotate 8
@end example

eepic macros with \\color macros, \\scripscriptsize point markers,
true rotated text, and all text set with 8pt.

About label positioning:
Use gnuplot defaults (mostly sensible, but sometimes not really best):
@example
       set title '\\LaTeX\\ -- $ \\gamma $'
@end example

Force centering both horizontally and vertically:
@example
       set label '@{\\LaTeX\\ -- $ \\gamma $@}' at 0,0
@end example

Specify own positioning (top here):
@example
       set xlabel '[t]@{\\LaTeX\\ -- $ \\gamma $@}'
@end example

The other label -- account for long ticlabels:
@example
       set ylabel '[r]@{\\LaTeX\\ -- $ \\gamma $\\rule@{7mm@}@{0pt@}@}'"

@end example

@node emf, epson_180dpi, eepic, complete_list_of_terminals
@subsection emf

@c ?commands set terminal emf
@c ?set terminal emf
@c ?set term emf
@c ?terminal emf
@c ?term emf
@cindex emf
@tmindex emf


The `emf` terminal generates an Enhanced Metafile Format file.
This file format is recognized by many Windows applications.

Syntax:
@example
      set terminal emf @{color | monochrome@}
                       @{enhanced @{noproportional@}@}
                       @{rounded | butt@}
                       @{linewidth <LW>@} @{dashlength <DL>@}
                       @{size XX,YY@} @{background <rgb_color>@}
                       @{font "<fontname>@{,<fontsize>@}"@}
                       @{fontscale <scale>@}

@end example

In @ref{monochrome} mode successive line types cycle through dash patterns.
`linewidth <factor>` multiplies all line widths by this factor.
`dashlength <factor>` is useful for thick lines.
<fontname> is the name of a font; and
`<fontsize>` is the size of the font in points.

The nominal size of the output image defaults to 1024x768 in arbitrary
units. You may specify a different nominal size using the @ref{size} option.

Enhanced text mode tries to approximate proportional character spacing.
If you are using a monospaced font, or don't like the approximation, you
can turn off this correction using the `noproportional` option.

The default settings are `color font "Arial,12" size 1024,768`
Selecting `default` sets all options to their default values.

Examples:
@example
      set terminal emf 'Times Roman Italic, 12'"

@end example

@node epson_180dpi, excl, emf, complete_list_of_terminals
@subsection epson_180dpi

@c ?commands set terminal epson_180dpi
@c ?set terminal epson_180dpi
@c ?set term epson_180dpi
@c ?terminal epson_180dpi
@c ?term epson_180dpi
@cindex epson_180dpi

@c ?commands set terminal epson_60dpi
@c ?set terminal epson_60dpi
@c ?set term epson_60dpi
@c ?terminal epson_60dpi
@c ?term epson_60dpi
@cindex epson_60dpi

@c ?commands set terminal epson_lx800
@c ?set terminal epson_lx800
@c ?set term epson_lx800
@c ?terminal epson_lx800
@c ?term epson_lx800
@cindex epson_lx800

@c ?commands set terminal nec_cp6
@c ?set terminal nec_cp6
@c ?set term nec_cp6
@c ?terminal nec_cp6
@c ?term nec_cp6
@cindex nec_cp6

@c ?commands set terminal okidata
@c ?set terminal okidata
@c ?set term okidata
@c ?terminal okidata
@c ?term okidata
@cindex okidata
@tmindex okidata


@c ?commands set terminal starc
@c ?set terminal starc
@c ?set term starc
@c ?terminal starc
@c ?term starc
@cindex starc
@tmindex starc


@c ?commands set terminal tandy_60dpi
@c ?set terminal tandy_60dpi
@c ?set term tandy_60dpi
@c ?terminal tandy_60dpi
@c ?term tandy_60dpi
@cindex tandy_60dpi

@c ?commands set terminal dpu414
@c ?set terminal dpu414
@c ?set term dpu414
@c ?terminal dpu414
@c ?term dpu414
@cindex dpu414
@tmindex dpu414


Note: only available if gnuplot is configured --with-bitmap-terminals.
This driver supports a family of Epson printers and derivatives.

`epson_180dpi` and `epson_60dpi` are drivers for Epson LQ-style 24-pin
printers with resolutions of 180 and 60 dots per inch, respectively.

`epson_lx800` is a generic 9-pin driver appropriate for printers like the
Epson LX-800, the Star NL-10 and NX-1000, the PROPRINTER, and so forth.

`nec_cp6` is generic 24-pin driver that can be used for printers like the
NEC CP6 and the Epson LQ-800.

The `okidata` driver supports the 9-pin OKIDATA 320/321 Standard printers.

The `starc` driver is for the Star Color Printer.

The `tandy_60dpi` driver is for the Tandy DMP-130 series of 9-pin, 60-dpi
printers.

The `dpu414` driver is for the Seiko DPU-414 thermal printer.

`nec_cp6` has the options:

Syntax:
@example
      set terminal nec_cp6 @{monochrome | colour | draft@}

@end example

which defaults to monochrome.

`dpu414` has the options:

Syntax:
@example
      set terminal dpu414 @{small | medium | large@} @{normal | draft@}

@end example

which defaults to medium (=font size) and normal.
Preferred combinations are `medium normal` and `small draft`.

With each of these drivers, a binary copy is required on a PC to print.
Do not use `print`---use instead `copy file /b lpt1:`.


@node excl, fig, epson_180dpi, complete_list_of_terminals
@subsection excl

@c ?commands set terminal excl
@c ?set terminal excl
@c ?set term excl
@c ?terminal excl
@c ?term excl
@cindex excl
@tmindex excl


Note: legacy terminal.
The `excl` terminal driver supports Talaris printers such as the EXCL Laser
printer and the 1590.  It has no options."

@node fig, png_, excl, complete_list_of_terminals
@subsection fig

@c ?commands set terminal fig
@c ?set terminal fig
@c ?set term fig
@c ?terminal fig
@c ?term fig
@cindex fig

@cindex xfig

The `fig` terminal device generates output in the Fig graphics language
for import into the xfig interactive drawing tool.
Notes:
@example
      The fig terminal was significantly revised in gnuplot version 5.3.
      Currently only version 3.2 of the fig file format is supported.
      Use of dash patterns may require Xfig 3.2.6 or newer.

@end example

Syntax:
@example
      set terminal fig @{monochrome | color@}
                       @{small | big | size <xsize>@{in|cm@},<ysize>@{in|cm@}@}
                       @{landscape | portrait@}
                       @{pointsmax <max_points>@}
                       @{font "<fontname>@{,<fontsize>@}"@} @{fontsize <size>@}
                       @{textnormal | @{textspecial texthidden textrigid@}@}
                       @{@{linewidth|lw@} <multiplier>@}

@end example

The default settings are
@example
      set term fig color small landscape font "Times Roman,10" lw 1.0

@end example

@ref{size} sets the size of the drawing area to <xsize>*<ysize> in units of
inches (default) or centimeters. The default is `size 5in,3in`.
`small` is shorthand for `size 5in,3in` (3in,5in in portrait mode).
`big` is shorthand for `size 8in,5in`.

`pointsmax` sets the maximum number of vertices in a polyline; longer
polylines will be broken into segments.

`font` sets the text font face to <fontname> and its size to <fontsize>
points. Choice is limited to the 35 standard PostScript fonts.
`textnormal` resets the text flags and selects postscript fonts,
`textspecial` sets the text flags for LaTeX specials,
`texthidden` sets the hidden flag and `textrigid` the rigid flag.

`linewidth` is a multiplier for the linewidth property of all lines.

Additional point-plot symbols are also available in the `fig` driver. The
symbols can be used through `pointtype` values % 100 above 50, with different
fill intensities controlled by <pointtype> % 5 and outlines in black (for
<pointtype> % 10 < 5) or in the current color.  Available symbols are
@example
        50 - 59:  circles
        60 - 69:  squares
        70 - 79:  diamonds
        80 - 89:  upwards triangles
        90 - 99:  downwards triangles
@end example

The size of these symbols scales with the font size.

RGB colors will be replaced with gray unless they have been defined in a
linetype prior to plotting or match a known named color or palette value.
See @ref{colornames}.
E.g.
@example
      set linetype 999 lc rgb '#aabbcc'
      plot $data with fillecurve fillcolor rgb '#aabbcc'

@end example


@node png_, ggi, fig, complete_list_of_terminals
@subsection png

@c ?commands set terminal png
@c ?set terminal png
@c ?set term png
@c ?terminal png
@c ?term png
@cindex png
@tmindex png


Syntax:
@example
      set terminal png
             @{@{no@}enhanced@}
             @{@{no@}transparent@} @{@{no@}interlace@}
             @{@{no@}truecolor@} @{rounded|butt@}
             @{linewidth <lw>@} @{dashlength <dl>@}
             @{tiny | small | medium | large | giant@}
             @{font "<face> @{,<pointsize>@}"@} @{fontscale <scale>@}
             @{size <x>,<y>@} @{@{no@}crop@}
             @{background <rgb_color>@}

@end example

PNG, JPEG and GIF images are created using the external library libgd.
PNG plots may be viewed interactively by piping the output to the
'display' program from the ImageMagick package as follows:
@example
               set term png
               set output '| display png:-'
@end example

You can view the output from successive plot commands interactively by typing
<space> in the display window.  To save the current plot to a file,
left click in the display window and choose @ref{save}.

`transparent` instructs the driver to make the background color transparent.
Default is `notransparent`.

`interlace` instructs the driver to generate interlaced PNGs.
Default is `nointerlace`.

The `linewidth` and `dashlength` options are scaling factors that affect all
lines drawn, i.e. they are multiplied by values requested in various drawing
commands.

By default the png terminal creates TrueColor images with 24 bits of color
information per pixel. The `notruecolor` option instead uses only 8 bits,
(256 indexed colors).
Transparent fill styles require the `truecolor` option. See `fillstyle`.
A transparent background is possible in either indexed or TrueColor images.
Antialiasing also requires TrueColor.

`butt` instructs the driver to use a line drawing method that does
not overshoot the desired end point of a line.  This setting is only
relevant for line widths greater than 1.  The alternative is `rounded`,
which produces somewhat more uniform curved lines if antialiasing is not
available (`notruecolor`) but can be much slower.

The details of font selection are complicated.
Two equivalent simple examples are given below:
@example
     set term png font arial 11
     set term png font "arial,11"
@end example

For more information please see the separate section under `fonts`.

The output plot size <x,y> is given in pixels---it defaults to 640x480.
Please see additional information under `canvas` and @ref{size}.
Blank space at the edges of the finished plot may be trimmed using the `crop`
option, resulting in a smaller final image size. Default is `nocrop`.


@menu
* examples____::
@end menu

@node examples____,  , png_, png_
@subsubsection examples

@c ?set term png examples

@example
      set terminal png font "arial,14" size 800,600 background "white"

@end example

Searches for a scalable font with face name 'arial' and sets the font
size to 14pt.  Please see `fonts` for details of how the font search
is done.

@example
      set terminal png transparent enhanced

@end example

Use 24 bits of color information per pixel, with a transparent background.
Use the `enhanced text` mode to control the layout of strings to be printed.


@node ggi, gpic, png_, complete_list_of_terminals
@subsection ggi

@c ?commands set terminal ggi
@c ?set terminal ggi
@c ?set term ggi
@c ?terminal ggi
@c ?term ggi
@cindex ggi
@tmindex ggi


Legacy terminal driver for the GGI (General Graphics Interface) project."

Syntax:
@example
   set terminal ggi [acceleration <integer>] [[mode] @{mode@}]

@end example

In X the window cannot be resized using window manager handles, but the
mode can be given with the mode option, e.g.:
@example
 - V1024x768
 - V800x600
 - V640x480
 - V320x200
@end example

Please refer to the ggi documentation for other modes. The 'mode' keyword
is optional. It is recommended to select the target by environment variables
as explained in the libggi manual page. To get DGA on X, you should for
example
@example
   bash> export GGI_DISPLAY=DGA
   csh>  setenv GGI_DISPLAY DGA

@end example

'acceleration' is only used for targets which report relative pointer
motion events (e.g. DGA) and is a strictly positive integer multiplication
factor for the relative distances.  The default for acceleration is 7.

Examples:
@example
   set term ggi acc 10
   set term ggi acc 1 mode V1024x768
   set term ggi V1024x768"

@end example

@node gpic, grass, ggi, complete_list_of_terminals
@subsection gpic

@c ?commands set terminal gpic
@c ?set terminal gpic
@c ?set term gpic
@c ?terminal gpic
@c ?term gpic
@cindex gpic
@tmindex gpic


Note: Legacy terminal (present only if gnuplot was configured --with-gpic).
The `gpic` terminal driver generates GPIC graphs in the Free Software
Foundations's "groff" package.  The default size is 5 x 3 inches.  The only
option is the origin, which defaults to (0,0).

Syntax:
@example
      set terminal gpic @{<x> <y>@}

@end example

where `x` and `y` are in inches.

A simple graph can be formatted using

@example
      groff -p -mpic -Tps file.pic > file.ps.

@end example

The output from pic can be pipe-lined into eqn, so it is possible to put
complex functions in a graph with the `set label` and `set @{x/y@}label`
commands.  For instance,

@example
      set ylab '@@space 0 int from 0 to x alpha ( t ) roman d t@@'

@end example

will label the y axis with a nice integral if formatted with the command:

@example
      gpic filename.pic | geqn -d@@@@ -Tps | groff -m[macro-package] -Tps
          > filename.ps

@end example

Figures made this way can be scaled to fit into a document.  The pic language
is easy to understand, so the graphs can be edited by hand if need be.  All
co-ordinates in the pic-file produced by `gnuplot` are given as x+gnuplotx
and y+gnuploty.  By default x and y are given the value 0.  If this line is
removed with an editor in a number of files, one can put several graphs in
one figure like this (default size is 5.0x3.0 inches):

@example
      .PS 8.0
      x=0;y=3
      copy "figa.pic"
      x=5;y=3
      copy "figb.pic"
      x=0;y=0
      copy "figc.pic"
      x=5;y=0
      copy "figd.pic"
      .PE

@end example

This will produce an 8-inch-wide figure with four graphs in two rows on top
of each other.

One can also achieve the same thing by specifying x and y in the command

@example
      set terminal gpic x y

@end example


@node grass, hp2623a, gpic, complete_list_of_terminals
@subsection grass

@c ?commands set terminal grass
@c ?set terminal grass
@c ?set term grass
@c ?terminal grass
@c ?term grass
@cindex grass
@tmindex grass


Note: legacy terminal.
The `grass` terminal driver gives `gnuplot` capabilities to users of the
GRASS geographic information system.  Contact grassp-list@@moon.cecer.army.mil
for more information.  Pages are written to the current frame of the GRASS
Graphics Window.  There are no options."

@node hp2623a, hp2648, grass, complete_list_of_terminals
@subsection hp2623a

@c ?commands set terminal hp2623a
@c ?set terminal hp2623a
@c ?set term hp2623a
@c ?terminal hp2623a
@c ?term hp2623a
@cindex hp2623a
@tmindex hp2623a


The `hp2623a` terminal driver supports the Hewlett Packard HP2623A.  It has
no options."

@node hp2648, hp500c, hp2623a, complete_list_of_terminals
@subsection hp2648

@c ?commands set terminal hp2648
@c ?set terminal hp2648
@c ?set term hp2648
@c ?terminal hp2648
@c ?term hp2648
@cindex hp2648
@tmindex hp2648


The `hp2648` terminal driver supports the Hewlett Packard HP2647 and HP2648.
It has no options."

@node hp500c, hpgl, hp2648, complete_list_of_terminals
@subsection hp500c

@c ?commands set terminal hp500c
@c ?set terminal hp500c
@c ?set term hp500c
@c ?terminal hp500c
@c ?term hp500c
@cindex hp500c
@tmindex hp500c


Note: only available if gnuplot is configured --with-bitmap-terminals.
The `hp500c` terminal driver supports the Hewlett Packard HP DeskJet 500c.
It has options for resolution and compression.

Syntax:
@example
      set terminal hp500c @{<res>@} @{<comp>@}

@end example

where `res` can be 75, 100, 150 or 300 dots per inch and `comp` can be "rle",
or "tiff".  Any other inputs are replaced by the defaults, which are 75 dpi
and no compression.  Rasterization at the higher resolutions may require a
large amount of memory."

@node hpgl, hpljii, hp500c, complete_list_of_terminals
@subsection hpgl

@c ?commands set terminal hpgl
@c ?set terminal hpgl
@c ?set term hpgl
@c ?terminal hpgl
@c ?term hpgl
@cindex hpgl
@tmindex hpgl


Syntax:
@example
      set terminal hpgl @{<number_of_pens>@} @{eject@} @{fontscale <scale>@}

@end example

The `hpgl` driver produces HPGL output for Hewlett Packard pen plotters
like the HP7475A and many other plotters dating back to the 1970s.
Also, HPGL graphics can be imported by many software packages.
The HPGL command language was largely superseded in later printers by the
PCL command language.  See `set term pcl5`.

Terminal options control the number of pens used and whether or not the
plotter ejects a page when done. The default is to use 6 pens and
not eject the page.

All text is drawn in a uniform size. The `fontscale` option applies
a scale factor to make this size larger or smaller.
If gnuplot's current encoding is set to either iso_8859_1 cp850,
non-ascii characters are translated for handling by some printer models
that support the corresponding character set.  If your printer model
does not support this, do not set these encodings.


@node hpljii, hppj, hpgl, complete_list_of_terminals
@subsection hpljii

@c ?commands set terminal hpljii
@c ?set terminal hpljii
@c ?set term hpljii
@c ?terminal hpljii
@c ?term hpljii
@cindex hpljii
@tmindex hpljii


@c ?commands set terminal hpdj
@c ?set terminal hpdj
@c ?set term hpdj
@c ?terminal hpdj
@c ?term hpdj
@cindex hpdj
@tmindex hpdj


Note: only available if gnuplot is configured --with-bitmap-terminals.
The `hpljii` terminal driver supports the HP Laserjet Series II printer.  The
`hpdj` driver supports the HP DeskJet 500 printer.  These drivers allow a
choice of resolutions.

Syntax:
@example
      set terminal hpljii | hpdj @{<res>@}

@end example

where `res` may be 75, 100, 150 or 300 dots per inch; the default is 75.
Rasterization at the higher resolutions may require a large amount of memory.

The `hp500c` terminal is similar to `hpdj`; `hp500c` additionally supports
color and compression."

@node hppj, imagen, hpljii, complete_list_of_terminals
@subsection hppj

@c ?commands set terminal hppj
@c ?set terminal hppj
@c ?set term hppj
@c ?terminal hppj
@c ?term hppj
@cindex hppj
@tmindex hppj


Note: only available if gnuplot is configured --with-bitmap-terminals.
The `hppj` terminal driver supports the HP PaintJet and HP3630 printers.  The
only option is the choice of font.

Syntax:
@example
      set terminal hppj @{FNT5X9 | FNT9X17 | FNT13X25@}

@end example

with the middle-sized font (FNT9X17) being the default."

@node imagen, kyo, hppj, complete_list_of_terminals
@subsection imagen

@c ?commands set terminal imagen
@c ?set terminal imagen
@c ?set term imagen
@c ?terminal imagen
@c ?term imagen
@cindex imagen
@tmindex imagen


The `imagen` terminal driver supports Imagen laser printers.  It is capable
of placing multiple graphs on a single page.

Syntax:
@example
      set terminal imagen @{<fontsize>@} @{portrait | landscape@}
                          @{[<horiz>,<vert>]@}

@end example

where `fontsize` defaults to 12 points and the layout defaults to `landscape`.
`<horiz>` and `<vert>` are the number of graphs in the horizontal and
vertical directions; these default to unity.

Example:
@example
      set terminal imagen portrait [2,3]

@end example

puts six graphs on the page in three rows of two in portrait orientation."

@node kyo, latex, imagen, complete_list_of_terminals
@subsection kyo

@c ?commands set terminal kyo
@c ?set terminal kyo
@c ?set term kyo
@c ?terminal kyo
@c ?term kyo
@cindex kyo
@tmindex kyo


@c ?commands set terminal prescribe
@c ?set terminal prescribe
@c ?set term prescribe
@c ?terminal prescribe
@c ?term prescribe
@cindex prescribe
@tmindex prescribe


The `kyo` and `prescribe` terminal drivers support the Kyocera laser printer.
The only difference between the two is that `kyo` uses "Helvetica" whereas
`prescribe` uses "Courier".  There are no options.  Note: legacy terminal."

@node latex, lua, kyo, complete_list_of_terminals
@subsection latex

@c ?commands set terminal emtex
@c ?set terminal emtex
@c ?set term emtex
@c ?terminal emtex
@c ?term emtex
@cindex emtex
@tmindex emtex


@c ?commands set terminal latex
@c ?set terminal latex
@c ?set term latex
@c ?terminal latex
@c ?term latex
@cindex latex
@tmindex latex


Note: Legacy terminal (not built by default).
The latex, emtex, eepic, and tpic terminals in older versions of gnuplot
provided minimal support for graphics styles beyond simple lines and points.
They have been directly superseded by the `pict2e` terminal.
For more capable TeX/LaTeX compatible terminal types see
`cairolatex`, `context`, `epslatex`, `mp`, `pstricks`, and `tikz`.

Syntax:
@example
      set terminal @{latex | emtex@} @{default | @{courier|roman@} @{<fontsize>@}@}
                   @{size <XX>@{unit@}, <YY>@{unit@}@} @{rotate | norotate@}
                   @{color | monochrome@}

@end example

By default the plot will inherit font settings from the embedding document.
You have the option of forcing either Courier (cmtt) or Roman (cmr) fonts
instead. In this case you may also specify a fontsize.
Unless your driver is capable of building fonts at any size (e.g. dvips),
stick to the standard 10, 11 and 12 point sizes.

METAFONT users beware: METAFONT does not like odd sizes.

All drivers for LaTeX offer a special way of controlling text positioning:
If any text string begins with '@{', you also need to include a '@}' at the
end of the text, and the whole text will be centered both horizontally and
vertically.  If the text string begins with '[', you need to follow this with
a position specification (up to two out of t,b,l,r), ']@{', the text itself,
and finally '@}'.  The text itself may be anything LaTeX can typeset as an
LR-box.  '\\rule@{@}@{@}'s may help for best positioning.

Points, among other things, are drawn using the LaTeX commands "\\Diamond" and
"\\Box".  These commands no longer belong to the LaTeX2e core; they are included
in the latexsym package, which is part of the base distribution and thus part
of any LaTeX implementation.  Please do not forget to use this package.
Other point types use symbols from the amssymb package.

The default size for the plot is 5 inches by 3 inches. The @ref{size} option
changes this to whatever the user requests. By default the X and Y sizes
are taken to be in inches, but other units are possible (currently only cm).

If `rotate` is specified, rotated text, especially a rotated y-axis label,
is possible (the packages graphics or graphicx are needed). The 'stacked'
y-axis label mechanism is then deactivated. This will also significantly
improve the quality of line drawing, and is default since version 5.3.

The option `color` enables color, while @ref{monochrome} uses only black and white
drawing elements. You need to load the color or xcolor package in the preamble
of your latex document.

Examples:
About label positioning:
Use gnuplot defaults (mostly sensible, but sometimes not really best):
@example
       set title '\\LaTeX\\ -- $ \\gamma $'
@end example

Force centering both horizontally and vertically:
@example
       set label '@{\\LaTeX\\ -- $ \\gamma $@}' at 0,0
@end example

Specify own positioning (top here):
@example
       set xlabel '[t]@{\\LaTeX\\ -- $ \\gamma $@}'
@end example

The other label -- account for long ticlabels:
@example
       set ylabel '[r]@{\\LaTeX\\ -- $ \\gamma $\\rule@{7mm@}@{0pt@}@}'"

@end example

@node lua, mf, latex, complete_list_of_terminals
@subsection lua

@c ?commands set terminal lua
@c ?set terminal lua
@c ?set term lua
@c ?terminal lua
@c ?term lua
@cindex lua
@tmindex lua


The `lua` generic terminal driver works in conjunction with an
external Lua script to create a target-specific plot file.
Currently the only supported target is TikZ -> pdflatex.

Information about Lua is available at http://www.lua.org .

Syntax:
@example
   set terminal lua <target name> | "<file name>"
                       @{<script_args> ...@}
                       @{help@}

@end example

A 'target name' or 'file name' (in quotes) for a script is mandatory.
If a 'target name' for the script is given, the terminal will look for
"gnuplot-<target name>.lua" in the local directory and on failure in
the environmental variable GNUPLOT_LUA_DIR.

All arguments will be provided to the selected script for further
evaluation. E.g. 'set term lua tikz help' will cause the script itself
to print additional help on options and choices for the script.


@node mf, mp, lua, complete_list_of_terminals
@subsection mf

@c ?commands set terminal mf
@c ?set terminal mf
@c ?set term mf
@c ?terminal mf
@c ?term mf
@cindex mf

@cindex metafont

Note: legacy terminal (not built by default).
The `mf` terminal driver creates an input file to the METAFONT program.  Thus a
figure may be used in the TeX document in the same way as is a character.

To use a picture in a document, the METAFONT program must be run with the
output file from `gnuplot` as input.  Thus, the user needs a basic knowledge
of the font creating process and the procedure for including a new font in a
document.  However, if the METAFONT program is set up properly at the local
site, an unexperienced user could perform the operation without much trouble.

The text support is based on a METAFONT character set.  Currently the
Computer Modern Roman font set is input, but the user is in principal free to
choose whatever fonts he or she needs.  The METAFONT source files for the
chosen font must be available.  Each character is stored in a separate
picture variable in METAFONT.  These variables may be manipulated (rotated,
scaled etc.) when characters are needed.  The drawback is the interpretation
time in the METAFONT program.  On some machines (i.e. PC) the limited amount
of memory available may also cause problems if too many pictures are stored.

The `mf` terminal has no options.

@menu
* METAFONT_Instructions::
@end menu

@node METAFONT_Instructions,  , mf, mf
@subsubsection METAFONT Instructions

@c ?commands set terminal mf detailed
@c ?set terminal mf detailed
@c ?set term mf detailed
@c ?mf detailed
@c ?metafont detailed

- Set your terminal to METAFONT:
@example
  set terminal mf
@end example

- Select an output-file, e.g.:
@example
  set output "myfigures.mf"
@end example

- Create your pictures. Each picture will generate a separate character. Its
default size will be 5*3 inches. You can change the size by saying `set size
0.5,0.5` or whatever fraction of the default size you want to have.

- Quit `gnuplot`.

- Generate a TFM and GF file by running METAFONT on the output of `gnuplot`.
Since the picture is quite large (5*3 in), you will have to use a version of
METAFONT that has a value of at least 150000 for memmax.  On Unix systems
these are conventionally installed under the name bigmf.  For the following
assume that the command virmf stands for a big version of METAFONT.  For
example:

- Invoke METAFONT:
@example
    virmf '&plain'
@end example

- Select the output device: At the METAFONT prompt ('*') type:
@example
    \\mode:=CanonCX;     % or whatever printer you use
@end example

- Optionally select a magnification:
@example
    mag:=1;             % or whatever you wish
@end example

- Input the `gnuplot`-file:
@example
    input myfigures.mf
@end example

On a typical Unix machine there will usually be a script called "mf" that
executes virmf '&plain', so you probably can substitute mf for virmf &plain.
This will generate two files: mfput.tfm and mfput.$$$gf (where $$$ indicates
the resolution of your device).  The above can be conveniently achieved by
typing everything on the command line, e.g.:
virmf '&plain' '\\mode:=CanonCX; mag:=1; input myfigures.mf'
In this case the output files will be named myfigures.tfm and
myfigures.300gf.

- Generate a PK file from the GF file using gftopk:
@example
  gftopk myfigures.300gf myfigures.300pk
@end example

The name of the output file for gftopk depends on the DVI driver you use.
Ask your local TeX administrator about the naming conventions.  Next, either
install the TFM and PK files in the appropriate directories, or set your
environment variables properly.  Usually this involves setting TEXFONTS to
include the current directory and doing the same thing for the environment
variable that your DVI driver uses (no standard name here...).  This step is
necessary so that TeX will find the font metric file and your DVI driver will
find the PK file.

- To include your pictures in your document you have to tell TeX the font:
@example
  \\font\\gnufigs=myfigures
@end example

Each picture you made is stored in a single character.  The first picture is
character 0, the second is character 1, and so on...  After doing the above
step, you can use the pictures just like any other characters.  Therefore, to
place pictures 1 and 2 centered in your document, all you have to do is:
@example
  \\centerline@{\\gnufigs\\char0@}
  \\centerline@{\\gnufigs\\char1@}
@end example

in plain TeX.  For LaTeX you can, of course, use the picture environment and
place the picture wherever you wish by using the \\makebox and \\put macros.

This conversion saves you a lot of time once you have generated the font;
TeX handles the pictures as characters and uses minimal time to place them,
and the documents you make change more often than the pictures do.  It also
saves a lot of TeX memory.  One last advantage of using the METAFONT driver
is that the DVI file really remains device independent, because no \\special
commands are used as in the eepic and tpic drivers."

@node mp, mif, mf, complete_list_of_terminals
@subsection mp

@c ?commands set terminal mpost
@c ?set terminal mp
@c ?set term mp
@c ?terminal mp
@c ?term mp
@cindex mp

@cindex metapost


Note: legacy terminal (not built by default).
The `mp` driver produces output intended to be input to the Metapost program.
Running Metapost on the file creates EPS files containing the plots. By
default, Metapost passes all text through TeX.  This has the advantage of
allowing essentially  any TeX symbols in titles and labels.

Syntax:
@example
   set term mp @{color | colour | monochrome@}
               @{solid | dashed@}
               @{notex | tex | latex@}
               @{magnification <magsize>@}
               @{psnfss | psnfss-version7 | nopsnfss@}
               @{prologues <value>@}
               @{a4paper@}
               @{amstex@}
               @{"<fontname> @{,<fontsize>@}"@}

@end example

The option `color` causes lines to be drawn in color (on a printer or display
that supports it), @ref{monochrome} (or nothing) selects black lines.  The option
`solid` draws solid lines, while `dashed` (or nothing) selects lines with
different patterns of dashes.  If `solid` is selected but `color` is not,
nearly all lines will be identical.  This may occasionally be useful, so it is
allowed.

The option `notex` bypasses TeX entirely, therefore no TeX code can be used in
labels under this option.  This is intended for use on old plot files or files
that make frequent use of common characters like `$` and `%` that require
special handling in TeX.

The option `tex` sets the terminal to output its text for TeX to process.

The option `latex` sets the terminal to output its text for processing by
LaTeX. This allows things like \\frac for fractions which LaTeX knows about
but TeX does not.  Note that you must set the environment variable TEX to the
name of your LaTeX executable (normally latex) if you use this option or use
`mpost --tex=<name of LaTeX executable> ...`. Otherwise metapost will try and
use TeX to process the text and it won't work.

Changing font sizes in TeX has no effect on the size of mathematics, and there
is no foolproof way to make such a change, except by globally  setting a
magnification factor. This is the purpose of the `magnification` option. It
must be followed by a scaling factor. All text (NOT the graphs) will be scaled
by this factor. Use this if you have math that you want at some size other
than the default 10pt. Unfortunately, all math will be the same size, but see
the discussion below on editing the MP output. `mag` will also work under
`notex` but there seems no point in using it as the font size option (below)
works as well.

The option `psnfss` uses postscript fonts in combination with LaTeX. Since
this option only makes sense, if LaTeX is being used, the `latex` option is selected
automatically. This option includes the following packages for LaTeX:
inputenc(latin1), fontenc(T1), mathptmx, helvet(scaled=09.2), courier, latexsym
and textcomp.

The option `psnfss-version7` uses also postscript fonts in LaTeX (option `latex`
is also automatically selected), but uses the following packages with LaTeX:
inputenc(latin1), fontenc(T1), times, mathptmx, helvet and courier.

The option `nopsnfss` is the default and uses the standard font (cmr10 if not
otherwise specified).

The option `prologues` takes a value as an additional argument and adds the line
`prologues:=<value>` to the metapost file. If a value of `2` is specified metapost
uses postscript fonts to generate the eps-file, so that the result can be viewed
using e.g. ghostscript. Normally the output of metapost uses TeX fonts and therefore
has to be included in a (La)TeX file before you can look at it.

The option `noprologues` is the default. No additional line specifying the prologue
will be added.

The option `a4paper` adds a `[a4paper]` to the documentclass. Normally letter paper
is used (default). Since this option is only used in case of LaTeX, the `latex` option
is selected automatically.

The option `amstex` automatically selects the `latex` option and includes the following
LaTeX packages: amsfonts, amsmath(intlimits). By default these packages are not
included.

A name in quotes selects the font that will be used when no explicit font is
given in a `set label` or @ref{title}.  A name recognized by TeX (a TFM file
exists) must be used.  The default is "cmr10" unless `notex` is selected,
then it is "pcrr8r" (Courier).  Even under `notex`, a TFM file is needed by
Metapost. The file `pcrr8r.tfm` is the name given to Courier in LaTeX's psnfss
package.  If you change the font from the `notex` default, choose a font that
matches the ASCII encoding at least in the range 32-126.  `cmtt10` almost
works, but it has a nonblank character in position 32 (space).

The size can be any number between 5.0 and 99.99.  If it is omitted, 10.0 is
used.  It is advisable to use `magstep` sizes: 10 times an integer or
half-integer power of 1.2, rounded to two decimals, because those are the most
available sizes of fonts in TeX systems.

All the options are optional.  If font information is given, it must be at the
end, with size (if present) last.  The size is needed to select a size for the
font, even if the font name includes size information.  For example,
`set term mp "cmtt12"` selects cmtt12 shrunk to the default size 10.  This
is probably not what you want or you would have used cmtt10.

The following common ascii characters need special treatment in TeX:
@example
   $, &, #, %, _;  |, <, >;  ^, ~,  \\, @{, and @}
@end example

The five characters $, #, &, _, and % can simply be escaped, e.g., `\\$`.
The three characters <, >, and | can be wrapped in math mode, e.g., `$<$`.
The remainder require some TeX work-arounds.  Any good book on TeX will give
some guidance.

If you type your labels inside double quotes, backslashes in TeX code need to
be escaped (doubled). Using single quotes will avoid having to do this, but
then you cannot use `\\n` for line breaks.  As of this writing, version 3.7 of
gnuplot processes titles given in a `plot` command differently than in other
places, and backslashes in TeX commands need to be doubled regardless of the
style of quotes.

Metapost pictures are typically used in TeX documents.  Metapost deals with
fonts pretty much the same way TeX does, which is different from most other
document preparation programs.  If the picture is included in a LaTeX document
using the graphics package, or in a plainTeX document via epsf.tex, and then
converted to PostScript with dvips (or other dvi-to-ps converter), the text in
the plot will usually be handled correctly.  However, the text may not appear
if you send the Metapost output as-is to a PostScript interpreter.


@menu
* Metapost_Instructions::
@end menu

@node Metapost_Instructions,  , mp, mp
@subsubsection Metapost Instructions

@c ?commands set terminal mp detailed
@c ?set terminal mp detailed
@c ?set term mp detailed
@c ?mp detailed
@c ?metapost detailed

- Set your terminal to Metapost, e.g.:
@example
   set terminal mp mono "cmtt12" 12

@end example

- Select an output-file, e.g.:
@example
   set output "figure.mp"

@end example

- Create your pictures.  Each plot (or multiplot group) will generate a
separate Metapost beginfig...endfig group.  Its default size will be 5 by 3
inches.  You can change the size by saying `set size 0.5,0.5` or whatever
fraction of the default size you want to have.

- Quit gnuplot.

- Generate EPS files by running Metapost on the output of gnuplot:
@example
   mpost figure.mp  OR  mp figure.mp
@end example

The name of the Metapost program depends on the system, typically `mpost` for
a Unix machine and `mp` on many others.  Metapost will generate one EPS file
for each picture.

- To include your pictures in your document you can use the graphics package
in LaTeX or epsf.tex in plainTeX:
@example
   \\usepackage@{graphics@} % LaTeX
   \\input epsf.tex       % plainTeX
@end example

If you use a driver other than dvips for converting TeX DVI output to PS, you
may need to add the following line in your LaTeX document:
@example
   \\DeclareGraphicsRule@{*@}@{eps@}@{*@}@{@}
@end example

Each picture you made is in a separate file.  The first picture is in, e.g.,
figure.0, the second in figure.1, and so on....  To place the third picture in
your document, for example, all you have to do is:
@example
   \\includegraphics@{figure.2@} % LaTeX
   \\epsfbox@{figure.2@}         % plainTeX

@end example

The advantage, if any, of the mp terminal over a postscript terminal is
editable output.  Considerable effort went into making this output as clean as
possible.  For those knowledgeable in the Metapost language, the default line
types and colors can be changed by editing the arrays `lt[]` and `col[]`.
The choice of solid vs dashed lines, and color vs black lines can be change by
changing the values assigned to the booleans `dashedlines` and `colorlines`.
If the default `tex` option was in effect, global changes to the text of
labels can be achieved by editing the `vebatimtex...etex` block.  In
particular, a LaTeX preamble can be added if desired, and then LaTeX's
built-in size changing commands can be used for maximum flexibility. Be sure
to set the appropriate MP configuration variable to force Metapost to run
LaTeX instead of plainTeX."

@node mif, pbm, mp, complete_list_of_terminals
@subsection mif

@c ?commands set terminal mif
@c ?set terminal mif
@c ?set term mif
@c ?terminal mif
@c ?term mif
@cindex mif
@tmindex mif


Note: Legacy terminal.
The `mif` terminal driver produces Frame Maker MIF format version 3.00.  It
plots in MIF Frames with the size 15*10 cm, and plot primitives with the same
pen will be grouped in the same MIF group.  Plot primitives in a `gnuplot`
page will be plotted in a MIF Frame, and several MIF Frames are collected in
one large MIF Frame.  The MIF font used for text is "Times".

Several options may be set in the MIF 3.00 driver.

Syntax:
@example
      set terminal mif @{color | colour | monochrome@} @{polyline | vectors@}
                       @{help | ?@}

@end example

`colour` plots lines with line types >= 0 in colour (MIF sep. 2--7) and
@ref{monochrome} plots all line types in black (MIF sep. 0).
`polyline` plots curves as continuous curves and @ref{vectors} plots curves as
collections of vectors.
@ref{help} and `?` print online help on standard error output---both print a
short description of the usage; @ref{help} also lists the options.

Examples:
@example
      set term mif colour polylines    # defaults
      set term mif                     # defaults
      set term mif vectors
      set term mif help"

@end example

@node pbm, dospc, mif, complete_list_of_terminals
@subsection pbm

@c ?commands set terminal pbm
@c ?set terminal pbm
@c ?set term pbm
@c ?terminal pbm
@c ?term pbm
@cindex pbm
@tmindex pbm


Note: only available if gnuplot is configured --with-bitmap-terminals.
Syntax:
@example
      set terminal pbm @{<fontsize>@} @{<mode>@} @{size <x>,<y>@}

@end example

where <fontsize> is `small`, `medium`, or `large` and <mode> is @ref{monochrome},
@ref{gray} or `color`.  The default plot size is 640 pixels wide and 480 pixels
high. The output size is white-space padded to the nearest multiple of
8 pixels on both x and y. This empty space may be cropped later if needed.

The output of the `pbm` driver depends upon <mode>: @ref{monochrome} produces a
portable bitmap (one bit per pixel), @ref{gray} a portable graymap (three bits
per pixel) and `color` a portable pixmap (color, four bits per pixel).

The output of this driver can be used with various image conversion and
manipulation utilities provided by NETPBM.  Based on Jef Poskanzer's
PBMPLUS package, NETPBM provides programs to convert the above PBM formats
to GIF, TIFF, MacPaint, Macintosh PICT, PCX, X11 bitmap and many others.
Complete information is available at http://netpbm.sourceforge.net/.

Examples:
@example
      set terminal pbm small monochrome                # defaults
      set terminal pbm color medium size 800,600
      set output '| pnmrotate 45 | pnmtopng > tilted.png'  # uses NETPBM"

@end example

@node dospc, pdf, pbm, complete_list_of_terminals
@subsection dospc

@c ?commands set terminal dospc
@c ?set terminal dospc
@c ?set term dospc
@c ?terminal dospc
@c ?term dospc
@cindex dospc
@tmindex dospc


Note: legacy terminal.
The `dospc` interactive terminal supports PCs with arbitrary graphics boards,
which will be automatically detected. It uses the OpenWatcom graphics
library.

Syntax:
@example
      set terminal dospc
          @{@{no@}@{enhanced@}@}
          @{fontscale <scale>@} @{pointsize <scale>@} @{linewidth <scale@}
          @{background <rgbcolor>@}

@end example

Line widths, and point and font sizes can be scaled using the `linewidth`,
`pointscale`, or `fontscale` options, respectively.

`background` sets the background color (default: black). It is only supported
with adapters with 16 or more colors.

@{`no`@}`enhanced` toggles enhanced text mode features like sub-
and superscripts, see `enhanced text` for more information.

To select a particular (S)VGA graphics mode, set the environment
variable PCTRM to one of S640, S800, S1024, S1280, or S1600.
Only 256 color SVGA modes are supported at this time.
For other adapters the resolution will be selected automatically.

Limitations:
This terminal supports a maximum of 256 colors. Transparency is not
available. Thick lines are approximated very crudely, so expect ugly
output for non-vertical or non-horizontal lines."

@node pdf, pstricks, dospc, complete_list_of_terminals
@subsection pdf

@c ?commands set terminal pdf
@c ?set terminal pdf
@c ?set term pdf
@c ?terminal pdf
@c ?term pdf
@cindex pdf
@tmindex pdf


[DEPRECATED] This terminal uses the non-free library PDFlib (GmbH Munchen)"
to produce files in Portable Document Format. Unless you have a commercial
license for PDFlib and need some special feature it provides you would do
better to use the cairo pdf terminal instead.  Gnuplot can also export PDF
files from wxt or qt interactive terminal sessions.

Syntax:
@example
      set terminal pdf @{monochrome|color|colour@}
                       @{@{no@}enhanced@}
                       @{fname "<font>"@} @{fsize <fontsize>@}
                       @{font "<fontname>@{,<fontsize>@}"@} @{fontscale <scale>@}
                       @{linewidth <lw>@} @{rounded|butt@}
                       @{dl <dashlength>@}@}
                       @{size <XX>@{unit@},<YY>@{unit@}@}

@end example

The default is to use a different color for each line type. Selecting
`monochome` will use black for all linetypes, Even in in mono mode
you can still use explicit colors for filled areas or linestyles.

where <font> is the name of the default font to use (default Helvetica)
and <fontsize> is the font size (in points, default 12).
For help on which fonts are available or how to install new ones, please
see the documentation for your local installation of pdflib.

The `enhanced` option enables enhanced text processing features
(subscripts, superscripts and mixed fonts). See `enhanced`.

The width of all lines in the plot can be increased by the factor <n>
specified in `linewidth`. Similarly `dashlength` is a multiplier for the
default dash spacing.

`rounded` sets line caps and line joins to be rounded; `butt` is the
default, butt caps and mitered joins.

The default size for PDF output is 5 inches by 3 inches. The @ref{size} option
changes this to whatever the user requests. By default the X and Y sizes
are taken to be in inches, but other units are possible (currently only cm).

* does not work.

@node pstricks, qms, pdf, complete_list_of_terminals
@subsection pstricks

@c ?commands set terminal pstricks
@c ?set terminal pstricks
@c ?set term pstricks
@c ?terminal pstricks
@c ?term pstricks
@cindex pstricks
@tmindex pstricks


The `pstricks` driver is intended for use with the "pstricks.sty" macro
package for TeX or LaTeX.
You need "pstricks.sty", and, of course, a printer that understands
PostScript, or a converter such as Ghostscript.

PSTricks is available at
@uref{http://tug.org/PSTricks/,http://tug.org/PSTricks/.
}
This driver definitely does not come close to using the full
capability of the PSTricks package.

Syntax:
@example
      set terminal pstricks
                     @{unit | size <XX>@{unit@},<YY>@{unit@}@}
                     @{standalone | input@}
                     @{blacktext | colortext | colourtext@}
                     @{linewidth <lw>@} @{rounded | butt@}
                     @{pointscale <ps>@}
                     @{psarrows | gparrows@}
                     @{background <rgbcolor>@}
                     @{pstricks | pdftricks2@}

@end example

The `unit` option produces a plot with internal dimensions 1x1. The default
is a plot of `size 5in,3in`.

`standalone` produces a LaTeX file with possibly multiple plots, ready
to be compiled.  The default is `input` to produce a TeX file which can
be included.

`blacktext` forces all text to be written in black. `colortext` enables
colored text. The default is `blacktext`.

`rounded` sets line caps and line joins to be rounded. `butt` sets butt
caps and mitered joins and is the default.

`linewidth` and `pointscale` scale the width of lines and the size of point
symbols, respectively.

`psarrows` draws `arrow`s using PSTricks commands which are shorter but do
not offer all options. `gparrows` selects drawing arrows using gnuplot's own
routine for full functionality instead.

With the option `pdftricks2` you can create output for the `pdftricks2`
macro package, which can be used with pdflatex/lualatex. Otherwise, output
for the `pstricks` package with traditional tex/latex or xelatex is
produced.

The old `hacktext` option has been replaced by the new default format (%h),
see `format specifiers`.

Transparency requires support by Ghostscript or conversion to PDF."

@node qms, regis, pstricks, complete_list_of_terminals
@subsection qms

@c ?commands set terminal qms
@c ?set terminal qms
@c ?set term qms
@c ?terminal qms
@c ?term qms
@cindex qms
@tmindex qms


The `qms` terminal driver supports the QMS/QUIC Laser printer, the Talaris
1200 and others.  It has no options."

@node regis, svg, qms, complete_list_of_terminals
@subsection regis

@c ?commands set terminal regis
@c ?set terminal regis
@c ?set term regis
@c ?terminal regis
@c ?term regis
@cindex regis
@tmindex regis


Note: legacy terminal.
The `regis` terminal device generates output in the REGIS graphics language.
It has the option of using 4 (the default) or 16 colors.

Syntax:
@example
      set terminal regis @{4 | 16@}"

@end example

@node svg, tek410x, regis, complete_list_of_terminals
@subsection svg

@c ?commands set terminal svg
@c ?set terminal svg
@c ?set term svg
@c ?terminal svg
@c ?term svg
@cindex svg
@tmindex svg


This terminal produces files in the W3C Scalable Vector Graphics format.

Syntax:
@example
      set terminal svg @{size <x>,<y> @{|fixed|dynamic@}@}
                       @{mouse@} @{standalone | jsdir <dirname>@}
                       @{name <plotname>@}
                       @{font "<fontname>@{,<fontsize>@}"@} @{@{no@}enhanced@}
                       @{fontscale <multiplier>@}
                       @{rounded|butt|square@} @{solid|dashed@} @{linewidth <lw>@}
                       @{background <rgb_color>@}

@end example

where <x> and <y> are the size of the SVG plot to generate,
`dynamic` allows a svg-viewer to resize plot, whereas the default
setting, `fixed`, will request an absolute size.

`linewidth <w>` increases the width of all lines used in the figure
by a factor of <w>.

<font> is the name of the default font to use (default Arial) and
<fontsize> is the font size (in points, default 12). SVG viewing
programs may substitute other fonts when the file is displayed.

The enhanced text mode syntax is shared with other gnuplot terminal types.
See `enhanced` for more details.

The `mouse` option tells gnuplot to add support for mouse tracking and for
toggling individual plots on/off by clicking on the corresponding key entry.
By default this is done by including a link that points to a script in a
local directory, usually /usr/local/share/gnuplot/<version>/js.
You can change this by using the `jsdir` option to specify either a
different local directory or a general URL. The latter is usually
appropriate if you are embedding the svg into a web page.
Alternatively, the `standalone` option embeds the mousing code in the svg
document itself rather than linking to an external resource.

When an SVG file will be used in conjunction with external files,
e.g. if it is referenced by javascript code in a web page or parent document,
then a unique name is required to avoid potential conflicting references
to other SVG plots.  Use the @ref{name} option to ensure uniqueness.


@node tek410x, tek40, svg, complete_list_of_terminals
@subsection tek410x

@c ?commands set terminal tek410x
@c ?set terminal tek410x
@c ?set term tek410x
@c ?terminal tek410x
@c ?term tek410x
@cindex tek410x
@tmindex tek410x


The `tek410x` terminal driver supports the 410x and 420x family of Tektronix
terminals.  It has no options."

@node tek40, texdraw, tek410x, complete_list_of_terminals
@subsection tek40

@c ?commands set terminal tek40xx
@c ?set terminal tek40xx
@c ?set term tek40xx
@c ?terminal tek40xx
@c ?term tek40xx
@cindex tek40
@tmindex tek40


@c ?commands set terminal vttek
@c ?set terminal vttek
@c ?set term vttek
@c ?terminal vttek
@c ?term vttek
@cindex vttek
@tmindex vttek


@c ?commands set terminal xterm
@c ?set terminal xterm
@c ?set term xterm
@c ?terminal xterm
@c ?term xterm
@cindex xterm
@tmindex xterm


@c ?commands set terminal kc-tek40xx
@c ?set terminal kc-tek40xx
@c ?set term kc-tek40xx
@c ?terminal kc-tek40xx
@c ?term kc-tek40xx
@cindex kc-tek40xx
@tmindex kc-tek40xx


@c ?commands set terminal km-tek40xx
@c ?set terminal km-tek40xx
@c ?set term km-tek40xx
@c ?terminal km-tek40xx
@c ?term km-tek40xx
@cindex km-tek40xx

@c ?commands set terminal selanar
@c ?set terminal selanar
@c ?set term selanar
@c ?terminal selanar
@c ?term selanar
@cindex selanar

@c ?commands set terminal sixeltek
@c ?set terminal sixeltek
@c ?set term sixeltek
@c ?terminal sixeltek
@c ?term sixeltek
@cindex sixeltek
@tmindex sixeltek


Syntax:
@example
   set terminal sixeltek @{<fontsize>@} @{mono|color|colors <n>@} @{size <x>,<y>@}
                         @{animate@}

@end example

The `sixel` output format was originally used by DEC terminals and printers.
This driver supports palette images with a maximum of 256 colors. The default
is 16 which can be changed using the `colors` option.

The font size can be specified as `small`, `medium` or `large`.

`anchor` causes each new plot to be anchored at the top left of the window.
`scroll` intead draws each plot at the current cursor position and allows it
to scroll with the text.

For use with xterm, xterm must be compiled/configured with
"--enable-sixel-graphics" and started with "-ti 340" on the command line.

Note that gnuplot also supports another sixel output terminal, `sixelgd`,
that offers more options and features."
@c ?commands set terminal bitgraph
@c ?set terminal bitgraph
@c ?set term bitgraph
@c ?terminal bitgraph
@c ?term bitgraph
@cindex bitgraph

This family of terminal drivers supports a variety of VT-like terminals.
`tek40xx` supports Tektronix 4010 and others as well as most TEK emulators.
`vttek` supports VT-like tek40xx terminal emulators.
The following are present only if selected when gnuplot is built:
`kc-tek40xx` supports MS-DOS Kermit Tek4010 terminal emulators in color;
`km-tek40xx` supports them in monochrome. `selanar` supports Selanar graphics.
`bitgraph` supports BBN Bitgraph terminals.
None have any options."

@node texdraw, tgif, tek40, complete_list_of_terminals
@subsection texdraw

@c ?commands set terminal texdraw
@c ?set terminal texdraw
@c ?set term texdraw
@c ?terminal texdraw
@c ?term texdraw
@cindex texdraw
@tmindex texdraw


The `texdraw` terminal driver supports the (La)TeX texdraw environment.  It is
intended for use with the texdraw package,
see https://www.ctan.org/tex-archive/graphics/texdraw/ .

@example
      set terminal texdraw
                     @{size <XX>@{unit@},<YY>@{unit@}@}
                     @{standalone | input@}
                     @{blacktext | colortext | colourtext@}
                     @{linewidth <lw>@} @{rounded | butt@}
                     @{pointscale <ps>@}
                     @{psarrows | gparrows@} @{texpoints | gppoints@}
                     @{background <rgbcolor>@}

@end example

Note: Graphics are in grayscale only. Text is always black. Boxes and polygons
are filled using solid gray levels only. Patterns are not available.

Points, among other things, are drawn using the LaTeX commands "\\Diamond" and
"\\Box".  These commands no longer belong to the LaTeX2e core; they are included
in the latexsym package, which is part of the base distribution and thus part
of any LaTeX implementation.  Please do not forget to use this package.
Other point types use symbols from the amssymb package. For compatibility with
plain TeX you need to specify the `gppoints` option.

`standalone` produces a LaTeX file with possibly multiple plots, ready
to be compiled.  The default is `input` to produce a TeX file which can
be included.

`blacktext` forces all text to be written in black. `colortext` enables
"colored" text. The default is `blacktext` and "color" means grayscale
really.

`rounded` sets line caps and line joins to be rounded; `butt` sets butt
caps and mitered joins and is the default.

`linewidth` and `pointscale` scale the width of lines and the size of point
symbols, respectively. `pointscale` only applies to `gppoints`.

`psarrows` draws `arrow`s using TeXdraw commands which are shorter but do not
offer all options. `gparrows` selects drawing arrows using gnuplot's
own routine for full functionality instead.  Similarly, `texpoints`, and
`gppoints` select LaTeX symbols or gnuplot's point drawing routines."

@node tgif, tkcanvas, texdraw, complete_list_of_terminals
@subsection tgif

@c ?commands set terminal tgif
@c ?set terminal tgif
@c ?set term tgif
@c ?terminal tgif
@c ?term tgif
@cindex tgif
@tmindex tgif


Legacy terminal (present only if gnuplot was configured --with-tgif).
Tgif is/was an Xlib based interactive 2-D vector graphics drawing tool
also capable of importing and marking up bitmap images.

The `tgif` driver supports a choice of font and font size and multiple
graphs on the page.  The proportions of the axes are not changed.

Syntax:
@example
      set terminal tgif @{portrait | landscape | default@} @{<[x,y]>@}
                        @{monochrome | color@}
                        @{@{linewidth | lw@} <LW>@}
                        @{solid | dashed@}
                        @{font "<fontname>@{,<fontsize>@}"@}

@end example

where <[x,y]> specifies the number of graphs in the x and y directions on the
page, `color` enables color, `linewidth` scales all linewidths by <LW>,
"<fontname>" is the name of a valid PostScript font, and <fontsize>
specifies the size of the PostScript font.
`defaults` sets all options to their defaults: `portrait`, `[1,1]`, `color`,
`linewidth 1.0`, `dashed`, `"Helvetica,18"`.

The `solid` option is usually preferred if lines are colored, as they often
are in the editor.  Hardcopy will be black-and-white, so `dashed` should be
chosen for that.

Multiplot is implemented in two different ways.

The first multiplot implementation is the standard gnuplot multiplot feature:

@example
      set terminal tgif
      set output "file.obj"
      set multiplot
      set origin x01,y01
      set size  xs,ys
      plot ...
           ...
      set origin x02,y02
      plot ...
      unset multiplot

@end example

See @ref{multiplot} for further information.

The second version is the [x,y] option for the driver itself.  The advantage
of this implementation is that everything is scaled and placed automatically
without the need for setting origins and sizes; the graphs keep their natural
x/y proportions of 3/2 (or whatever is fixed by @ref{size}).

If both multiplot methods are selected, the standard method is chosen and a
warning message is given.

Examples of single plots (or standard multiplot):
@example
      set terminal tgif                  # defaults
      set terminal tgif "Times-Roman,24"
      set terminal tgif landscape
      set terminal tgif landscape solid

@end example

Examples using the built-in multiplot mechanism:
@example
      set terminal tgif portrait [2,4]  # portrait; 2 plots in the x-
                                        # and 4 in the y-direction
      set terminal tgif [1,2]           # portrait; 1 plot in the x-
                                        # and 2 in the y-direction
      set terminal tgif landscape [3,3] # landscape; 3 plots in both
                                        # directions"

@end example

@node tkcanvas, tpic, tgif, complete_list_of_terminals
@subsection tkcanvas

@c ?commands set terminal tkcanvas
@c ?set terminal tkcanvas
@c ?set term tkcanvas
@c ?terminal tkcanvas
@c ?term tkcanvas
@cindex tkcanvas
@tmindex tkcanvas


This terminal driver generates Tk canvas widget commands in one of the
following scripting languages: Tcl (default), Perl, Python, Ruby, or REXX.

Syntax:
@example
      set terminal tkcanvas @{tcl | perl | perltkx | python | ruby | rexx@}
                            @{standalone | input@}
                            @{interactive@}
                            @{rounded | butt@}
                            @{nobackground | background <rgb color>@}
                            @{@{no@}rottext@}
                            @{size <width>,<height>@}
                            @{@{no@}enhanced@}
                            @{externalimages | pixels@}

@end example

Execute the following sequence of Tcl/Tk commands to display the result:

@example
      package require Tk
      # the following two lines are only required to support external images
      package require img::png
      source resize.tcl
      source plot.tcl
      canvas .c -width 800 -height 600
      pack .c
      gnuplot .c

@end example

Or, for Perl/Tk use a program like this:

@example
      use Tk;
      my $top = MainWindow->new;
      my $c = $top->Canvas(-width => 800, -height => 600)->pack;
      my $gnuplot = do "plot.pl";
      $gnuplot->($c);
      MainLoop;

@end example

Or, for Perl/Tkx use a program like this:

@example
      use Tkx;
      my $top = Tkx::widget->new(".");
      my $c = $top->new_tk__canvas(-width => 800, -height => 600);
      $c->g_pack;
      my $gnuplot = do "plot.pl";
      $gnuplot->($c);
      Tkx::MainLoop();

@end example

Or, for Python/Tkinter use a program like this:

@example
      from tkinter import *
      from tkinter import font
      root = Tk()
      c = Canvas(root, width=800, height=600)
      c.pack()
      exec(open('plot.py').read())
      gnuplot(c)
      root.mainloop()

@end example

Or, for Ruby/Tk use a program like this:

@example
      require 'tk'
      root = TkRoot.new @{ title 'Ruby/Tk' @}
      c = TkCanvas.new(root, 'width'=>800, 'height'=>600) @{ pack  @{ @} @}
      load('plot.rb')
      gnuplot(c)
      Tk.mainloop

@end example

Or, for Rexx/Tk use a program like this:

@example
      /**/
      call RxFuncAdd 'TkLoadFuncs', 'rexxtk', 'TkLoadFuncs'
      call TkLoadFuncs
      cv = TkCanvas('.c', '-width', 800, '-height', 600)
      call TkPack cv
      call 'plot.rex' cv
      do forever
          cmd = TkWait()
          if cmd = 'AWinClose' then leave
          interpret 'call' cmd
      end

@end example

The code generated by `gnuplot` (in the above examples, this code is
written to "plot.<ext>") contains the following procedures:

gnuplot(canvas)
@example
   takes the name of a canvas as its argument.
   When called, it clears the canvas, finds the size of the canvas and
   draws the plot in it, scaled to fit.

@end example

gnuplot_plotarea()
@example
   returns a list containing the borders of the plotting area
   (xleft, xright, ytop, ybot) in canvas screen coordinates."
   It works only for 2-dimensional plotting (`plot`).

@end example

gnuplot_axisranges()
@example
   returns the ranges of the two axes in plot coordinates
   (x1min, x1max, y1min, y1max, x2min, x2max, y2min, y2max).
   It works only for 2-dimensional plotting (`plot`).

@end example

You can create self-contained, minimal scripts using the `standalone`
option.  The default is `input` which creates scripts which have to be
source'd (or loaded or called or whatever the adequate term is for the
language selected).

If the `interactive` option is specified, mouse clicking on a line segment
will print the coordinates of its midpoint to stdout.
The user can supersede this behavior by supplying a procedure
user_gnuplot_coordinates which takes the following arguments:
@example
  win id x1s y1s x2s y2s x1e y1e x2e y2e x1m y1m x2m y2m,
@end example

i.e. the name of the canvas and the id of the line segment followed by the
coordinates of its start and end point in the two possible axis ranges; the
coordinates of the midpoint are only filled for logarithmic axes.

By default the canvas is `transparent`, but an explicit background color
can be set with the `background` option.

`rounded` sets line caps and line joins to be rounded;
`butt` is the default:  butt caps and mitered joins.

Text at arbitrary angles can be activated with the `rottext` option,
which requires Tcl/Tk 8.6 or later. The default is `norottext`.

The @ref{size} option tries to optimize the tic and font sizes for the given
canvas size.  By default an output size of 800 x 600 pixels is assumed.

`enhanced` selects `enhanced text` processing (default), but is currently
only available for Tcl.

The `pixels` (default) option selects the failsafe pixel-by-pixel image
handler, see also `image pixels`.
The `externalimages` option saves images as external png images, which
are later loaded and scaled by the tkcanvas code.  This option is only
available for Tcl and display may be slow in some situations since the
Tk image handler does not provide arbitrary scaling.  Scripts need to source
the provided rescale.tcl.

Interactive mode is not yet implemented for Python/Tk and Rexx/Tk.
Interactive mode for Ruby/Tk does not yet support user_gnuplot_coordinates."

@node tpic, windows, tkcanvas, complete_list_of_terminals
@subsection tpic

@c ?commands set terminal tpic
@c ?set terminal tpic
@c ?set term tpic
@c ?terminal tpic
@c ?term tpic
@cindex tpic
@tmindex tpic


Note: Legacy terminal (not built by default).
The latex, emtex, eepic, and tpic terminals in older versions of gnuplot
provided minimal support for graphics styles beyond simple lines and points.
They have been directly superseded by the `pict2e` terminal.
For more capable TeX/LaTeX compatible terminal types see
`cairolatex`, `context`, `epslatex`, `mp`, `pstricks`, and `tikz`.

The `tpic` terminal driver supports the LaTeX picture environment with tpic
\\specials. Options are the point size, line width, and dot-dash interval.

Syntax:
@example
      set terminal tpic <pointsize> <linewidth> <interval>

@end example

where @ref{pointsize} and `linewidth` are integers in milli-inches and `interval`
is a float in inches.  If a non-positive value is specified, the default is
chosen: pointsize = 40, linewidth = 6, interval = 0.1.

All drivers for LaTeX offer a special way of controlling text positioning:
If any text string begins with '@{', you also need to include a '@}' at the
end of the text, and the whole text will be centered both horizontally
and vertically by LaTeX. --- If the text string begins with '[', you need
to continue it with: a position specification (up to two out of t,b,l,r),
']@{', the text itself, and finally, '@}'. The text itself may be anything
LaTeX can typeset as an LR-box. \\rule@{@}@{@}'s may help for best positioning.

Examples:
About label positioning:
Use gnuplot defaults (mostly sensible, but sometimes not really best):
@example
       set title '\\LaTeX\\ -- $ \\gamma $'
@end example

Force centering both horizontally and vertically:
@example
       set label '@{\\LaTeX\\ -- $ \\gamma $@}' at 0,0
@end example

Specify own positioning (top here):
@example
       set xlabel '[t]@{\\LaTeX\\ -- $ \\gamma $@}'
@end example

The other label -- account for long ticlabels:
@example
       set ylabel '[r]@{\\LaTeX\\ -- $ \\gamma $\\rule@{7mm@}@{0pt@}@}'"

@end example

@node windows, wxt, tpic, complete_list_of_terminals
@subsection windows

@c ?commands set terminal windows
@c ?set terminal windows
@c ?set term windows
@c ?terminal windows
@c ?term windows
@cindex windows
@tmindex windows


The `windows` terminal is a fast interactive terminal driver that uses the
Windows GDI to draw and write text. The cross-platform `terminal wxt` and
`terminal qt` are also supported on Windows.

Syntax:
@example
      set terminal windows @{<n>@}
                           @{color | monochrome@}
                           @{solid | dashed@}
                           @{rounded | butt@}
                           @{enhanced | noenhanced@}
                           @{font <fontspec>@}
                           @{fontscale <scale>@}
                           @{linewidth <scale>@}
                           @{pointscale <scale>@}
                           @{background <rgb color>@}
                           @{title "Plot Window Title"@}
                           @{@{size | wsize@} <width>,<height>@}
                           @{position <x>,<y>@}
                           @{docked @{layout <rows>,<cols>@} | standalone@}
                           @{close@}

@end example

Multiple plot windows are supported: `set terminal win <n>` directs the
output to plot window number n.

`color` and @ref{monochrome} select colored or mono output,
`dashed` and `solid` select dashed or solid lines. Note that `color`
defaults to `solid`, whereas @ref{monochrome} defaults to `dashed`.
`rounded` sets line caps and line joins to be rounded; `butt` is the
default, butt caps and mitered joins.
`enhanced` enables enhanced text mode features (subscripts,
superscripts and mixed fonts, see `enhanced text` for more information).
`<fontspec>` is in the format "<fontface>,<fontsize>", where "<fontface>"
is the name of a valid Windows font, and <fontsize> is the size of the font
in points and both components are optional.
Note that in previous versions of gnuplot the `font` statement could be left
out and <fontsize> could be given as a number without double quotes. This is
no longer supported.
`linewidth`, `fontscale`, `pointscale` can be used to scale the width of
lines, the size of text, or the size of the point symbols.
@ref{title} changes the title of the graph window.
@ref{size} defines the width and height of the window's drawing area in pixels,
`wsize` defines the actual size of the window itself and @ref{position} defines
the origin of the window i.e. the position of the top left corner on the
screen (again in pixel). These options override any default settings
from the `wgnuplot.ini` file.

`docked` embeds the graph window in the wgnuplot text window and the @ref{size}
and @ref{position} options are ignored.  Note that `docked` is not available for
console-mode gnuplot.  Setting this option changes the default for new"
windows.  The initial default is `standalone`.  The `layout` option allows to
reserve a minimal number of columns and rows for graphs in docked mode.  If
there are more graphs than fit the given layout, additional rows will be added.
Graphs are sorted by the numerical id, filling rows first.

Other options may be changed using the `graph-menu` or the initialization file
`wgnuplot.ini`.

/* FIXME:  Move to persist section */
The Windows version normally terminates immediately as soon as the end of
any files given as command line arguments is reached (i.e. in non-interactive
mode), unless you specify `-` as the last command line option.
It will also not show the text-window at all, in this mode, only the plot.
By giving the optional argument `-persist` (same as for gnuplot under x11;
former Windows-only options `/noend` or `-noend` are still accepted as well),
will not close gnuplot. Contrary to gnuplot on other operating systems,
gnuplot's interactive command line is accessible after the -persist option.

The plot window remains open when the gnuplot terminal is changed with a
`set term` command. The plot window can be closed with `set term windows close`.

`gnuplot` supports different methods to create printed output on Windows,
see `windows printing`. The windows terminal supports data exchange with
other programs via clipboard and EMF files, see `graph-menu`. You can also
use the `terminal emf` to create EMF files.

@menu
* graph-menu::
* printing::
* text-menu"::
* wgnuplot.mnu"::
* wgnuplot.ini::
@end menu

@node graph-menu, printing, windows, windows
@subsubsection graph-menu

@c ?commands set terminal windows graph-menu
@c ?set terminal windows graph-menu
@c ?set term windows graph-menu
@c ?windows graph-menu
@cindex graph-menu
@tmindex graph-menu


The `gnuplot graph` window has the following options on a pop-up menu
accessed by pressing the right mouse button(*) or selecting `Options` from the
system menu or the toolbar:

`Copy to Clipboard` copies a bitmap and an enhanced metafile picture.

`Save as EMF...` allows the user to save the current graph window as
enhanced metafile (EMF or EMF+).

`Save as Bitmap...` allows the user to save a copy of the graph as bitmap
file.

`Print...` prints the graphics windows using a Windows printer driver and
allows selection of the printer and scaling of the output."
See also `windows printing`.

`Bring to Top` when checked raises the graph window to the top after every
plot.

`Color` when checked enables color output.  When unchecked it forces
all grayscale output.  This is e.g. useful to test appearance of monochrome
printouts.

`GDI backend` draws to the screen using Windows GDI. This is the classical
windows terminal, which is fast, but lacks many features such as
anti-aliasing, oversampling and full transparency support. It is now
deprecated.
The `GDI backend` which uses the classic GDI API is deprecated and has been
disabled in this version.

`GDI+ backend` draws to the screen using the GDI+ Windows API. It supports
full antialiasing, oversampling, transparency and custom dash patterns.
This was the default in versions 5.0 and 5.2.

`Direct2D backend` uses Direct2D & DirectWrite APIs to draw. It uses graphic
card acceleration and is hence typically much faster.  Since Direct2D can"
not create EMF data, saving and copying to clipboard of EMF data fall back"
to GDI+ while bitmap data is generated by D2d.
This is the recommended and default backend since version 5.3.

`Oversampling` draws diagonal lines at fractional pixel positions to avoid
"wobbling" effects.  Vertical or horizontal lines are still snapped
to integer pixel positions to avoid blurry lines.

`Antialiasing` enables smoothing of lines and edges. Note that this slows
down drawing.  @ref{polygons} is enabled by default but might
slow down drawing with the GDI+ backend.

`Fast rotation` switches antialiasing temporarily off while rotating the
graph with the mouse. This speeds up drawing considerably at the expense
of an additional redraw after releasing the mouse button.

`Background...` sets the window background color.

`Choose Font...` selects the font used in the graphics window.

`Line Styles...` allows customization of the line colors and styles.

`Update wgnuplot.ini` saves the current window locations, window sizes, text
window font, text window font size, graph window font, graph window font
size, background color to the initialization file `wgnuplot.ini`.

@c ^<HR align="left" width="100">
(*) Note that this menu is only available by pressing the right mouse button
with `unset mouse`.

@node printing, text-menu", graph-menu, windows
@subsubsection printing

@c ?commands set terminal windows printing
@c ?set terminal windows printing
@c ?set term windows printing
@c ?windows printing
@cindex printing

@cindex screendump

In order of preference, graphs may be printed in the following ways:

`1.` Use the `gnuplot` command @ref{terminal} to select a printer and @ref{output} to redirect output to a file.

`2.` Select the `Print...` command from the `gnuplot graph` window.  An extra
command `screendump` does this from the text window.

`3.` If `set output "PRN"` is used, output will go to a temporary file.  When
you exit from `gnuplot` or when you change the output with another @ref{output} command, a dialog box will appear for you to select a printer port.
If you choose OK, the output will be printed on the selected port, passing
unmodified through the print manager.  It is possible to accidentally (or
deliberately) send printer output meant for one printer to an incompatible
printer.


@node text-menu", wgnuplot.mnu", printing, windows
@subsubsection text-menu", /* FIXME: this is not really related to the windows driver, but the windows platform */

@c ?commands set terminal windows text-menu
@c ?set terminal windows text-menu
@c ?set term windows text-menu
@c ?windows text-menu
@cindex text-menu
@tmindex text-menu


The `gnuplot text` window has the following options on a pop-up menu accessed
by pressing the right mouse button or selecting `Options` from the system
menu:

`Copy to Clipboard` copies marked text to the clipboard.

`Paste` copies text from the clipboard as if typed by the user.

`Choose Font...` selects the font used in the text window.

`System Colors` when selected makes the text window honor the System Colors
set using the Control Panel.  When unselected, text is black or blue on a
white background.

`Wrap long lines` when selected lines longer than the current window width
are wrapped.

`Update wgnuplot.ini` saves the current settings to the initialisation file
`wgnuplot.ini`, which is located in the user's application data directory.


@node wgnuplot.mnu", wgnuplot.ini, text-menu", windows
@subsubsection wgnuplot.mnu", /* FIXME: this is not really related to the windows driver, but the windows platform */

@c ?windows wgnuplot.mnu
@cindex wgnuplot.mnu
@tmindex wgnuplot.mnu


If the menu file `wgnuplot.mnu` is found in the same directory as
`gnuplot`, then the menu specified in `wgnuplot.mnu` will be loaded.
Menu commands:

@example
 [Menu]      starts a new menu with the name on the following line.
 [EndMenu]   ends the current menu.
 [--]        inserts a horizontal menu separator.
 [|]         inserts a vertical menu separator.
 [Button]    puts the next macro on a push button instead of a menu.

@end example

Macros take two lines with the macro name (menu entry) on the first line and
the macro on the second line.  Leading spaces are ignored.  Macro commands:

@example
 [INPUT]     Input string with prompt terminated by [EOS] or @{ENTER@}
 [EOS]       End Of String terminator. Generates no output.
 [OPEN]      Get name of a file to open, with the title of the dialog
             terminated by [EOS], followed by a default filename terminated
             by [EOS] or @{ENTER@}.
 [SAVE]      Get name of a file to save.  Parameters like [OPEN]
 [DIRECTORY] Get name of a directory, with the title of the dialog
             terminated by [EOS] or @{ENTER@}

@end example

Macro character substitutions:

@example
 @{ENTER@}     Carriage Return '\\r'
 @{TAB@}       Tab '\\011'
 @{ESC@}       Escape '\\033'
 @{^A@}        '\\001'
 ...
 @{^_@}        '\\031'

@end example

Macros are limited to 256 characters after expansion.


@node wgnuplot.ini,  , wgnuplot.mnu", windows
@subsubsection wgnuplot.ini

@c ?commands set terminal windows wgnuplot.ini
@c ?set terminal windows wgnuplot.ini
@c ?set term windows wgnuplot.ini
@c ?windows wgnuplot.ini
@cindex wgnuplot.ini
@tmindex wgnuplot.ini


The Windows text window and the `windows` terminal will read some of their options from
the `[WGNUPLOT]` section of `wgnuplot.ini`.
This file is located in the user's application data directory. Here's a sample
`wgnuplot.ini` file:

@example
      [WGNUPLOT]
      TextOrigin=0 0
      TextSize=640 150
      TextFont=Consolas,9
      TextWrap=1
      TextLines=400
      TextMaximized=0
      SysColors=0
      GraphOrigin=0 150
      GraphSize=640 330
      GraphFont=Tahoma,10
      GraphColor=1
      GraphToTop=1
      GraphGDI+=1
      GraphD2D=0
      GraphGDI+Oversampling=1
      GraphAntialiasing=1
      GraphPolygonAA=1
      GraphFastRotation=1
      GraphBackground=255 255 255
      DockVerticalTextFrac=350
      DockHorizontalTextFrac=400
      Border=0 0 0 0 0
      Axis=192 192 192 2 2
      Line1=0 0 255 0 0
      Line2=0 255 0 0 1
      Line3=255 0 0 0 2
      Line4=255 0 255 0 3
      Line5=0 0 128 0 4

@end example

@c ^ <h3>Text window options</h3>

These settings apply to the wgnuplot text-window only."

The `TextOrigin` and `TextSize` entries specify the location and size of the
text window. If `TextMaximized` is non-zero, the window will be maximized.

The `TextFont` entry specifies the text window font and size.

The `TextWrap` entry selects wrapping of long text lines.

The `TextLines` entry specifies the number of (unwrapped) lines the internal
buffer of the text window can hold. This value currently cannot be changed
from within wgnuplot.

See `text-menu`.

@c ^ <h3>Docked graph options</h3>

`DockVerticalTextFrac` and `DockHorizontalTextFrac` set the fraction of the
window reserved for the text window in permille of the vertical or horizontal
layout.

@c ^ <h3>Graph window options</h3>

The `GraphFont` entry specifies the font name and size in points.

The five
numbers given in the `Border`, `Axis` and `Line` entries are the `Red`
intensity (0--255), `Green` intensity, `Blue` intensity, `Color Linestyle`
and `Mono Linestyle`.  `Linestyles` are 0=SOLID, 1=DASH, 2=DOT, 3=DASHDOT,
4=DASHDOTDOT.  In the sample `wgnuplot.ini` file above, Line 2 is a green
solid line in color mode, or a dashed line in monochrome mode.  The default
line width is 1 pixel.  If `Linestyle` is negative, it specifies the width of
a SOLID line in pixels.  Line1 and any linestyle used with the `points` style
must be SOLID with unit width.

See `graph-menu`."

@node wxt, x11, windows, complete_list_of_terminals
@subsection wxt

@c ?set terminal wxt
@c ?terminal wxt
@c ?set term wxt
@c ?term wxt
@cindex wxt
@tmindex wxt


The `wxt` terminal device generates output in a separate window. The window
is created by the wxWidgets library, where the 'wxt' comes from. The actual
drawing is done via cairo, a 2D graphics library, and pango, a library for
laying out and rendering text.

Syntax:
@example
        set term wxt @{<n>@}
                     @{size <width>,<height>@} @{position <x>,<y>@}
                     @{background <rgb_color> | nobackground@}
                     @{@{no@}enhanced@}
                     @{font <font>@} @{fontscale <scale>@}
                     @{title "title"@}
                     @{linewidth <lw>@} @{butt|rounded|square@}
                     @{dashlength <dl>@}
                     @{@{no@}persist@}
                     @{@{no@}raise@}
                     @{@{no@}ctrl@}
                     @{close@}

@end example

Multiple plot windows are supported: `set terminal wxt <n>` directs the
output to plot window number n.

The default window title is based on the window number. This title can also
be specified with the keyword "title".

Plot windows remain open even when the `gnuplot` driver is changed to a
different device.  A plot window can be closed by pressing the letter 'q'
while that window has input focus, by choosing `close` from a window
manager menu, or with `set term wxt <n> close`.

The size of the plot area is given in pixels, it defaults to 640x384.
In addition to that, the actual size of the window also includes the space
reserved for the toolbar and the status bar.
When you resize a window, the plot is immediately scaled to fit in the
new size of the window. Unlike other interactive terminals, the `wxt`
terminal scales the whole plot, including fonts and linewidths, and keeps
its global aspect ratio constant, leaving an empty space painted in gray.
If you type @ref{replot}, click the @ref{replot} icon in the terminal toolbar or
type a new `plot` command, the new plot will completely fit in the window
and the font size and the linewidths will be reset to their defaults.

The position option can be used to set the position of the plot window.
The position option only applies to the first plot after the `set term`
command.

The active plot window (the one selected by `set term wxt <n>`) is
interactive. Its behaviour is shared with other terminal types. See `mouse`
for details. It also has some extra icons, which are supposed to be
self-explanatory.

This terminal supports an enhanced text mode, which allows font and other
formatting commands (subscripts, superscripts, etc.) to be embedded in labels
and other text strings. The enhanced text mode syntax is shared with other
gnuplot terminal types. See `enhanced` for more details.

<font> is in the format "FontFace,FontSize", i.e. the face and the size
comma-separated in a single string. FontFace is a usual font face name, such
as \'Arial\'. If you do not provide FontFace, the wxt terminal will use
\'Sans\'. FontSize is the font size, in points. If you do not provide it,
the wxt terminal will use a size of 10 points.
@example
   For example :
      set term wxt font "Arial,12"
      set term wxt font "Arial" # to change the font face only
      set term wxt font ",12" # to change the font size only
      set term wxt font "" # to reset the font name and size

@end example

The fonts are retrieved from the usual fonts subsystems. Under Windows,
those fonts are to be found and configured in the entry "Fonts" of the
control panel. Under UNIX, they are handled by "fontconfig".

Pango, the library used to layout the text, is based on utf-8. Thus, the wxt
terminal has to convert from your encoding to utf-8. The default input
encoding is based on your \'locale\'. If you want to use another encoding,
make sure gnuplot knows which one you are using. See @ref{encoding} for more
details.

Pango may give unexpected results with fonts that do not respect the unicode
mapping. With the Symbol font, for example, the wxt terminal will use the map
provided by http://www.unicode.org/ to translate character codes to unicode.
Pango will do its best to find a font containing this character, looking for
your Symbol font, or other fonts with a broad unicode coverage, like the
DejaVu fonts. Note that "the Symbol font" is to be understood as the Adobe
Symbol font, distributed with Acrobat Reader as "SY______.PFB".
Alternatively, the OpenSymbol font, distributed with OpenOffice.org as
"opens___.ttf", offers the same characters. Microsoft has distributed a
Symbol font ("symbol.ttf"), but it has a different character set with
several missing or moved mathematic characters. If you experience problems
with your default setup (if the demo enhancedtext.dem is not displayed
properly for example), you probably have to install one of the Adobe or
OpenOffice Symbol fonts, and remove the Microsoft one.
Other non-conform fonts, such as "wingdings" have been observed working.

The rendering of the plot can be altered with a dialog available from the
toolbar. To obtain the best output possible, the rendering involves three
mechanisms : antialiasing, oversampling and hinting.
Antialiasing allows to display non-horizontal and non-vertical lines
smoother.
Oversampling combined with antialiasing provides subpixel accuracy,
so that gnuplot can draw a line from non-integer coordinates. This avoids
wobbling effects on diagonal lines ('plot x' for example).
Hinting avoids the blur on horizontal and vertical lines caused by
oversampling. The terminal will snap these lines to integer coordinates so
that a one-pixel-wide line will actually be drawn on one and only one pixel.

By default, the window is raised to the top of your desktop when a plot is
drawn. This can be controlled with the keyword "raise".
The keyword "persist" will prevent gnuplot from exiting before you
explicitly close all the plot windows.
Finally, by default the key <space> raises the gnuplot console window, and
'q' closes the plot window. The keyword "ctrl" allows you to replace those
bindings by <ctrl>+<space> and <ctrl>+'q', respectively.
These three keywords (raise, persist and ctrl) can also be set and remembered
between sessions through the configuration dialog."

@node x11, xlib, wxt, complete_list_of_terminals
@subsection x11

@c ?commands set terminal x11
@c ?set terminal x11
@c ?set term x11
@c ?terminal x11
@c ?term x11
@cindex x11

@cindex X11


Syntax:
@example
   set terminal x11 @{<n> | window "<string>"@}
                    @{title "<string>"@}
                    @{@{no@}enhanced@} @{font <fontspec>@}
                    @{linewidth LW@}
                    @{@{no@}persist@} @{@{no@}raise@} @{@{no@}ctrlq@}
                    @{@{no@}replotonresize@}
                    @{close@}
                    @{size XX,YY@} @{position XX,YY@}
   set terminal x11 @{reset@}

@end example

Multiple plot windows are supported: `set terminal x11 <n>` directs the
output to plot window number n.  If n is not 0, the terminal number will be
appended to the window title (unless a title has been supplied manually)
and the icon will be labeled `Gnuplot <n>`.  The active window may be
distinguished by a change in cursor (from default to crosshair).

The `x11` terminal can connect to X windows previously created by an outside
application via the option `window` followed by a string containing the
X ID for the window in hexadecimal format.  Gnuplot uses that external X
window as a container since X does not allow for multiple clients selecting
the ButtonPress event.  In this way, gnuplot's mouse features work within
the contained plot window.

@example
   set term x11 window "220001e"

@end example

The x11 terminal supports enhanced text mode (see `enhanced`), subject
to the available fonts. In order for font size commands embedded in text
to have any effect, the default x11 font must be scalable. Thus the first
example below will work as expected, but the second will not.

@example
   set term x11 enhanced font "arial,15"
   set title '@{/=20 Big@} Medium @{/=5 Small@}'

@end example

@example
   set term x11 enhanced font "terminal-14"
   set title '@{/=20 Big@} Medium @{/=5 Small@}'

@end example

Plot windows remain open even when the `gnuplot` driver is changed to a
different device.  A plot window can be closed by pressing the letter q
while that window has input focus, or by choosing `close` from a window
manager menu.  All plot windows can be closed by specifying @ref{reset}, which
actually terminates the subprocess which maintains the windows (unless
`-persist` was specified).  The `close` command can be used to close
individual plot windows by number.  However, after a @ref{reset}, those plot
windows left due to persist cannot be closed with the command `close`.
A `close` without a number closes the current active plot window.

The gnuplot outboard driver, gnuplot_x11, is searched in a default place
chosen when the program is compiled.  You can override that by defining
the environment variable GNUPLOT_DRIVER_DIR to point to a different
location.

Plot windows will automatically be closed at the end of the session
unless the `-persist` option was given.

The options `persist` and @ref{raise} are unset by default, which means that
the defaults (persist == no and raise == yes) or the command line options
-persist / -raise or the Xresources are taken.  If [no]persist or
[no]raise are specified, they will override command line options and
Xresources.  Setting one of these options takes place immediately, so
the behaviour of an already running driver can be modified.  If the window
does not get raised, see discussion in @ref{raise}.

The option `replotonresize` (active by default) replots the data when the
plot window is resized. Without this option, the even-aspect-ratio scaling
may result in the plot filling only part of the window after resizing.
With this option, gnuplot does a full replot on each resize event, resulting
in better space utilization. This option is generally desirable, unless the
potentially CPU-intensive replotting during resizing is a concern. Replots
can be manually initiated with hotkey 'e' or the 'replot' command.
@example
 "
@end example

The option `title "<title name>"` will supply the title name of the window
for the current plot window or plot window <n> if a number is given.
Where (or if) this title is shown depends on your X window manager.

The size option can be used to set the size of the plot window.  The
size option will only apply to newly created windows.

The position option can be used to set the position of the plot window.  The
position option will only apply to newly created windows.

The size or aspect ratio of a plot may be changed by resizing the `gnuplot`
window.

Linewidths and pointsizes may be changed from within `gnuplot` with
`set linestyle`.

For terminal type `x11`, `gnuplot` accepts (when initialized) the standard
X Toolkit options and resources such as geometry, font, and name from the
command line arguments or a configuration file.  See the X(1) man page
(or its equivalent) for a description of such options.

@cindex X resources

A number of other `gnuplot` options are available for the `x11` terminal.
These may be specified either as command-line options when `gnuplot` is
invoked or as resources in the configuration file ".Xdefaults".  They are
set upon initialization and cannot be altered during a `gnuplot` session.
(except `persist` and @ref{raise})

@menu
* x11_fonts::
* command-line_options_::
* color_resources_::
* grayscale_resources_::
* line_resources_::
* x11_pm3d_resources::
* x11_other_resources::
@end menu

@node x11_fonts, command-line_options_, x11, x11
@subsubsection x11_fonts

@c ?commands set terminal x11 x11_fonts
@c ?set terminal x11 x11_fonts
@c ?set term x11 x11_fonts
@c ?x11 x11_fonts
@cindex x11_fonts

@cindex fonts

Upon initial startup, the default font is taken from the X11 resources
as set in the system or user .Xdefaults file or on the command line.

Example:
@example
      gnuplot*font: lucidasans-bold-12
@end example

A new default font may be specified to the x11 driver from inside
gnuplot using
@example
     `set term x11 font "<fontspec>"`
@end example

The driver first queries the X-server for a font of the exact name given.
If this query fails, then it tries to interpret <fontspec> as
"<font>,<size>,<slant>,<weight>" and to construct a full X11 font name
of the form
@example
      -*-<font>-<weight>-<s>-*-*-<size>-*-*-*-*-*-<encoding>

@end example

@example
 <font> is the base name of the font (e.g. Times or Symbol)
 <size> is the point size (defaults to 12 if not specified)
 <s> is 'i' if <slant>=="italic" 'o' if <slant>=="oblique" 'r' otherwise
 <weight> is 'medium' or 'bold' if explicitly requested, otherwise '*'
 <encoding> is set based on the current character set.
@end example

So `set term x11 font "arial,15,italic"` will be translated to
-*-arial-*-i-*-*-15-*-*-*-*-*-iso8859-1 (assuming default encoding).
The <size>, <slant>, and <weight> specifications are all optional.
If you do not specify <slant> or <weight> then you will get whatever font
variant the font server offers first.
You may set a default encoding via the corresponding X11 resource. E.g.
@example
      gnuplot*encoding: iso8859-15
@end example

The driver also recognizes some common PostScript font names and
replaces them with possible X11 or TrueType equivalents.
This same sequence is used to process font requests from `set label`.

If your gnuplot was built with configuration option --enable-x11-mbfonts,
you can specify multi-byte fonts by using the prefix "mbfont:" on the font
name. An additional font may be given, separated by a semicolon.
Since multi-byte font encodings are interpreted according to the locale
setting, you must make sure that the environmental variable LC_CTYPE is set
to some appropriate locale value such as ja_JP.eucJP, ko_KR.EUC, or zh_CN.EUC.

Example:
@example
      set term x11 font 'mbfont:kana14;k14'
            # 'kana14' and 'k14' are Japanese X11 font aliases, and ';'
            # is the separator of font names.
      set term x11 font 'mbfont:fixed,16,r,medium'
            # <font>,<size>,<slant>,<weight> form is also usable.
      set title '(mb strings)' font 'mbfont:*-fixed-medium-r-normal--14-*'

@end example

The same syntax applies to the default font in Xresources settings,
for example,
@example
      gnuplot*font: \\
          mbfont:-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0

@end example

If gnuplot is built with --enable-x11-mbfonts, you can use two special
PostScript font names 'Ryumin-Light-*' and 'GothicBBB-Medium-*' (standard
Japanese PS fonts) without the prefix "mbfont:".


@node command-line_options_, color_resources_, x11_fonts, x11
@subsubsection command-line_options

@c ?commands set terminal x11 command-line-options
@c ?set terminal x11 command-line-options
@c ?set term x11 command-line-options
@c ?x11 command-line-options
In addition to the X Toolkit options, the following options may be specified
on the command line when starting `gnuplot` or as resources in your
".Xdefaults" file (note that @ref{raise} and `persist` can be overridden
later by `set term x11 [no]raise [no]persist)`:

@example
 `-mono`     forces monochrome rendering on color displays.
 `-gray`     requests grayscale rendering on grayscale or color displays.
             (Grayscale displays receive monochrome rendering by default.)
 `-clear`    requests that the window be cleared momentarily before a
             new plot is displayed.
 `-tvtwm`    requests that geometry specifications for position of the
             window be made relative to the currently displayed portion
             of the virtual root.
 `-raise`    raises plot window after each plot
 `-noraise`  does not raise plot window after each plot
 `-ctrlq   ` closes window on ctrl-q rather than q
 `-persist`  plot windows survive after main gnuplot program exits

@end example

@cindex X resources

The options are shown above in their command-line syntax.  When entered as
resources in ".Xdefaults", they require a different syntax.

Example:
@example
      gnuplot*gray:  on
      gnuplot*ctrlq: on

@end example

`gnuplot` also provides a command line option (`-pointsize <v>`) and a
resource, `gnuplot*pointsize: <v>`, to control the size of points plotted
with the `points` plotting style.  The value `v` is a real number (greater
than 0 and less than or equal to ten) used as a scaling factor for point
sizes.  For example, `-pointsize 2` uses points twice the default size, and
`-pointsize 0.5` uses points half the normal size.

The `-ctrlq` switch changes the hot-key that closes a plot window from `q`
to `<ctrl>q`. This is useful is you are using the keystroke-capture feature
`pause mouse keystroke`, since it allows the character `q` to be captured
just as all other alphanumeric characters. The `-ctrlq` switch similarly
replaces the <space> hot-key with <ctrl><space> for the same reason.


@node color_resources_, grayscale_resources_, command-line_options_, x11
@subsubsection color_resources

@c ?set terminal x11 color_resources
@c ?set term x11 color_resources
@c ?x11 color_resources
@cindex X resources

NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5
The X11 terminal honors the following resources (shown here with their
default values) or the greyscale resources.  The values may be color names
as listed in the X11 rgb.txt file on your system, hexadecimal RGB color
specifications (see X11 documentation), or a color name followed by a comma
and an `intensity` value from 0 to 1.  For example, `blue, 0.5` means a half
intensity blue.

@example
 gnuplot*background:  white
 gnuplot*textColor:   black
 gnuplot*borderColor: black
 gnuplot*axisColor:   black
 gnuplot*line1Color:  red
 gnuplot*line2Color:  green
 gnuplot*line3Color:  blue
 gnuplot*line4Color:  magenta
 gnuplot*line5Color:  cyan
 gnuplot*line6Color:  sienna
 gnuplot*line7Color:  orange
 gnuplot*line8Color:  coral

@end example


The command-line syntax for these is simple only for background,
which maps directly to the usual X11 toolkit option "-bg".  All
others can only be set on the command line by use of the generic
"-xrm" resource override option

Examples:

@example
      gnuplot -background coral
@end example

to change the background color.

@example
      gnuplot -xrm 'gnuplot*line1Color:blue'
@end example

to override the first linetype color.


@node grayscale_resources_, line_resources_, color_resources_, x11
@subsubsection grayscale_resources

@c ?commands set terminal x11 grayscale_resources
@c ?set terminal x11 grayscale_resources
@c ?set term x11 grayscale_resources
@c ?x11 grayscale_resources
@cindex grayscale_resources

@cindex X resources

When `-gray` is selected, `gnuplot` honors the following resources for
grayscale or color displays (shown here with their default values).  Note
that the default background is black.

@example
 gnuplot*background: black
 gnuplot*textGray:   white
 gnuplot*borderGray: gray50
 gnuplot*axisGray:   gray50
 gnuplot*line1Gray:  gray100
 gnuplot*line2Gray:  gray60
 gnuplot*line3Gray:  gray80
 gnuplot*line4Gray:  gray40
 gnuplot*line5Gray:  gray90
 gnuplot*line6Gray:  gray50
 gnuplot*line7Gray:  gray70
 gnuplot*line8Gray:  gray30

@end example



@node line_resources_, x11_pm3d_resources, grayscale_resources_, x11
@subsubsection line_resources

@c ?set terminal x11 line_resources
@c ?set term x11 line_resources
@c ?x11 line_resources
@cindex X resources

NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5
`gnuplot` honors the following resources for setting the width (in pixels) of
plot lines (shown here with their default values.)  0 or 1 means a minimal
width line of 1 pixel width.  A value of 2 or 3 may improve the appearance of
some plots.

@example
 gnuplot*borderWidth: 1
 gnuplot*axisWidth:   0
 gnuplot*line1Width:  0
 gnuplot*line2Width:  0
 gnuplot*line3Width:  0
 gnuplot*line4Width:  0
 gnuplot*line5Width:  0
 gnuplot*line6Width:  0
 gnuplot*line7Width:  0
 gnuplot*line8Width:  0

@end example


`gnuplot` honors the following resources for setting the dash style used for
plotting lines.  0 means a solid line.  A two-digit number `jk` (`j` and `k`
are >= 1 and <= 9) means a dashed line with a repeated pattern of `j` pixels
on followed by `k` pixels off.  For example, '16' is a dotted line with one
pixel on followed by six pixels off.  More elaborate on/off patterns can be
specified with a four-digit value.  For example, '4441' is four on, four off,
four on, one off.  The default values shown below are for monochrome displays
or monochrome rendering on color or grayscale displays.
Color displays default to dashed:off

@example
 gnuplot*dashed:       off
 gnuplot*borderDashes:   0
 gnuplot*axisDashes:    16
 gnuplot*line1Dashes:    0
 gnuplot*line2Dashes:   42
 gnuplot*line3Dashes:   13
 gnuplot*line4Dashes:   44
 gnuplot*line5Dashes:   15
 gnuplot*line6Dashes: 4441
 gnuplot*line7Dashes:   42
 gnuplot*line8Dashes:   13

@end example

, "

@node x11_pm3d_resources, x11_other_resources, line_resources_, x11
@subsubsection x11 pm3d_resources

@c ?set terminal x11 pm3d_resources
@c ?set term x11 pm3d_resources
@c ?x11 pm3d_resources
@c ?x11 pm3d
@cindex X resources

NB: THIS SECTION IS LARGELY IRRELEVANT IN GNUPLOT VERSION 5

By default `gnuplot` uses the default visual of the screen. The number of
colors which can be allocated depends on the visual class chosen. On a
visual class with a depth > 12bit, gnuplot starts with a maximal number
of 0x200 colors.  On a visual class with a depth > 8bit (but <= 12 bit)
the maximal number of colors is 0x100, on <= 8bit displays the maximum
number of colors is 240 (16 are left for line colors).

Gnuplot first starts to allocate the maximal number of colors as stated
above.  If this fails, the number of colors is reduced by the factor 2
until gnuplot gets all colors which are requested. If dividing @ref{maxcolors}
by 2 repeatedly results in a number which is smaller than `mincolors`
`gnuplot` tries to install a private colormap. In this case the window
manager is responsible for swapping colormaps when the pointer is moved
in and out the x11 driver's window.

The default for `mincolors` is maxcolors / (num_colormaps > 1 ? 2 : 8),
where num_colormaps is the number of colormaps which are currently used
by gnuplot (usually 1, if only one x11 window is open).


@node x11_other_resources,  , x11_pm3d_resources, x11
@subsubsection x11 other_resources

@c ?commands set terminal x11 other_resources
@c ?set terminal x11 other_resources
@c ?set term x11 other_resources
@c ?x11 other_resources
@cindex X resources

By default the contents of the current plot window are exported to the X11
clipboard in response to X events in the window. Setting the resource
'gnuplot*exportselection' to 'off' or 'false' will disable this.

By default text rotation is done using a method that is fast, but can
corrupt nearby colors depending on the background.  If this is a problem,
you can set the resource 'gnuplot.fastrotate' to 'off'


@example
 gnuplot*exportselection:  off
 gnuplot*fastrotate:  on
 gnuplot*ctrlq:  off

@end example



@node xlib,  , x11, complete_list_of_terminals
@subsection xlib

@c ?commands set terminal xlib
@c ?set terminal xlib
@c ?set term xlib
@c ?terminal xlib
@c ?term xlib
@cindex xlib
@tmindex xlib


The `xlib` terminal driver supports the X11 Windows System.  It generates
gnuplot_x11 commands, but sends them to the output file specified by
`set output '<filename>'`. `set term x11` is equivalent to
`set output "|gnuplot_x11 -noevents"; set term xlib`.
`xlib` takes the same set of options as `x11`."


@node Concept_Index, Command_Index, Terminal_types, Top
@unnumbered Concept Index
@printindex cp

@node Command_Index, Options_Index, Concept_Index, Top
@unnumbered Command Index
@printindex cm

@node Options_Index, Function_Index, Command_Index, Top
@unnumbered Options Index
@printindex op

@node Function_Index, Terminal_Index, Options_Index, Top
@unnumbered Function Index
@printindex fn

@node Terminal_Index,  , Function_Index, Top
@unnumbered Terminal Index
@printindex tm

@c @shortcontents
@contents
@bye
